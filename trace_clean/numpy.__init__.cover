    1: """
       NumPy
       =====
       
       Provides
         1. An array object of arbitrary homogeneous items
         2. Fast mathematical operations over arrays
         3. Linear Algebra, Fourier Transforms, Random Number Generation
       
       How to use the documentation
       ----------------------------
       Documentation is available in two forms: docstrings provided
       with the code, and a loose standing reference guide, available from
       `the NumPy homepage <https://numpy.org>`_.
       
       We recommend exploring the docstrings using
       `IPython <https://ipython.org>`_, an advanced Python shell with
       TAB-completion and introspection capabilities.  See below for further
       instructions.
       
       The docstring examples assume that `numpy` has been imported as ``np``::
       
         >>> import numpy as np
       
       Code snippets are indicated by three greater-than signs::
       
         >>> x = 42
         >>> x = x + 1
       
       Use the built-in ``help`` function to view a function's docstring::
       
         >>> help(np.sort)
         ... # doctest: +SKIP
       
       For some objects, ``np.info(obj)`` may provide additional help.  This is
       particularly true if you see the line "Help on ufunc object:" at the top
       of the help() page.  Ufuncs are implemented in C, not Python, for speed.
       The native Python help() does not know how to view their help, but our
       np.info() function does.
       
       To search for documents containing a keyword, do::
       
         >>> np.lookfor('keyword')
         ... # doctest: +SKIP
       
       General-purpose documents like a glossary and help on the basic concepts
       of numpy are available under the ``doc`` sub-module::
       
         >>> from numpy import doc
         >>> help(doc)
         ... # doctest: +SKIP
       
       Available subpackages
       ---------------------
       lib
           Basic functions used by several sub-packages.
       random
           Core Random Tools
       linalg
           Core Linear Algebra Tools
       fft
           Core FFT routines
       polynomial
           Polynomial tools
       testing
           NumPy testing tools
       distutils
           Enhancements to distutils with support for
           Fortran compilers support and more  (for Python <= 3.11).
       
       Utilities
       ---------
       test
           Run numpy unittests
       show_config
           Show numpy build configuration
       matlib
           Make everything matrices.
       __version__
           NumPy version string
       
       Viewing documentation using IPython
       -----------------------------------
       
       Start IPython and import `numpy` usually under the alias ``np``: `import
       numpy as np`.  Then, directly past or use the ``%cpaste`` magic to paste
       examples into the shell.  To see which functions are available in `numpy`,
       type ``np.<TAB>`` (where ``<TAB>`` refers to the TAB key), or use
       ``np.*cos*?<ENTER>`` (where ``<ENTER>`` refers to the ENTER key) to narrow
       down the list.  To view the docstring for a function, use
       ``np.cos?<ENTER>`` (to view the docstring) and ``np.cos??<ENTER>`` (to view
       the source code).
       
       Copies vs. in-place operation
       -----------------------------
       Most of the functions in `numpy` return a copy of the array argument
       (e.g., `np.sort`).  In-place versions of these functions are often
       available as array methods, i.e. ``x = np.array([1,2,3]); x.sort()``.
       Exceptions to this rule are documented.
       
       """
    1: import sys
    1: import warnings
       
    1: from ._globals import _NoValue, _CopyMode
       # These exceptions were moved in 1.25 and are hidden from __dir__()
    1: from .exceptions import (
           ComplexWarning, ModuleDeprecationWarning, VisibleDeprecationWarning,
           TooHardError, AxisError)
       
       
       # If a version with git hash was stored, use that instead
    1: from . import version
    1: from .version import __version__
       
       # We first need to detect if we're being called as part of the numpy setup
       # procedure itself in a reliable manner.
    1: try:
    1:     __NUMPY_SETUP__
    1: except NameError:
    1:     __NUMPY_SETUP__ = False
       
    1: if __NUMPY_SETUP__:
           sys.stderr.write('Running from numpy source directory.\n')
       else:
           # Allow distributors to run custom init code before importing numpy.core
    1:     from . import _distributor_init
       
    1:     try:
    1:         from numpy.__config__ import show as show_config
           except ImportError as e:
               msg = """Error importing numpy: you should not try to import numpy from
               its source directory; please exit the numpy source tree, and relaunch
               your python interpreter from there."""
               raise ImportError(msg) from e
       
    1:     __all__ = [
               'exceptions', 'ModuleDeprecationWarning', 'VisibleDeprecationWarning',
               'ComplexWarning', 'TooHardError', 'AxisError']
       
           # mapping of {name: (value, deprecation_msg)}
    1:     __deprecated_attrs__ = {}
       
    1:     from . import core
    1:     from .core import *
    1:     from . import compat
    1:     from . import exceptions
    1:     from . import dtypes
    1:     from . import lib
           # NOTE: to be revisited following future namespace cleanup.
           # See gh-14454 and gh-15672 for discussion.
    1:     from .lib import *
       
    1:     from . import linalg
    1:     from . import fft
    1:     from . import polynomial
    1:     from . import random
    1:     from . import ctypeslib
    1:     from . import ma
    1:     from . import matrixlib as _mat
    1:     from .matrixlib import *
       
           # Deprecations introduced in NumPy 1.20.0, 2020-06-06
    1:     import builtins as _builtins
       
    1:     _msg = (
    1:         "module 'numpy' has no attribute '{n}'.\n"
               "`np.{n}` was a deprecated alias for the builtin `{n}`. "
               "To avoid this error in existing code, use `{n}` by itself. "
               "Doing this will not modify any behavior and is safe. {extended_msg}\n"
               "The aliases was originally deprecated in NumPy 1.20; for more "
               "details and guidance see the original release note at:\n"
               "    https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations")
       
    1:     _specific_msg = (
    1:         "If you specifically wanted the numpy scalar type, use `np.{}` here.")
       
    1:     _int_extended_msg = (
    1:         "When replacing `np.{}`, you may wish to use e.g. `np.int64` "
               "or `np.int32` to specify the precision. If you wish to review "
               "your current use, check the release note link for "
               "additional information.")
       
    1:     _type_info = [
    1:         ("object", ""),  # The NumPy scalar only exists by name.
    1:         ("bool", _specific_msg.format("bool_")),
    1:         ("float", _specific_msg.format("float64")),
    1:         ("complex", _specific_msg.format("complex128")),
    1:         ("str", _specific_msg.format("str_")),
    1:         ("int", _int_extended_msg.format("int"))]
       
   15:     __former_attrs__ = {
    6:          n: _msg.format(n=n, extended_msg=extended_msg)
    7:          for n, extended_msg in _type_info
            }
       
           # Future warning introduced in NumPy 1.24.0, 2022-11-17
    1:     _msg = (
    1:         "`np.{n}` is a deprecated alias for `{an}`.  (Deprecated NumPy 1.24)")
       
           # Some of these are awkward (since `np.str` may be preferable in the long
           # term), but overall the names ending in 0 seem undesirable
    1:     _type_info = [
    1:         ("bool8", bool_, "np.bool_"),
    1:         ("int0", intp, "np.intp"),
    1:         ("uint0", uintp, "np.uintp"),
    1:         ("str0", str_, "np.str_"),
    1:         ("bytes0", bytes_, "np.bytes_"),
    1:         ("void0", void, "np.void"),
    2:         ("object0", object_,
    1:             "`np.object0` is a deprecated alias for `np.object_`. "
                   "`object` can be used instead.  (Deprecated NumPy 1.24)")]
       
           # Some of these could be defined right away, but most were aliases to
           # the Python objects and only removed in NumPy 1.24.  Defining them should
           # probably wait for NumPy 1.26 or 2.0.
           # When defined, these should possibly not be added to `__all__` to avoid
           # import with `from numpy import *`.
    1:     __future_scalars__ = {"bool", "long", "ulong", "str", "bytes", "object"}
       
   17:     __deprecated_attrs__.update({
    8:         n: (alias, _msg.format(n=n, an=an)) for n, alias, an in _type_info})
       
    1:     import math
       
    2:     __deprecated_attrs__['math'] = (math,
    1:         "`np.math` is a deprecated alias for the standard library `math` "
               "module (Deprecated Numpy 1.25). Replace usages of `np.math` with "
               "`math`")
       
    1:     del math, _msg, _type_info
       
    1:     from .core import abs
           # now that numpy modules are imported, can initialize limits
    1:     core.getlimits._register_known_types()
       
    1:     __all__.extend(['__version__', 'show_config'])
    1:     __all__.extend(core.__all__)
    1:     __all__.extend(_mat.__all__)
    1:     __all__.extend(lib.__all__)
    1:     __all__.extend(['linalg', 'fft', 'random', 'ctypeslib', 'ma'])
       
           # Remove min and max from __all__ to avoid `from numpy import *` override
           # the builtins min/max. Temporary fix for 1.25.x/1.26.x, see gh-24229.
    1:     __all__.remove('min')
    1:     __all__.remove('max')
    1:     __all__.remove('round')
       
           # Remove one of the two occurrences of `issubdtype`, which is exposed as
           # both `numpy.core.issubdtype` and `numpy.lib.issubdtype`.
    1:     __all__.remove('issubdtype')
       
           # These are exported by np.core, but are replaced by the builtins below
           # remove them to ensure that we don't end up with `np.long == np.int_`,
           # which would be a breaking change.
    1:     del long, unicode
    1:     __all__.remove('long')
    1:     __all__.remove('unicode')
       
           # Remove things that are in the numpy.lib but not in the numpy namespace
           # Note that there is a test (numpy/tests/test_public_api.py:test_numpy_namespace)
           # that prevents adding more things to the main namespace by accident.
           # The list below will grow until the `from .lib import *` fixme above is
           # taken care of
    1:     __all__.remove('Arrayterator')
    1:     del Arrayterator
       
           # These names were removed in NumPy 1.20.  For at least one release,
           # attempts to access these names in the numpy namespace will trigger
           # a warning, and calling the function will raise an exception.
    1:     _financial_names = ['fv', 'ipmt', 'irr', 'mirr', 'nper', 'npv', 'pmt',
                               'ppmt', 'pv', 'rate']
   23:     __expired_functions__ = {
   10:         name: (f'In accordance with NEP 32, the function {name} was removed '
                      'from NumPy version 1.20.  A replacement for this function '
                      'is available in the numpy_financial library: '
                      'https://pypi.org/project/numpy-financial')
   11:         for name in _financial_names}
       
           # Filter out Cython harmless warnings
    1:     warnings.filterwarnings("ignore", message="numpy.dtype size changed")
    1:     warnings.filterwarnings("ignore", message="numpy.ufunc size changed")
    1:     warnings.filterwarnings("ignore", message="numpy.ndarray size changed")
       
           # oldnumeric and numarray were removed in 1.9. In case some packages import
           # but do not use them, we define them here for backward compatibility.
    1:     oldnumeric = 'removed'
    1:     numarray = 'removed'
       
    1:     def __getattr__(attr):
               # Warn for expired attributes, and return a dummy function
               # that always raises an exception.
  238:         import warnings
  238:         import math
  238:         try:
  238:             msg = __expired_functions__[attr]
  238:         except KeyError:
  238:             pass
               else:
                   warnings.warn(msg, DeprecationWarning, stacklevel=2)
       
                   def _expired(*args, **kwds):
                       raise RuntimeError(msg)
       
                   return _expired
       
               # Emit warnings for deprecated attributes
  238:         try:
  238:             val, msg = __deprecated_attrs__[attr]
  238:         except KeyError:
  238:             pass
               else:
                   warnings.warn(msg, DeprecationWarning, stacklevel=2)
                   return val
       
  238:         if attr in __future_scalars__:
                   # And future warnings for those that will change, but also give
                   # the AttributeError
                   warnings.warn(
                       f"In the future `np.{attr}` will be defined as the "
                       "corresponding NumPy scalar.", FutureWarning, stacklevel=2)
       
  238:         if attr in __former_attrs__:
                   raise AttributeError(__former_attrs__[attr])
       
  238:         if attr == 'testing':
                   import numpy.testing as testing
                   return testing
  238:         elif attr == 'Tester':
                   "Removed in NumPy 1.25.0"
                   raise RuntimeError("Tester was removed in NumPy 1.25.")
       
  476:         raise AttributeError("module {!r} has no attribute "
  238:                              "{!r}".format(__name__, attr))
       
    1:     def __dir__():
               public_symbols = globals().keys() | {'testing'}
               public_symbols -= {
                   "core", "matrixlib",
                   # These were moved in 1.25 and may be deprecated eventually:
                   "ModuleDeprecationWarning", "VisibleDeprecationWarning",
                   "ComplexWarning", "TooHardError", "AxisError"
               }
               return list(public_symbols)
       
           # Pytest testing
    1:     from numpy._pytesttester import PytestTester
    1:     test = PytestTester(__name__)
    1:     del PytestTester
       
    1:     def _sanity_check():
               """
               Quick sanity checks for common bugs caused by environment.
               There are some cases e.g. with wrong BLAS ABI that cause wrong
               results under specific runtime conditions that are not necessarily
               achieved during test suite runs, and it is useful to catch those early.
       
               See https://github.com/numpy/numpy/issues/8577 and other
               similar bug reports.
       
               """
    1:         try:
    1:             x = ones(2, dtype=float32)
    1:             if not abs(x.dot(x) - float32(2.0)) < 1e-5:
                       raise AssertionError()
               except AssertionError:
                   msg = ("The current Numpy installation ({!r}) fails to "
                          "pass simple sanity checks. This can be caused for example "
                          "by incorrect BLAS library being linked in, or by mixing "
                          "package managers (pip, conda, apt, ...). Search closed "
                          "numpy issues for similar problems.")
                   raise RuntimeError(msg.format(__file__)) from None
       
    1:     _sanity_check()
    1:     del _sanity_check
       
    1:     def _mac_os_check():
               """
               Quick Sanity check for Mac OS look for accelerate build bugs.
               Testing numpy polyfit calls init_dgelsd(LAPACK)
               """
    1:         try:
    1:             c = array([3., 2., 1.])
    1:             x = linspace(0, 2, 5)
    1:             y = polyval(c, x)
    1:             _ = polyfit(x, y, 2, cov=True)
               except ValueError:
                   pass
       
    1:     if sys.platform == "darwin":
    1:         from . import exceptions
    2:         with warnings.catch_warnings(record=True) as w:
    1:             _mac_os_check()
                   # Throw runtime error, if the test failed Check for warning and error_message
    1:             if len(w) > 0:
                       for _wn in w:
                           if _wn.category is exceptions.RankWarning:
                               # Ignore other warnings, they may not be relevant (see gh-25433).
                               error_message = f"{_wn.category.__name__}: {str(_wn.message)}"
                               msg = (
                                   "Polyfit sanity test emitted a warning, most likely due "
                                   "to using a buggy Accelerate backend."
                                   "\nIf you compiled yourself, more information is available at:"
                                   "\nhttps://numpy.org/devdocs/building/index.html"
                                   "\nOtherwise report this to the vendor "
                                   "that provided NumPy.\n\n{}\n".format(error_message))
                               raise RuntimeError(msg)
                       del _wn
    1:             del w
    1:     del _mac_os_check
       
           # We usually use madvise hugepages support, but on some old kernels it
           # is slow and thus better avoided.
           # Specifically kernel version 4.6 had a bug fix which probably fixed this:
           # https://github.com/torvalds/linux/commit/7cf91a98e607c2f935dbcc177d70011e95b8faff
    1:     import os
    1:     use_hugepage = os.environ.get("NUMPY_MADVISE_HUGEPAGE", None)
    1:     if sys.platform == "linux" and use_hugepage is None:
               # If there is an issue with parsing the kernel version,
               # set use_hugepages to 0. Usage of LooseVersion will handle
               # the kernel version parsing better, but avoided since it
               # will increase the import time. See: #16679 for related discussion.
               try:
                   use_hugepage = 1
                   kernel_version = os.uname().release.split(".")[:2]
                   kernel_version = tuple(int(v) for v in kernel_version)
                   if kernel_version < (4, 6):
                       use_hugepage = 0
               except ValueError:
                   use_hugepages = 0
    1:     elif use_hugepage is None:
               # This is not Linux, so it should not matter, just enable anyway
    1:         use_hugepage = 1
           else:
               use_hugepage = int(use_hugepage)
       
           # Note that this will currently only make a difference on Linux
    1:     core.multiarray._set_madvise_hugepage(use_hugepage)
    1:     del use_hugepage
       
           # Give a warning if NumPy is reloaded or imported on a sub-interpreter
           # We do this from python, since the C-module may not be reloaded and
           # it is tidier organized.
    1:     core.multiarray._multiarray_umath._reload_guard()
       
           # default to "weak" promotion for "NumPy 2".
    2:     core._set_promotion_state(
    2:         os.environ.get("NPY_PROMOTION_STATE",
    1:                        "weak" if _using_numpy2_behavior() else "legacy"))
       
           # Tell PyInstaller where to find hook-numpy.py
    1:     def _pyinstaller_hooks_dir():
               from pathlib import Path
               return [str(Path(__file__).with_name("_pyinstaller").resolve())]
       
           # Remove symbols imported for internal use
    1:     del os
       
       
       # Remove symbols imported for internal use
    1: del sys, warnings
