    1: from contextlib import suppress
    1: from io import TextIOWrapper
       
    1: from . import abc
       
       
    2: class SpecLoaderAdapter:
    1:     """
           Adapt a package spec to adapt the underlying loader.
           """
       
    1:     def __init__(self, spec, adapter=lambda spec: spec.loader):
    2:         self.spec = spec
    2:         self.loader = adapter(spec)
       
    1:     def __getattr__(self, name):
    2:         return getattr(self.spec, name)
       
       
    2: class TraversableResourcesLoader:
    1:     """
           Adapt a loader to provide TraversableResources.
           """
       
    1:     def __init__(self, spec):
    2:         self.spec = spec
       
    1:     def get_resource_reader(self, name):
    1:         return CompatibilityFiles(self.spec)._native()
       
       
    1: def _io_wrapper(file, mode='r', *args, **kwargs):
           if mode == 'r':
               return TextIOWrapper(file, *args, **kwargs)
           elif mode == 'rb':
               return file
           raise ValueError(
               "Invalid mode value '{}', only 'r' and 'rb' are supported".format(mode)
           )
       
       
    2: class CompatibilityFiles:
    1:     """
           Adapter for an existing or non-existent resource reader
           to provide a compatibility .files().
           """
       
    2:     class SpecPath(abc.Traversable):
    1:         """
               Path tied to a module spec.
               Can be read and exposes the resource reader children.
               """
       
    1:         def __init__(self, spec, reader):
                   self._spec = spec
                   self._reader = reader
       
    1:         def iterdir(self):
                   if not self._reader:
                       return iter(())
                   return iter(
                       CompatibilityFiles.ChildPath(self._reader, path)
                       for path in self._reader.contents()
                   )
       
    1:         def is_file(self):
                   return False
       
    1:         is_dir = is_file
       
    1:         def joinpath(self, other):
                   if not self._reader:
                       return CompatibilityFiles.OrphanPath(other)
                   return CompatibilityFiles.ChildPath(self._reader, other)
       
    2:         @property
    2:         def name(self):
                   return self._spec.name
       
    1:         def open(self, mode='r', *args, **kwargs):
                   return _io_wrapper(self._reader.open_resource(None), mode, *args, **kwargs)
       
    2:     class ChildPath(abc.Traversable):
    1:         """
               Path tied to a resource reader child.
               Can be read but doesn't expose any meaningful children.
               """
       
    1:         def __init__(self, reader, name):
                   self._reader = reader
                   self._name = name
       
    1:         def iterdir(self):
                   return iter(())
       
    1:         def is_file(self):
                   return self._reader.is_resource(self.name)
       
    1:         def is_dir(self):
                   return not self.is_file()
       
    1:         def joinpath(self, other):
                   return CompatibilityFiles.OrphanPath(self.name, other)
       
    2:         @property
    2:         def name(self):
                   return self._name
       
    1:         def open(self, mode='r', *args, **kwargs):
                   return _io_wrapper(
                       self._reader.open_resource(self.name), mode, *args, **kwargs
                   )
       
    2:     class OrphanPath(abc.Traversable):
    1:         """
               Orphan path, not tied to a module spec or resource reader.
               Can't be read and doesn't expose any meaningful children.
               """
       
    1:         def __init__(self, *path_parts):
                   if len(path_parts) < 1:
                       raise ValueError('Need at least one path part to construct a path')
                   self._path = path_parts
       
    1:         def iterdir(self):
                   return iter(())
       
    1:         def is_file(self):
                   return False
       
    1:         is_dir = is_file
       
    1:         def joinpath(self, other):
                   return CompatibilityFiles.OrphanPath(*self._path, other)
       
    2:         @property
    2:         def name(self):
                   return self._path[-1]
       
    1:         def open(self, mode='r', *args, **kwargs):
                   raise FileNotFoundError("Can't open orphan path")
       
    1:     def __init__(self, spec):
    1:         self.spec = spec
       
    2:     @property
    2:     def _reader(self):
    2:         with suppress(AttributeError):
    1:             return self.spec.loader.get_resource_reader(self.spec.name)
       
    1:     def _native(self):
               """
               Return the native reader if it supports files().
               """
    1:         reader = self._reader
    1:         return reader if hasattr(reader, 'files') else self
       
    1:     def __getattr__(self, attr):
               return getattr(self._reader, attr)
       
    1:     def files(self):
               return CompatibilityFiles.SpecPath(self.spec, self._reader)
       
       
    1: def wrap_spec(package):
           """
           Construct a package spec with traversable compatibility
           on the spec/loader/reader.
           """
    2:     return SpecLoaderAdapter(package.__spec__, TraversableResourcesLoader)
