    1: """Filename globbing utility."""
       
    1: import contextlib
    1: import os
    1: import re
    1: import fnmatch
    1: import itertools
    1: import stat
    1: import sys
       
    1: __all__ = ["glob", "iglob", "escape"]
       
    2: def glob(pathname, *, root_dir=None, dir_fd=None, recursive=False,
    1:         include_hidden=False):
           """Return a list of paths matching a pathname pattern.
       
           The pattern may contain simple shell-style wildcards a la
           fnmatch. Unlike fnmatch, filenames starting with a
           dot are special cases that are not matched by '*' and '?'
           patterns by default.
       
           If `include_hidden` is true, the patterns '*', '?', '**'  will match hidden
           directories.
       
           If `recursive` is true, the pattern '**' will match any files and
           zero or more directories and subdirectories.
           """
    4:     return list(iglob(pathname, root_dir=root_dir, dir_fd=dir_fd, recursive=recursive,
    2:                       include_hidden=include_hidden))
       
    2: def iglob(pathname, *, root_dir=None, dir_fd=None, recursive=False,
    1:           include_hidden=False):
           """Return an iterator which yields the paths matching a pathname pattern.
       
           The pattern may contain simple shell-style wildcards a la
           fnmatch. However, unlike fnmatch, filenames starting with a
           dot are special cases that are not matched by '*' and '?'
           patterns.
       
           If recursive is true, the pattern '**' will match any files and
           zero or more directories and subdirectories.
           """
    2:     sys.audit("glob.glob", pathname, recursive)
    2:     sys.audit("glob.glob/2", pathname, recursive, root_dir, dir_fd)
    2:     if root_dir is not None:
               root_dir = os.fspath(root_dir)
           else:
    2:         root_dir = pathname[:0]
    4:     it = _iglob(pathname, root_dir, dir_fd, recursive, False,
    2:                 include_hidden=include_hidden)
    2:     if not pathname or recursive and _isrecursive(pathname[:2]):
               try:
                   s = next(it)  # skip empty string
                   if s:
                       it = itertools.chain((s,), it)
               except StopIteration:
                   pass
    2:     return it
       
    1: def _iglob(pathname, root_dir, dir_fd, recursive, dironly,
    1:            include_hidden=False):
    5:     dirname, basename = os.path.split(pathname)
    5:     if not has_magic(pathname):
               assert not dironly
               if basename:
                   if _lexists(_join(root_dir, pathname), dir_fd):
                       yield pathname
               else:
                   # Patterns ending with a slash should match only directories
                   if _isdir(_join(root_dir, dirname), dir_fd):
                       yield pathname
               return
    5:     if not dirname:
               if recursive and _isrecursive(basename):
                   yield from _glob2(root_dir, basename, dir_fd, dironly,
                                    include_hidden=include_hidden)
               else:
                   yield from _glob1(root_dir, basename, dir_fd, dironly,
                                     include_hidden=include_hidden)
               return
           # `os.path.split()` returns the argument itself as a dirname if it is a
           # drive or UNC path.  Prevent an infinite recursion if a drive or UNC path
           # contains magic characters (i.e. r'\\?\C:').
    5:     if dirname != pathname and has_magic(dirname):
    6:         dirs = _iglob(dirname, root_dir, dir_fd, recursive, True,
    3:                       include_hidden=include_hidden)
           else:
    2:         dirs = [dirname]
    5:     if has_magic(basename):
    3:         if recursive and _isrecursive(basename):
                   glob_in_dir = _glob2
               else:
    3:             glob_in_dir = _glob1
           else:
    2:         glob_in_dir = _glob0
   24:     for dirname in dirs:
   68:         for name in glob_in_dir(_join(root_dir, dirname), basename, dir_fd, dironly,
   19:                                include_hidden=include_hidden):
   30:             yield os.path.join(dirname, name)
       
       # These 2 helper functions non-recursively glob inside a literal directory.
       # They return a list of basenames.  _glob1 accepts a pattern while _glob0
       # takes a literal basename (so it only has to check for its existence).
       
    1: def _glob1(dirname, pattern, dir_fd, dironly, include_hidden=False):
    6:     names = _listdir(dirname, dir_fd, dironly)
    6:     if include_hidden or not _ishidden(pattern):
   29:         names = (x for x in names if include_hidden or not _ishidden(x))
    6:     return fnmatch.filter(names, pattern)
       
    1: def _glob0(dirname, basename, dir_fd, dironly, include_hidden=False):
   13:     if basename:
               if _lexists(_join(dirname, basename), dir_fd):
                   return [basename]
           else:
               # `os.path.split()` returns an empty basename for paths ending with a
               # directory separator.  'q*x/' should match only directories.
   13:         if _isdir(dirname, dir_fd):
   13:             return [basename]
           return []
       
       # Following functions are not public but can be used by third-party code.
       
    1: def glob0(dirname, pattern):
           return _glob0(dirname, pattern, None, False)
       
    1: def glob1(dirname, pattern):
           return _glob1(dirname, pattern, None, False)
       
       # This helper function recursively yields relative pathnames inside a literal
       # directory.
       
    1: def _glob2(dirname, pattern, dir_fd, dironly, include_hidden=False):
           assert _isrecursive(pattern)
           yield pattern[:0]
           yield from _rlistdir(dirname, dir_fd, dironly,
                                include_hidden=include_hidden)
       
       # If dironly is false, yields all file names inside a directory.
       # If dironly is true, yields only directory names.
    1: def _iterdir(dirname, dir_fd, dironly):
    6:     try:
    6:         fd = None
    6:         fsencode = None
    6:         if dir_fd is not None:
                   if dirname:
                       fd = arg = os.open(dirname, _dir_open_flags, dir_fd=dir_fd)
                   else:
                       arg = dir_fd
                   if isinstance(dirname, bytes):
                       fsencode = os.fsencode
    6:         elif dirname:
    6:             arg = dirname
               elif isinstance(dirname, bytes):
                   arg = bytes(os.curdir, 'ASCII')
               else:
                   arg = os.curdir
    6:         try:
   12:             with os.scandir(arg) as it:
   43:                 for entry in it:
   37:                     try:
   37:                         if not dironly or entry.is_dir():
   17:                             if fsencode is not None:
                                       yield fsencode(entry.name)
                                   else:
   17:                                 yield entry.name
                           except OSError:
                               pass
               finally:
    6:             if fd is not None:
                       os.close(fd)
           except OSError:
               return
       
    1: def _listdir(dirname, dir_fd, dironly):
   12:     with contextlib.closing(_iterdir(dirname, dir_fd, dironly)) as it:
    6:         return list(it)
       
       # Recursively yields relative pathnames inside a literal directory.
    1: def _rlistdir(dirname, dir_fd, dironly, include_hidden=False):
           names = _listdir(dirname, dir_fd, dironly)
           for x in names:
               if include_hidden or not _ishidden(x):
                   yield x
                   path = _join(dirname, x) if dirname else x
                   for y in _rlistdir(path, dir_fd, dironly,
                                      include_hidden=include_hidden):
                       yield _join(x, y)
       
       
    1: def _lexists(pathname, dir_fd):
           # Same as os.path.lexists(), but with dir_fd
           if dir_fd is None:
               return os.path.lexists(pathname)
           try:
               os.lstat(pathname, dir_fd=dir_fd)
           except (OSError, ValueError):
               return False
           else:
               return True
       
    1: def _isdir(pathname, dir_fd):
           # Same as os.path.isdir(), but with dir_fd
   13:     if dir_fd is None:
   13:         return os.path.isdir(pathname)
           try:
               st = os.stat(pathname, dir_fd=dir_fd)
           except (OSError, ValueError):
               return False
           else:
               return stat.S_ISDIR(st.st_mode)
       
    1: def _join(dirname, basename):
           # It is common if dirname or basename is empty
   19:     if not dirname or not basename:
   19:         return dirname or basename
           return os.path.join(dirname, basename)
       
    1: magic_check = re.compile('([*?[])')
    1: magic_check_bytes = re.compile(b'([*?[])')
       
    1: def has_magic(s):
   15:     if isinstance(s, bytes):
               match = magic_check_bytes.search(s)
           else:
   15:         match = magic_check.search(s)
   15:     return match is not None
       
    1: def _ishidden(path):
   23:     return path[0] in ('.', b'.'[0])
       
    1: def _isrecursive(pattern):
           if isinstance(pattern, bytes):
               return pattern == b'**'
           else:
               return pattern == '**'
       
    1: def escape(pathname):
           """Escape all special characters.
           """
           # Escaping is done by wrapping any of "*?[" between square brackets.
           # Metacharacters do not work in the drive part and shouldn't be escaped.
           drive, pathname = os.path.splitdrive(pathname)
           if isinstance(pathname, bytes):
               pathname = magic_check_bytes.sub(br'[\1]', pathname)
           else:
               pathname = magic_check.sub(r'[\1]', pathname)
           return drive + pathname
       
       
    1: _dir_open_flags = os.O_RDONLY | getattr(os, 'O_DIRECTORY', 0)
