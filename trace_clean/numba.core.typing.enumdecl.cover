    1: """
       Typing for enums.
       """
    1: import operator
    1: from numba.core import types
    1: from numba.core.typing.templates import (AbstractTemplate, AttributeTemplate,
                                                signature, Registry)
       
    1: registry = Registry()
    1: infer = registry.register
    1: infer_global = registry.register_global
    1: infer_getattr = registry.register_attr
       
       
    3: @infer_getattr
    2: class EnumAttribute(AttributeTemplate):
    1:     key = types.EnumMember
       
    1:     def resolve_value(self, ty):
               return ty.dtype
       
       
    3: @infer_getattr
    2: class EnumClassAttribute(AttributeTemplate):
    1:     key = types.EnumClass
       
    1:     def generic_resolve(self, ty, attr):
               """
               Resolve attributes of an enum class as enum members.
               """
               if attr in ty.instance_class.__members__:
                   return ty.member_type
       
       
    3: @infer
    2: class EnumClassStaticGetItem(AbstractTemplate):
    1:     key = "static_getitem"
       
    1:     def generic(self, args, kws):
   32:         enum, idx = args
   32:         if (isinstance(enum, types.EnumClass)
                       and idx in enum.instance_class.__members__):
                   return signature(enum.member_type, *args)
       
       
    2: class EnumCompare(AbstractTemplate):
       
    1:     def generic(self, args, kws):
   62:         [lhs, rhs] = args
   62:         if (isinstance(lhs, types.EnumMember)
                       and isinstance(rhs, types.EnumMember)
                       and lhs == rhs):
                   return signature(types.boolean, lhs, rhs)
       
       
    3: @infer_global(operator.eq)
    2: class EnumEq(EnumCompare):
    1:     pass
       
       
       
    3: @infer_global(operator.ne)
    2: class EnumNe(EnumCompare):
    1:     pass
