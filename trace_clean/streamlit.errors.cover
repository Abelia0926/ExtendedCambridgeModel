       # Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
    1: from __future__ import annotations
       
    1: from streamlit import util
       
       
    2: class Error(Exception):
    1:     """The base class for all exceptions thrown by Streamlit.
       
           Should be used for exceptions raised due to user errors (typically via
           StreamlitAPIException) as well as exceptions raised by Streamlit's internal
           code.
           """
       
    1:     pass
       
       
    2: class CustomComponentError(Error):
    1:     """Exceptions thrown in the custom components code path."""
       
    1:     pass
       
       
    2: class DeprecationError(Error):
    1:     pass
       
       
    2: class FragmentStorageKeyError(Error, KeyError):
    1:     """A KeyError raised when a KeyError is encountered during a FragmentStorage
           operation."""
       
    1:     pass
       
       
    2: class FragmentHandledException(Exception):
    1:     """An exception that is raised by the fragment
           when it has handled the exception itself.
           """
       
    1:     pass
       
       
    2: class NoStaticFiles(Error):
    1:     pass
       
       
    2: class NoSessionContext(Error):
    1:     pass
       
       
    2: class MarkdownFormattedException(Error):
    1:     """Exceptions with Markdown in their description.
       
           Instances of this class can use markdown in their messages, which will get
           nicely formatted on the frontend.
           """
       
    1:     pass
       
       
    2: class UncaughtAppException(Error):
    1:     """Catchall exception type for uncaught exceptions that occur during script execution."""
       
    1:     def __init__(self, exc):
               self.exc = exc
       
       
    2: class StreamlitAPIException(MarkdownFormattedException):
    1:     """Base class for Streamlit API exceptions.
       
           An API exception should be thrown when user code interacts with the
           Streamlit API incorrectly. (That is, when we throw an exception as a
           result of a user's malformed `st.foo` call, it should be a
           StreamlitAPIException or subclass.)
       
           When displaying these exceptions on the frontend, we strip Streamlit
           entries from the stack trace so that the user doesn't see a bunch of
           noise related to Streamlit internals.
       
           """
       
    1:     def __repr__(self) -> str:
               return util.repr_(self)
       
       
    2: class DuplicateWidgetID(StreamlitAPIException):
    1:     pass
       
       
    2: class UnserializableSessionStateError(StreamlitAPIException):
    1:     pass
       
       
    2: class StreamlitAPIWarning(StreamlitAPIException, Warning):
    1:     """Used to display a warning.
       
           Note that this should not be "raised", but passed to st.exception
           instead.
           """
       
    1:     def __init__(self, *args):
               super().__init__(*args)
               import inspect
               import traceback
       
               f = inspect.currentframe()
               self.tacked_on_stack = traceback.extract_stack(f)
       
    1:     def __repr__(self) -> str:
               return util.repr_(self)
       
       
    2: class StreamlitModuleNotFoundError(StreamlitAPIWarning):
    1:     """Print a pretty message when a Streamlit command requires a dependency
           that is not one of our core dependencies."""
       
    1:     def __init__(self, module_name, *args):
               message = (
                   f'This Streamlit command requires module "{module_name}" to be '
                   "installed."
               )
               super().__init__(message, *args)
