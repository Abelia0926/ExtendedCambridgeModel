    1: """
       Python 3.X compatibility tools.
       
       While this file was originally intended for Python 2 -> 3 transition,
       it is now used to create a compatibility layer between different
       minor versions of Python 3.
       
       While the active version of numpy may not support a given version of python, we
       allow downstream libraries to continue to use these shims for forward
       compatibility with numpy while they transition their code to newer versions of
       Python.
       """
    1: __all__ = ['bytes', 'asbytes', 'isfileobj', 'getexception', 'strchar',
                  'unicode', 'asunicode', 'asbytes_nested', 'asunicode_nested',
                  'asstr', 'open_latin1', 'long', 'basestring', 'sixu',
                  'integer_types', 'is_pathlib_path', 'npy_load_module', 'Path',
                  'pickle', 'contextlib_nullcontext', 'os_fspath', 'os_PathLike']
       
    1: import sys
    1: import os
    1: from pathlib import Path
    1: import io
    1: try:
    1:     import pickle5 as pickle
    1: except ImportError:
    1:     import pickle
       
    1: long = int
    1: integer_types = (int,)
    1: basestring = str
    1: unicode = str
    1: bytes = bytes
       
    1: def asunicode(s):
           if isinstance(s, bytes):
               return s.decode('latin1')
           return str(s)
       
    1: def asbytes(s):
           if isinstance(s, bytes):
               return s
           return str(s).encode('latin1')
       
    1: def asstr(s):
           if isinstance(s, bytes):
               return s.decode('latin1')
           return str(s)
       
    1: def isfileobj(f):
           if not isinstance(f, (io.FileIO, io.BufferedReader, io.BufferedWriter)):
               return False
           try:
               # BufferedReader/Writer may raise OSError when
               # fetching `fileno()` (e.g. when wrapping BytesIO).
               f.fileno()
               return True
           except OSError:
               return False
       
    1: def open_latin1(filename, mode='r'):
           return open(filename, mode=mode, encoding='iso-8859-1')
       
    1: def sixu(s):
           return s
       
    1: strchar = 'U'
       
    1: def getexception():
           return sys.exc_info()[1]
       
    1: def asbytes_nested(x):
           if hasattr(x, '__iter__') and not isinstance(x, (bytes, unicode)):
               return [asbytes_nested(y) for y in x]
           else:
               return asbytes(x)
       
    1: def asunicode_nested(x):
           if hasattr(x, '__iter__') and not isinstance(x, (bytes, unicode)):
               return [asunicode_nested(y) for y in x]
           else:
               return asunicode(x)
       
    1: def is_pathlib_path(obj):
           """
           Check whether obj is a `pathlib.Path` object.
       
           Prefer using ``isinstance(obj, os.PathLike)`` instead of this function.
           """
           return isinstance(obj, Path)
       
       # from Python 3.7
    2: class contextlib_nullcontext:
    1:     """Context manager that does no additional processing.
       
           Used as a stand-in for a normal context manager, when a particular
           block of code is only sometimes used with a normal context manager:
       
           cm = optional_cm if condition else nullcontext()
           with cm:
               # Perform operation, using optional_cm if condition is True
       
           .. note::
               Prefer using `contextlib.nullcontext` instead of this context manager.
           """
       
    1:     def __init__(self, enter_result=None):
               self.enter_result = enter_result
       
    1:     def __enter__(self):
               return self.enter_result
       
    1:     def __exit__(self, *excinfo):
               pass
       
       
    1: def npy_load_module(name, fn, info=None):
           """
           Load a module. Uses ``load_module`` which will be deprecated in python
           3.12. An alternative that uses ``exec_module`` is in
           numpy.distutils.misc_util.exec_mod_from_location
       
           .. versionadded:: 1.11.2
       
           Parameters
           ----------
           name : str
               Full module name.
           fn : str
               Path to module file.
           info : tuple, optional
               Only here for backward compatibility with Python 2.*.
       
           Returns
           -------
           mod : module
       
           """
           # Explicitly lazy import this to avoid paying the cost
           # of importing importlib at startup
           from importlib.machinery import SourceFileLoader
           return SourceFileLoader(name, fn).load_module()
       
       
    1: os_fspath = os.fspath
    1: os_PathLike = os.PathLike
