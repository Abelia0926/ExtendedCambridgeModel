    1: from numba.core import types, typing
       
       
    1: def is_signature(sig):
           """
           Return whether *sig* is a potentially valid signature
           specification (for user-facing APIs).
           """
   42:     return isinstance(sig, (str, tuple, typing.Signature))
       
       
    1: def _parse_signature_string(signature_str):
           """
           Parameters
           ----------
           signature_str : str
           """
           # Just eval signature_str using the types submodules as globals
    3:     return eval(signature_str, {}, types.__dict__)
       
       
    1: def normalize_signature(sig):
           """
           From *sig* (a signature specification), return a ``(args, return_type)``
           tuple, where ``args`` itself is a tuple of types, and ``return_type``
           can be None if not specified.
           """
  112:     if isinstance(sig, str):
    3:         parsed = _parse_signature_string(sig)
           else:
  109:         parsed = sig
  112:     if isinstance(parsed, tuple):
  109:         args, return_type = parsed, None
    3:     elif isinstance(parsed, typing.Signature):
    3:         args, return_type = parsed.args, parsed.return_type
           else:
               raise TypeError("invalid signature: %r (type: %r) evaluates to %r "
                               "instead of tuple or Signature" % (
                                   sig, sig.__class__.__name__,
                                   parsed.__class__.__name__
                               ))
       
  112:     def check_type(ty):
  241:         if not isinstance(ty, types.Type):
                   raise TypeError("invalid type in signature: expected a type "
                                   "instance, got %r" % (ty,))
       
  112:     if return_type is not None:
    3:         check_type(return_type)
  350:     for ty in args:
  238:         check_type(ty)
       
  112:     return args, return_type
