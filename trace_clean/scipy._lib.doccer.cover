    1: ''' Utilities to allow inserting docstring fragments for common
       parameters into function and method docstrings'''
       
    1: import sys
       
    1: __all__ = [
           'docformat', 'inherit_docstring_from', 'indentcount_lines',
           'filldoc', 'unindent_dict', 'unindent_string', 'extend_notes_in_docstring',
           'replace_notes_in_docstring', 'doc_replace'
       ]
       
       
    1: def docformat(docstring, docdict=None):
           ''' Fill a function docstring from variables in dictionary
       
           Adapt the indent of the inserted docs
       
           Parameters
           ----------
           docstring : string
               docstring from function, possibly with dict formatting strings
           docdict : dict, optional
               dictionary with keys that match the dict formatting strings
               and values that are docstring fragments to be inserted. The
               indentation of the inserted docstrings is set to match the
               minimum indentation of the ``docstring`` by adding this
               indentation to all lines of the inserted string, except the
               first.
       
           Returns
           -------
           outstring : string
               string with requested ``docdict`` strings inserted
       
           Examples
           --------
           >>> docformat(' Test string with %(value)s', {'value':'inserted value'})
           ' Test string with inserted value'
           >>> docstring = 'First line\\n    Second line\\n    %(value)s'
           >>> inserted_string = "indented\\nstring"
           >>> docdict = {'value': inserted_string}
           >>> docformat(docstring, docdict)
           'First line\\n    Second line\\n    indented\\n    string'
           '''
  415:     if not docstring:
    1:         return docstring
  414:     if docdict is None:
    5:         docdict = {}
  414:     if not docdict:
    5:         return docstring
  409:     lines = docstring.expandtabs().splitlines()
           # Find the minimum indent of the main docstring, after first line
  409:     if len(lines) < 2:
               icount = 0
           else:
  409:         icount = indentcount_lines(lines[1:])
  409:     indent = ' ' * icount
           # Insert this indent to dictionary docstrings
  409:     indented = {}
 9204:     for name, dstr in docdict.items():
 8795:         lines = dstr.expandtabs().splitlines()
 8795:         try:
 8795:             newlines = [lines[0]]
81146:             for line in lines[1:]:
72619:                 newlines.append(indent+line)
 8527:             indented[name] = '\n'.join(newlines)
  268:         except IndexError:
  268:             indented[name] = dstr
  409:     return docstring % indented
       
       
    1: def inherit_docstring_from(cls):
           """
           This decorator modifies the decorated function's docstring by
           replacing occurrences of '%(super)s' with the docstring of the
           method of the same name from the class `cls`.
       
           If the decorated method has no docstring, it is simply given the
           docstring of `cls`s method.
       
           Parameters
           ----------
           cls : Python class or instance
               A class with a method with the same name as the decorated method.
               The docstring of the method in this class replaces '%(super)s' in the
               docstring of the decorated method.
       
           Returns
           -------
           f : function
               The decorator function that modifies the __doc__ attribute
               of its argument.
       
           Examples
           --------
           In the following, the docstring for Bar.func created using the
           docstring of `Foo.func`.
       
           >>> class Foo:
           ...     def func(self):
           ...         '''Do something useful.'''
           ...         return
           ...
           >>> class Bar(Foo):
           ...     @inherit_docstring_from(Foo)
           ...     def func(self):
           ...         '''%(super)s
           ...         Do it fast.
           ...         '''
           ...         return
           ...
           >>> b = Bar()
           >>> b.func.__doc__
           'Do something useful.\n        Do it fast.\n        '
       
           """
   15:     def _doc(func):
   15:         cls_docstring = getattr(cls, func.__name__).__doc__
   15:         func_docstring = func.__doc__
   15:         if func_docstring is None:
   15:             func.__doc__ = cls_docstring
               else:
                   new_docstring = func_docstring % dict(super=cls_docstring)
                   func.__doc__ = new_docstring
   15:         return func
   15:     return _doc
       
       
    1: def extend_notes_in_docstring(cls, notes):
           """
           This decorator replaces the decorated function's docstring
           with the docstring from corresponding method in `cls`.
           It extends the 'Notes' section of that docstring to include
           the given `notes`.
           """
   12:     def _doc(func):
   12:         cls_docstring = getattr(cls, func.__name__).__doc__
               # If python is called with -OO option,
               # there is no docstring
   12:         if cls_docstring is None:
                   return func
   12:         end_of_notes = cls_docstring.find('        References\n')
   12:         if end_of_notes == -1:
   12:             end_of_notes = cls_docstring.find('        Examples\n')
   12:             if end_of_notes == -1:
                       end_of_notes = len(cls_docstring)
   24:         func.__doc__ = (cls_docstring[:end_of_notes] + notes +
   12:                         cls_docstring[end_of_notes:])
   12:         return func
   12:     return _doc
       
       
    1: def replace_notes_in_docstring(cls, notes):
           """
           This decorator replaces the decorated function's docstring
           with the docstring from corresponding method in `cls`.
           It replaces the 'Notes' section of that docstring with
           the given `notes`.
           """
    4:     def _doc(func):
    4:         cls_docstring = getattr(cls, func.__name__).__doc__
    4:         notes_header = '        Notes\n        -----\n'
               # If python is called with -OO option,
               # there is no docstring
    4:         if cls_docstring is None:
                   return func
    4:         start_of_notes = cls_docstring.find(notes_header)
    4:         end_of_notes = cls_docstring.find('        References\n')
    4:         if end_of_notes == -1:
    4:             end_of_notes = cls_docstring.find('        Examples\n')
    4:             if end_of_notes == -1:
                       end_of_notes = len(cls_docstring)
   12:         func.__doc__ = (cls_docstring[:start_of_notes + len(notes_header)] +
    4:                         notes +
    4:                         cls_docstring[end_of_notes:])
    4:         return func
    4:     return _doc
       
       
    1: def indentcount_lines(lines):
           ''' Minimum indent for all lines in line list
       
           >>> lines = [' one', '  two', '   three']
           >>> indentcount_lines(lines)
           1
           >>> lines = []
           >>> indentcount_lines(lines)
           0
           >>> lines = [' one']
           >>> indentcount_lines(lines)
           1
           >>> indentcount_lines(['    '])
           0
           '''
  423:     indentno = sys.maxsize
25933:     for line in lines:
25510:         stripped = line.lstrip()
25510:         if stripped:
19392:             indentno = min(indentno, len(line) - len(stripped))
  423:     if indentno == sys.maxsize:
               return 0
  423:     return indentno
       
       
    1: def filldoc(docdict, unindent_params=True):
           ''' Return docstring decorator using docdict variable dictionary
       
           Parameters
           ----------
           docdict : dictionary
               dictionary containing name, docstring fragment pairs
           unindent_params : {False, True}, boolean, optional
               If True, strip common indentation from all parameters in
               docdict
       
           Returns
           -------
           decfunc : function
               decorator that applies dictionary to input function docstring
       
           '''
    1:     if unindent_params:
    1:         docdict = unindent_dict(docdict)
       
    1:     def decorate(f):
   33:         f.__doc__ = docformat(f.__doc__, docdict)
   33:         return f
    1:     return decorate
       
       
    1: def unindent_dict(docdict):
           ''' Unindent all strings in a docdict '''
    1:     can_dict = {}
   15:     for name, dstr in docdict.items():
   14:         can_dict[name] = unindent_string(dstr)
    1:     return can_dict
       
       
    1: def unindent_string(docstring):
           ''' Set docstring to minimum indent for all lines, including first
       
           >>> unindent_string(' two')
           'two'
           >>> unindent_string('  two\\n   three')
           'two\\n three'
           '''
   14:     lines = docstring.expandtabs().splitlines()
   14:     icount = indentcount_lines(lines)
   14:     if icount == 0:
   14:         return docstring
           return '\n'.join([line[icount:] for line in lines])
       
       
    1: def doc_replace(obj, oldval, newval):
           """Decorator to take the docstring from obj, with oldval replaced by newval
       
           Equivalent to ``func.__doc__ = obj.__doc__.replace(oldval, newval)``
       
           Parameters
           ----------
           obj : object
               The object to take the docstring from.
           oldval : string
               The string to replace from the original docstring.
           newval : string
               The string to replace ``oldval`` with.
           """
           # __doc__ may be None for optimized Python (-OO)
           doc = (obj.__doc__ or '').replace(oldval, newval)
       
           def inner(func):
               func.__doc__ = doc
               return func
       
           return inner
