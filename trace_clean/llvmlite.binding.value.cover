    1: from ctypes import (POINTER, byref, cast, c_char_p, c_double, c_int, c_size_t,
                           c_uint, c_uint64, c_bool, c_void_p)
    1: import enum
       
    1: from llvmlite.binding import ffi
    1: from llvmlite.binding.common import _decode_string, _encode_string
    1: from llvmlite.binding.typeref import TypeRef
       
       
    2: class Linkage(enum.IntEnum):
           # The LLVMLinkage enum from llvm-c/Core.h
       
    1:     external = 0
    1:     available_externally = 1
    1:     linkonce_any = 2
    1:     linkonce_odr = 3
    1:     linkonce_odr_autohide = 4
    1:     weak_any = 5
    1:     weak_odr = 6
    1:     appending = 7
    1:     internal = 8
    1:     private = 9
    1:     dllimport = 10
    1:     dllexport = 11
    1:     external_weak = 12
    1:     ghost = 13
    1:     common = 14
    1:     linker_private = 15
    1:     linker_private_weak = 16
       
       
    2: class Visibility(enum.IntEnum):
           # The LLVMVisibility enum from llvm-c/Core.h
       
    1:     default = 0
    1:     hidden = 1
    1:     protected = 2
       
       
    2: class StorageClass(enum.IntEnum):
           # The LLVMDLLStorageClass enum from llvm-c/Core.h
       
    1:     default = 0
    1:     dllimport = 1
    1:     dllexport = 2
       
       
    2: class ValueKind(enum.IntEnum):
           # The LLVMValueKind enum from llvm-c/Core.h
       
    1:     argument = 0
    1:     basic_block = 1
    1:     memory_use = 2
    1:     memory_def = 3
    1:     memory_phi = 4
       
    1:     function = 5
    1:     global_alias = 6
    1:     global_ifunc = 7
    1:     global_variable = 8
    1:     block_address = 9
    1:     constant_expr = 10
    1:     constant_array = 11
    1:     constant_struct = 12
    1:     constant_vector = 13
       
    1:     undef_value = 14
    1:     constant_aggregate_zero = 15
    1:     constant_data_array = 16
    1:     constant_data_vector = 17
    1:     constant_int = 18
    1:     constant_fp = 19
    1:     constant_pointer_null = 20
    1:     constant_token_none = 21
       
    1:     metadata_as_value = 22
    1:     inline_asm = 23
       
    1:     instruction = 24
    1:     poison_value = 25
       
       
    2: class ValueRef(ffi.ObjectRef):
    1:     """A weak reference to a LLVM value.
           """
       
    1:     def __init__(self, ptr, kind, parents):
 2192:         self._kind = kind
 2192:         self._parents = parents
 2192:         ffi.ObjectRef.__init__(self, ptr)
       
    1:     def __str__(self):
               with ffi.OutputString() as outstr:
                   ffi.lib.LLVMPY_PrintValueToString(self, outstr)
                   return str(outstr)
       
    2:     @property
    2:     def module(self):
               """
               The module this function or global variable value was obtained from.
               """
               return self._parents.get('module')
       
    2:     @property
    2:     def function(self):
               """
               The function this argument or basic block value was obtained from.
               """
               return self._parents.get('function')
       
    2:     @property
    2:     def block(self):
               """
               The block this instruction value was obtained from.
               """
               return self._parents.get('block')
       
    2:     @property
    2:     def instruction(self):
               """
               The instruction this operand value was obtained from.
               """
               return self._parents.get('instruction')
       
    2:     @property
    2:     def is_global(self):
 1280:         return self._kind == 'global'
       
    2:     @property
    2:     def is_function(self):
  791:         return self._kind == 'function'
       
    2:     @property
    2:     def is_block(self):
               return self._kind == 'block'
       
    2:     @property
    2:     def is_argument(self):
               return self._kind == 'argument'
       
    2:     @property
    2:     def is_instruction(self):
               return self._kind == 'instruction'
       
    2:     @property
    2:     def is_operand(self):
               return self._kind == 'operand'
       
    2:     @property
    2:     def is_constant(self):
               return bool(ffi.lib.LLVMPY_IsConstant(self))
       
    2:     @property
    2:     def value_kind(self):
               return ValueKind(ffi.lib.LLVMPY_GetValueKind(self))
       
    2:     @property
    2:     def name(self):
 1566:         return _decode_string(ffi.lib.LLVMPY_GetValueName(self))
       
    2:     @name.setter
    2:     def name(self, val):
               ffi.lib.LLVMPY_SetValueName(self, _encode_string(val))
       
    2:     @property
    2:     def linkage(self):
   42:         return Linkage(ffi.lib.LLVMPY_GetLinkage(self))
       
    2:     @linkage.setter
    2:     def linkage(self, value):
   38:         if not isinstance(value, Linkage):
   38:             value = Linkage[value]
   38:         ffi.lib.LLVMPY_SetLinkage(self, value)
       
    2:     @property
    2:     def visibility(self):
               return Visibility(ffi.lib.LLVMPY_GetVisibility(self))
       
    2:     @visibility.setter
    2:     def visibility(self, value):
               if not isinstance(value, Visibility):
                   value = Visibility[value]
               ffi.lib.LLVMPY_SetVisibility(self, value)
       
    2:     @property
    2:     def storage_class(self):
               return StorageClass(ffi.lib.LLVMPY_GetDLLStorageClass(self))
       
    2:     @storage_class.setter
    2:     def storage_class(self, value):
               if not isinstance(value, StorageClass):
                   value = StorageClass[value]
               ffi.lib.LLVMPY_SetDLLStorageClass(self, value)
       
    1:     def add_function_attribute(self, attr):
               """Only works on function value
       
               Parameters
               -----------
               attr : str
                   attribute name
               """
               if not self.is_function:
                   raise ValueError('expected function value, got %s' % (self._kind,))
               attrname = str(attr)
               attrval = ffi.lib.LLVMPY_GetEnumAttributeKindForName(
                   _encode_string(attrname), len(attrname))
               if attrval == 0:
                   raise ValueError('no such attribute {!r}'.format(attrname))
               ffi.lib.LLVMPY_AddFunctionAttr(self, attrval)
       
    2:     @property
    2:     def type(self):
               """
               This value's LLVM type.
               """
               # XXX what does this return?
   62:         return TypeRef(ffi.lib.LLVMPY_TypeOf(self))
       
    2:     @property
    2:     def is_declaration(self):
               """
               Whether this value (presumably global) is defined in the current
               module.
               """
 1280:         if not (self.is_global or self.is_function):
                   raise ValueError('expected global or function value, got %s'
                                    % (self._kind,))
 1280:         return ffi.lib.LLVMPY_IsDeclaration(self)
       
    2:     @property
    2:     def attributes(self):
               """
               Return an iterator over this value's attributes.
               The iterator will yield a string for each attribute.
               """
               itr = iter(())
               if self.is_function:
                   it = ffi.lib.LLVMPY_FunctionAttributesIter(self)
                   itr = _AttributeListIterator(it)
               elif self.is_instruction:
                   if self.opcode == 'call':
                       it = ffi.lib.LLVMPY_CallInstAttributesIter(self)
                       itr = _AttributeListIterator(it)
                   elif self.opcode == 'invoke':
                       it = ffi.lib.LLVMPY_InvokeInstAttributesIter(self)
                       itr = _AttributeListIterator(it)
               elif self.is_global:
                   it = ffi.lib.LLVMPY_GlobalAttributesIter(self)
                   itr = _AttributeSetIterator(it)
               elif self.is_argument:
                   it = ffi.lib.LLVMPY_ArgumentAttributesIter(self)
                   itr = _AttributeSetIterator(it)
               return itr
       
    2:     @property
    2:     def blocks(self):
               """
               Return an iterator over this function's blocks.
               The iterator will yield a ValueRef for each block.
               """
               if not self.is_function:
                   raise ValueError('expected function value, got %s' % (self._kind,))
               it = ffi.lib.LLVMPY_FunctionBlocksIter(self)
               parents = self._parents.copy()
               parents.update(function=self)
               return _BlocksIterator(it, parents)
       
    2:     @property
    2:     def arguments(self):
               """
               Return an iterator over this function's arguments.
               The iterator will yield a ValueRef for each argument.
               """
               if not self.is_function:
                   raise ValueError('expected function value, got %s' % (self._kind,))
               it = ffi.lib.LLVMPY_FunctionArgumentsIter(self)
               parents = self._parents.copy()
               parents.update(function=self)
               return _ArgumentsIterator(it, parents)
       
    2:     @property
    2:     def instructions(self):
               """
               Return an iterator over this block's instructions.
               The iterator will yield a ValueRef for each instruction.
               """
               if not self.is_block:
                   raise ValueError('expected block value, got %s' % (self._kind,))
               it = ffi.lib.LLVMPY_BlockInstructionsIter(self)
               parents = self._parents.copy()
               parents.update(block=self)
               return _InstructionsIterator(it, parents)
       
    2:     @property
    2:     def operands(self):
               """
               Return an iterator over this instruction's operands.
               The iterator will yield a ValueRef for each operand.
               """
               if not self.is_instruction:
                   raise ValueError('expected instruction value, got %s'
                                    % (self._kind,))
               it = ffi.lib.LLVMPY_InstructionOperandsIter(self)
               parents = self._parents.copy()
               parents.update(instruction=self)
               return _OperandsIterator(it, parents)
       
    2:     @property
    2:     def opcode(self):
               if not self.is_instruction:
                   raise ValueError('expected instruction value, got %s'
                                    % (self._kind,))
               return ffi.ret_string(ffi.lib.LLVMPY_GetOpcodeName(self))
       
    2:     @property
    2:     def incoming_blocks(self):
               """
               Return an iterator over this phi instruction's incoming blocks.
               The iterator will yield a ValueRef for each block.
               """
               if not self.is_instruction or self.opcode != 'phi':
                   raise ValueError('expected phi instruction value, got %s'
                                    % (self._kind,))
               it = ffi.lib.LLVMPY_PhiIncomingBlocksIter(self)
               parents = self._parents.copy()
               parents.update(instruction=self)
               return _IncomingBlocksIterator(it, parents)
       
    1:     def get_constant_value(self, signed_int=False, round_fp=False):
               """
               Return the constant value, either as a literal (when supported)
               or as a string.
       
               Parameters
               -----------
               signed_int : bool
                   if True and the constant is an integer, returns a signed version
               round_fp : bool
                   if True and the constant is a floating point value, rounds the
                   result upon accuracy loss (e.g., when querying an fp128 value).
                   By default, raises an exception on accuracy loss
               """
               if not self.is_constant:
                   raise ValueError('expected constant value, got %s'
                                    % (self._kind,))
       
               if self.value_kind == ValueKind.constant_int:
                   # Python integers are also arbitrary-precision
                   little_endian = c_bool(False)
                   words = ffi.lib.LLVMPY_GetConstantIntNumWords(self)
                   ptr = ffi.lib.LLVMPY_GetConstantIntRawValue(
                       self, byref(little_endian))
                   asbytes = bytes(cast(ptr, POINTER(c_uint64 * words)).contents)
                   return int.from_bytes(
                       asbytes,
                       ('little' if little_endian.value else 'big'),
                       signed=signed_int,
                   )
               elif self.value_kind == ValueKind.constant_fp:
                   # Convert floating-point values to double-precision (Python float)
                   accuracy_loss = c_bool(False)
                   value = ffi.lib.LLVMPY_GetConstantFPValue(self,
                                                             byref(accuracy_loss))
                   if accuracy_loss.value and not round_fp:
                       raise ValueError(
                           'Accuracy loss encountered in conversion of constant '
                           f'value {str(self)}')
       
                   return value
       
               # Otherwise, return the IR string
               return str(self)
       
       
    2: class _ValueIterator(ffi.ObjectRef):
       
    1:     kind = None  # derived classes must specify the Value kind value
           # as class attribute
       
    1:     def __init__(self, ptr, parents):
               ffi.ObjectRef.__init__(self, ptr)
               # Keep parent objects (module, function, etc) alive
               self._parents = parents
               if self.kind is None:
                   raise NotImplementedError('%s must specify kind attribute'
                                             % (type(self).__name__,))
       
    1:     def __next__(self):
               vp = self._next()
               if vp:
                   return ValueRef(vp, self.kind, self._parents)
               else:
                   raise StopIteration
       
    1:     next = __next__
       
    1:     def __iter__(self):
               return self
       
       
    2: class _AttributeIterator(ffi.ObjectRef):
       
    1:     def __next__(self):
               vp = self._next()
               if vp:
                   return vp
               else:
                   raise StopIteration
       
    1:     next = __next__
       
    1:     def __iter__(self):
               return self
       
       
    2: class _AttributeListIterator(_AttributeIterator):
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeAttributeListIter(self)
       
    1:     def _next(self):
               return ffi.ret_bytes(ffi.lib.LLVMPY_AttributeListIterNext(self))
       
       
    2: class _AttributeSetIterator(_AttributeIterator):
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeAttributeSetIter(self)
       
    1:     def _next(self):
               return ffi.ret_bytes(ffi.lib.LLVMPY_AttributeSetIterNext(self))
       
       
    2: class _BlocksIterator(_ValueIterator):
       
    1:     kind = 'block'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeBlocksIter(self)
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_BlocksIterNext(self)
       
       
    2: class _ArgumentsIterator(_ValueIterator):
       
    1:     kind = 'argument'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeArgumentsIter(self)
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_ArgumentsIterNext(self)
       
       
    2: class _InstructionsIterator(_ValueIterator):
       
    1:     kind = 'instruction'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeInstructionsIter(self)
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_InstructionsIterNext(self)
       
       
    2: class _OperandsIterator(_ValueIterator):
       
    1:     kind = 'operand'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeOperandsIter(self)
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_OperandsIterNext(self)
       
       
    2: class _IncomingBlocksIterator(_ValueIterator):
       
    1:     kind = 'block'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeIncomingBlocksIter(self)
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_IncomingBlocksIterNext(self)
       
       
       # FFI
       
    1: ffi.lib.LLVMPY_PrintValueToString.argtypes = [
    1:     ffi.LLVMValueRef,
    1:     POINTER(c_char_p)
       ]
       
    1: ffi.lib.LLVMPY_GetGlobalParent.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetGlobalParent.restype = ffi.LLVMModuleRef
       
    1: ffi.lib.LLVMPY_GetValueName.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetValueName.restype = c_char_p
       
    1: ffi.lib.LLVMPY_SetValueName.argtypes = [ffi.LLVMValueRef, c_char_p]
       
    1: ffi.lib.LLVMPY_TypeOf.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_TypeOf.restype = ffi.LLVMTypeRef
       
    1: ffi.lib.LLVMPY_GetTypeName.argtypes = [ffi.LLVMTypeRef]
    1: ffi.lib.LLVMPY_GetTypeName.restype = c_void_p
       
    1: ffi.lib.LLVMPY_GetLinkage.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetLinkage.restype = c_int
       
    1: ffi.lib.LLVMPY_SetLinkage.argtypes = [ffi.LLVMValueRef, c_int]
       
    1: ffi.lib.LLVMPY_GetVisibility.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetVisibility.restype = c_int
       
    1: ffi.lib.LLVMPY_SetVisibility.argtypes = [ffi.LLVMValueRef, c_int]
       
    1: ffi.lib.LLVMPY_GetDLLStorageClass.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetDLLStorageClass.restype = c_int
       
    1: ffi.lib.LLVMPY_SetDLLStorageClass.argtypes = [ffi.LLVMValueRef, c_int]
       
    1: ffi.lib.LLVMPY_GetEnumAttributeKindForName.argtypes = [c_char_p, c_size_t]
    1: ffi.lib.LLVMPY_GetEnumAttributeKindForName.restype = c_uint
       
    1: ffi.lib.LLVMPY_AddFunctionAttr.argtypes = [ffi.LLVMValueRef, c_uint]
       
    1: ffi.lib.LLVMPY_IsDeclaration.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_IsDeclaration.restype = c_int
       
    1: ffi.lib.LLVMPY_FunctionAttributesIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_FunctionAttributesIter.restype = ffi.LLVMAttributeListIterator
       
    1: ffi.lib.LLVMPY_CallInstAttributesIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_CallInstAttributesIter.restype = ffi.LLVMAttributeListIterator
       
    1: ffi.lib.LLVMPY_InvokeInstAttributesIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_InvokeInstAttributesIter.restype = ffi.LLVMAttributeListIterator
       
    1: ffi.lib.LLVMPY_GlobalAttributesIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GlobalAttributesIter.restype = ffi.LLVMAttributeSetIterator
       
    1: ffi.lib.LLVMPY_ArgumentAttributesIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_ArgumentAttributesIter.restype = ffi.LLVMAttributeSetIterator
       
    1: ffi.lib.LLVMPY_FunctionBlocksIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_FunctionBlocksIter.restype = ffi.LLVMBlocksIterator
       
    1: ffi.lib.LLVMPY_FunctionArgumentsIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_FunctionArgumentsIter.restype = ffi.LLVMArgumentsIterator
       
    1: ffi.lib.LLVMPY_BlockInstructionsIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_BlockInstructionsIter.restype = ffi.LLVMInstructionsIterator
       
    1: ffi.lib.LLVMPY_InstructionOperandsIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_InstructionOperandsIter.restype = ffi.LLVMOperandsIterator
       
    1: ffi.lib.LLVMPY_PhiIncomingBlocksIter.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_PhiIncomingBlocksIter.restype = ffi.LLVMIncomingBlocksIterator
       
    1: ffi.lib.LLVMPY_DisposeAttributeListIter.argtypes = [
    1:     ffi.LLVMAttributeListIterator]
       
    1: ffi.lib.LLVMPY_DisposeAttributeSetIter.argtypes = [ffi.LLVMAttributeSetIterator]
       
    1: ffi.lib.LLVMPY_DisposeBlocksIter.argtypes = [ffi.LLVMBlocksIterator]
       
    1: ffi.lib.LLVMPY_DisposeInstructionsIter.argtypes = [ffi.LLVMInstructionsIterator]
       
    1: ffi.lib.LLVMPY_DisposeOperandsIter.argtypes = [ffi.LLVMOperandsIterator]
       
    1: ffi.lib.LLVMPY_DisposeIncomingBlocksIter.argtypes = [
    1:     ffi.LLVMIncomingBlocksIterator]
       
    1: ffi.lib.LLVMPY_AttributeListIterNext.argtypes = [ffi.LLVMAttributeListIterator]
    1: ffi.lib.LLVMPY_AttributeListIterNext.restype = c_void_p
       
    1: ffi.lib.LLVMPY_AttributeSetIterNext.argtypes = [ffi.LLVMAttributeSetIterator]
    1: ffi.lib.LLVMPY_AttributeSetIterNext.restype = c_void_p
       
    1: ffi.lib.LLVMPY_BlocksIterNext.argtypes = [ffi.LLVMBlocksIterator]
    1: ffi.lib.LLVMPY_BlocksIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_ArgumentsIterNext.argtypes = [ffi.LLVMArgumentsIterator]
    1: ffi.lib.LLVMPY_ArgumentsIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_InstructionsIterNext.argtypes = [ffi.LLVMInstructionsIterator]
    1: ffi.lib.LLVMPY_InstructionsIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_OperandsIterNext.argtypes = [ffi.LLVMOperandsIterator]
    1: ffi.lib.LLVMPY_OperandsIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_IncomingBlocksIterNext.argtypes = [
    1:     ffi.LLVMIncomingBlocksIterator]
    1: ffi.lib.LLVMPY_IncomingBlocksIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_GetOpcodeName.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetOpcodeName.restype = c_void_p
       
    1: ffi.lib.LLVMPY_IsConstant.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_IsConstant.restype = c_bool
       
    1: ffi.lib.LLVMPY_GetValueKind.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetValueKind.restype = c_int
       
    2: ffi.lib.LLVMPY_GetConstantIntRawValue.argtypes = [ffi.LLVMValueRef,
    1:                                                   POINTER(c_bool)]
    1: ffi.lib.LLVMPY_GetConstantIntRawValue.restype = POINTER(c_uint64)
       
    1: ffi.lib.LLVMPY_GetConstantIntNumWords.argtypes = [ffi.LLVMValueRef]
    1: ffi.lib.LLVMPY_GetConstantIntNumWords.restype = c_uint
       
    2: ffi.lib.LLVMPY_GetConstantFPValue.argtypes = [ffi.LLVMValueRef,
    1:                                               POINTER(c_bool)]
    1: ffi.lib.LLVMPY_GetConstantFPValue.restype = c_double
