    1: """
       This module contains utils for manipulating target configurations such as
       compiler flags.
       """
    1: import re
    1: import zlib
    1: import base64
       
    1: from types import MappingProxyType
    1: from numba.core import utils
       
       
    2: class Option:
    1:     """An option to be used in ``TargetConfig``.
           """
    1:     __slots__ = "_type", "_default", "_doc"
       
    1:     def __init__(self, type, *, default, doc):
               """
               Parameters
               ----------
               type :
                   Type of the option value. It can be a callable.
                   The setter always calls ``self._type(value)``.
               default :
                   The default value for the option.
               doc : str
                   Docstring for the option.
               """
   23:         self._type = type
   23:         self._default = default
   23:         self._doc = doc
       
    2:     @property
    2:     def type(self):
  225:         return self._type
       
    2:     @property
    2:     def default(self):
85987:         return self._default
       
    2:     @property
    2:     def doc(self):
   23:         return self._doc
       
       
    2: class _FlagsStack(utils.ThreadLocalStack, stack_name="flags"):
    1:     pass
       
       
    2: class ConfigStack:
    1:     """A stack for tracking target configurations in the compiler.
       
           It stores the stack in a thread-local class attribute. All instances in the
           same thread will see the same stack.
           """
    2:     @classmethod
    2:     def top_or_none(cls):
               """Get the TOS or return None if no config is set.
               """
 1072:         self = cls()
 1072:         if self:
 1072:             flags = self.top()
               else:
                   # Note: should this be the default flag for the target instead?
                   flags = None
 1072:         return flags
       
    1:     def __init__(self):
 1188:         self._stk = _FlagsStack()
       
    1:     def top(self):
 1150:         return self._stk.top()
       
    1:     def __len__(self):
 1160:         return len(self._stk)
       
    1:     def enter(self, flags):
               """Returns a contextmanager that performs ``push(flags)`` on enter and
               ``pop()`` on exit.
               """
   24:         return self._stk.enter(flags)
       
       
    2: class _MetaTargetConfig(type):
    1:     """Metaclass for ``TargetConfig``.
       
           When a subclass of ``TargetConfig`` is created, all ``Option`` defined
           as class members will be parsed and corresponding getters, setters, and
           delters will be inserted.
           """
    1:     def __init__(cls, name, bases, dct):
               """Invoked when subclass is created.
       
               Insert properties for each ``Option`` that are class members.
               All the options will be grouped inside the ``.options`` class
               attribute.
               """
               # Gather options from base classes and class dict
    2:         opts = {}
               # Reversed scan into the base classes to follow MRO ordering such that
               # the closest base class is overriding
    3:         for base_cls in reversed(bases):
    1:             opts.update(base_cls.options)
    2:         opts.update(cls.find_options(dct))
               # Store the options into class attribute as a ready-only mapping.
    2:         cls.options = MappingProxyType(opts)
       
               # Make properties for each of the options
    2:         def make_prop(name, option):
   23:             def getter(self):
85183:                 return self._values.get(name, option.default)
       
   23:             def setter(self, val):
  225:                 self._values[name] = option.type(val)
       
   23:             def delter(self):
                       del self._values[name]
       
   23:             return property(getter, setter, delter, option.doc)
       
   25:         for name, option in cls.options.items():
   23:             setattr(cls, name, make_prop(name, option))
       
    1:     def find_options(cls, dct):
               """Returns a new dict with all the items that are a mapping to an
               ``Option``.
               """
   48:         return {k: v for k, v in dct.items() if isinstance(v, Option)}
       
       
    2: class _NotSetType:
    1:     def __repr__(self):
               return "<NotSet>"
       
       
    1: _NotSet = _NotSetType()
       
       
    2: class TargetConfig(metaclass=_MetaTargetConfig):
    1:     """Base class for ``TargetConfig``.
       
           Subclass should fill class members with ``Option``. For example:
       
           >>> class MyTargetConfig(TargetConfig):
           >>>     a_bool_option = Option(type=bool, default=False, doc="a bool")
           >>>     an_int_option = Option(type=int, default=0, doc="an int")
       
           The metaclass will insert properties for each ``Option``. For example:
       
           >>> tc = MyTargetConfig()
           >>> tc.a_bool_option = True  # invokes the setter
           >>> print(tc.an_int_option)  # print the default
           """
       
           # Used for compression in mangling.
           # Set to -15 to disable the header and checksum for smallest output.
    1:     _ZLIB_CONFIG = {"wbits": -15}
       
    1:     def __init__(self, copy_from=None):
               """
               Parameters
               ----------
               copy_from : TargetConfig or None
                   if None, creates an empty ``TargetConfig``.
                   Otherwise, creates a copy.
               """
   49:         self._values = {}
   49:         if copy_from is not None:
   28:             assert isinstance(copy_from, TargetConfig)
   28:             self._values.update(copy_from._values)
       
    1:     def __repr__(self):
               # NOTE: default options will be placed at the end and grouped inside
               #       a square bracket; i.e. [optname=optval, ...]
               args = []
               defs = []
               for k in self.options:
                   msg = f"{k}={getattr(self, k)}"
                   if not self.is_set(k):
                       defs.append(msg)
                   else:
                       args.append(msg)
               clsname = self.__class__.__name__
               return f"{clsname}({', '.join(args)}, [{', '.join(defs)}])"
       
    1:     def __hash__(self):
 1132:         return hash(tuple(sorted(self.values())))
       
    1:     def __eq__(self, other):
  889:         if isinstance(other, TargetConfig):
  889:             return self.values() == other.values()
               else:
                   return NotImplemented
       
    1:     def values(self):
               """Returns a dict of all the values
               """
88350:         return {k: getattr(self, k) for k in self.options}
       
    1:     def is_set(self, name):
               """Is the option set?
               """
  725:         self._guard_option(name)
  725:         return name in self._values
       
    1:     def discard(self, name):
               """Remove the option by name if it is defined.
       
               After this, the value for the option will be set to its default value.
               """
               self._guard_option(name)
               self._values.pop(name, None)
       
    1:     def inherit_if_not_set(self, name, default=_NotSet):
               """Inherit flag from ``ConfigStack``.
       
               Parameters
               ----------
               name : str
                   Option name.
               default : optional
                   When given, it overrides the default value.
                   It is only used when the flag is not defined locally and there is
                   no entry in the ``ConfigStack``.
               """
   85:         self._guard_option(name)
   85:         if not self.is_set(name):
   85:             cstk = ConfigStack()
   85:             if cstk:
                       # inherit
   75:                 top = cstk.top()
   75:                 setattr(self, name, getattr(top, name))
   10:             elif default is not _NotSet:
    4:                 setattr(self, name, default)
       
    1:     def copy(self):
               """Clone this instance.
               """
   28:         return type(self)(self)
       
    1:     def summary(self) -> str:
               """Returns a ``str`` that summarizes this instance.
       
               In contrast to ``__repr__``, only options that are explicitly set will
               be shown.
               """
  154:         args = [f"{k}={v}" for k, v in self._summary_args()]
   24:         clsname = self.__class__.__name__
   24:         return f"{clsname}({', '.join(args)})"
       
    1:     def _guard_option(self, name):
  810:         if name not in self.options:
                   msg = f"{name!r} is not a valid option for {type(self)}"
                   raise ValueError(msg)
       
    1:     def _summary_args(self):
               """returns a sorted sequence of 2-tuple containing the
               ``(flag_name, flag_value)`` for flag that are set with a non-default
               value.
               """
   24:         args = []
  576:         for k in sorted(self.options):
  552:             opt = self.options[k]
  552:             if self.is_set(k):
  252:                 flagval = getattr(self, k)
  252:                 if opt.default != flagval:
  106:                     v = (k, flagval)
  106:                     args.append(v)
   24:         return args
       
    2:     @classmethod
    2:     def _make_compression_dictionary(cls) -> bytes:
               """Returns a ``bytes`` object suitable for use as a dictionary for
               compression.
               """
   24:         buf = []
               # include package name
   24:         buf.append("numba")
               # include class name
   24:         buf.append(cls.__class__.__name__)
               # include common values
   24:         buf.extend(["True", "False"])
               # include all options name and their default value
  576:         for k, opt in cls.options.items():
  552:             buf.append(k)
  552:             buf.append(str(opt.default))
   24:         return ''.join(buf).encode()
       
    1:     def get_mangle_string(self) -> str:
               """Return a string suitable for symbol mangling.
               """
   24:         zdict = self._make_compression_dictionary()
       
   48:         comp = zlib.compressobj(zdict=zdict, level=zlib.Z_BEST_COMPRESSION,
   24:                                 **self._ZLIB_CONFIG)
               # The mangled string is a compressed and base64 encoded version of the
               # summary
   24:         buf = [comp.compress(self.summary().encode())]
   24:         buf.append(comp.flush())
   24:         return base64.b64encode(b''.join(buf)).decode()
       
    2:     @classmethod
    2:     def demangle(cls, mangled: str) -> str:
               """Returns the demangled result from ``.get_mangle_string()``
               """
               # unescape _XX sequence
               def repl(x):
                   return chr(int('0x' + x.group(0)[1:], 16))
               unescaped = re.sub(r"_[a-zA-Z0-9][a-zA-Z0-9]", repl, mangled)
               # decode base64
               raw = base64.b64decode(unescaped)
               # decompress
               zdict = cls._make_compression_dictionary()
               dc = zlib.decompressobj(zdict=zdict, **cls._ZLIB_CONFIG)
               buf = []
               while raw:
                   buf.append(dc.decompress(raw))
                   raw = dc.unconsumed_tail
               buf.append(dc.flush())
               return b''.join(buf).decode()
