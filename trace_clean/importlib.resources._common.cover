    1: import os
    1: import pathlib
    1: import tempfile
    1: import functools
    1: import contextlib
    1: import types
    1: import importlib
       
    1: from typing import Union, Optional
    1: from .abc import ResourceReader, Traversable
       
    1: from ._adapters import wrap_spec
       
    1: Package = Union[types.ModuleType, str]
       
       
    1: def files(package):
           # type: (Package) -> Traversable
           """
           Get a Traversable resource from a package
           """
    1:     return from_package(get_package(package))
       
       
    1: def get_resource_reader(package):
           # type: (types.ModuleType) -> Optional[ResourceReader]
           """
           Return the package's loader if it's a ResourceReader.
           """
           # We can't use
           # a issubclass() check here because apparently abc.'s __subclasscheck__()
           # hook wants to create a weak reference to the object, but
           # zipimport.zipimporter does not support weak references, resulting in a
           # TypeError.  That seems terrible.
           spec = package.__spec__
           reader = getattr(spec.loader, 'get_resource_reader', None)  # type: ignore
           if reader is None:
               return None
           return reader(spec.name)  # type: ignore
       
       
    1: def resolve(cand):
           # type: (Package) -> types.ModuleType
    1:     return cand if isinstance(cand, types.ModuleType) else importlib.import_module(cand)
       
       
    1: def get_package(package):
           # type: (Package) -> types.ModuleType
           """Take a package name or module object and return the module.
       
           Raise an exception if the resolved module is not a package.
           """
    1:     resolved = resolve(package)
    1:     if wrap_spec(resolved).submodule_search_locations is None:
               raise TypeError(f'{package!r} is not a package')
    1:     return resolved
       
       
    1: def from_package(package):
           """
           Return a Traversable object for the given package.
       
           """
    1:     spec = wrap_spec(package)
    1:     reader = spec.loader.get_resource_reader(spec.name)
    1:     return reader.files()
       
       
    2: @contextlib.contextmanager
    3: def _tempfile(reader, suffix='',
                     # gh-93353: Keep a reference to call os.remove() in late Python
                     # finalization.
    1:               *, _os_remove=os.remove):
           # Not using tempfile.NamedTemporaryFile as it leads to deeper 'try'
           # blocks due to the need to close the temporary file to work on Windows
           # properly.
           fd, raw_path = tempfile.mkstemp(suffix=suffix)
           try:
               try:
                   os.write(fd, reader())
               finally:
                   os.close(fd)
               del reader
               yield pathlib.Path(raw_path)
           finally:
               try:
                   _os_remove(raw_path)
               except FileNotFoundError:
                   pass
       
       
    2: @functools.singledispatch
    2: def as_file(path):
           """
           Given a Traversable object, return that object as a
           path on the local file system in a context manager.
           """
           return _tempfile(path.read_bytes, suffix=path.name)
       
       
    2: @as_file.register(pathlib.Path)
    2: @contextlib.contextmanager
    2: def _(path):
           """
           Degenerate behavior for pathlib.Path objects.
           """
    1:     yield path
