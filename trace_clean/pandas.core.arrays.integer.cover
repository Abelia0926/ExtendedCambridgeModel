    1: from __future__ import annotations
       
    1: from typing import ClassVar
       
    1: import numpy as np
       
    1: from pandas.core.dtypes.base import register_extension_dtype
    1: from pandas.core.dtypes.common import is_integer_dtype
       
    1: from pandas.core.arrays.numeric import (
           NumericArray,
           NumericDtype,
       )
       
       
    2: class IntegerDtype(NumericDtype):
    1:     """
           An ExtensionDtype to hold a single size & kind of integer dtype.
       
           These specific implementations are subclasses of the non-public
           IntegerDtype. For example, we have Int8Dtype to represent signed int 8s.
       
           The attributes name & type are set when these subclasses are created.
           """
       
    1:     _default_np_dtype = np.dtype(np.int64)
    1:     _checker = is_integer_dtype
       
    2:     @classmethod
    2:     def construct_array_type(cls) -> type[IntegerArray]:
               """
               Return the array type associated with this dtype.
       
               Returns
               -------
               type
               """
               return IntegerArray
       
    2:     @classmethod
    2:     def _get_dtype_mapping(cls) -> dict[np.dtype, IntegerDtype]:
               return NUMPY_INT_TO_DTYPE
       
    2:     @classmethod
    2:     def _safe_cast(cls, values: np.ndarray, dtype: np.dtype, copy: bool) -> np.ndarray:
               """
               Safely cast the values to the given dtype.
       
               "safe" in this context means the casting is lossless. e.g. if 'values'
               has a floating dtype, each value must be an integer.
               """
               try:
                   return values.astype(dtype, casting="safe", copy=copy)
               except TypeError as err:
                   casted = values.astype(dtype, copy=copy)
                   if (casted == values).all():
                       return casted
       
                   raise TypeError(
                       f"cannot safely cast non-equivalent {values.dtype} to {np.dtype(dtype)}"
                   ) from err
       
       
    2: class IntegerArray(NumericArray):
    1:     """
           Array of integer (optional missing) values.
       
           Uses :attr:`pandas.NA` as the missing value.
       
           .. warning::
       
              IntegerArray is currently experimental, and its API or internal
              implementation may change without warning.
       
           We represent an IntegerArray with 2 numpy arrays:
       
           - data: contains a numpy integer array of the appropriate dtype
           - mask: a boolean array holding a mask on the data, True is missing
       
           To construct an IntegerArray from generic array-like input, use
           :func:`pandas.array` with one of the integer dtypes (see examples).
       
           See :ref:`integer_na` for more.
       
           Parameters
           ----------
           values : numpy.ndarray
               A 1-d integer-dtype array.
           mask : numpy.ndarray
               A 1-d boolean-dtype array indicating missing values.
           copy : bool, default False
               Whether to copy the `values` and `mask`.
       
           Attributes
           ----------
           None
       
           Methods
           -------
           None
       
           Returns
           -------
           IntegerArray
       
           Examples
           --------
           Create an IntegerArray with :func:`pandas.array`.
       
           >>> int_array = pd.array([1, None, 3], dtype=pd.Int32Dtype())
           >>> int_array
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: Int32
       
           String aliases for the dtypes are also available. They are capitalized.
       
           >>> pd.array([1, None, 3], dtype='Int32')
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: Int32
       
           >>> pd.array([1, None, 3], dtype='UInt16')
           <IntegerArray>
           [1, <NA>, 3]
           Length: 3, dtype: UInt16
           """
       
    1:     _dtype_cls = IntegerDtype
       
           # The value used to fill '_data' to avoid upcasting
    1:     _internal_fill_value = 1
           # Fill values used for any/all
           # Incompatible types in assignment (expression has type "int", base class
           # "BaseMaskedArray" defined the type as "<typing special form>")
    1:     _truthy_value = 1  # type: ignore[assignment]
    1:     _falsey_value = 0  # type: ignore[assignment]
       
       
    1: _dtype_docstring = """
       An ExtensionDtype for {dtype} integer data.
       
       Uses :attr:`pandas.NA` as its missing value, rather than :attr:`numpy.nan`.
       
       Attributes
       ----------
       None
       
       Methods
       -------
       None
       
       Examples
       --------
       For Int8Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.Int8Dtype())
       >>> ser.dtype
       Int8Dtype()
       
       For Int16Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.Int16Dtype())
       >>> ser.dtype
       Int16Dtype()
       
       For Int32Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.Int32Dtype())
       >>> ser.dtype
       Int32Dtype()
       
       For Int64Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.Int64Dtype())
       >>> ser.dtype
       Int64Dtype()
       
       For UInt8Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.UInt8Dtype())
       >>> ser.dtype
       UInt8Dtype()
       
       For UInt16Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.UInt16Dtype())
       >>> ser.dtype
       UInt16Dtype()
       
       For UInt32Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.UInt32Dtype())
       >>> ser.dtype
       UInt32Dtype()
       
       For UInt64Dtype:
       
       >>> ser = pd.Series([2, pd.NA], dtype=pd.UInt64Dtype())
       >>> ser.dtype
       UInt64Dtype()
       """
       
       # create the Dtype
       
       
    3: @register_extension_dtype
    2: class Int8Dtype(IntegerDtype):
    1:     type = np.int8
    1:     name: ClassVar[str] = "Int8"
    1:     __doc__ = _dtype_docstring.format(dtype="int8")
       
       
    3: @register_extension_dtype
    2: class Int16Dtype(IntegerDtype):
    1:     type = np.int16
    1:     name: ClassVar[str] = "Int16"
    1:     __doc__ = _dtype_docstring.format(dtype="int16")
       
       
    3: @register_extension_dtype
    2: class Int32Dtype(IntegerDtype):
    1:     type = np.int32
    1:     name: ClassVar[str] = "Int32"
    1:     __doc__ = _dtype_docstring.format(dtype="int32")
       
       
    3: @register_extension_dtype
    2: class Int64Dtype(IntegerDtype):
    1:     type = np.int64
    1:     name: ClassVar[str] = "Int64"
    1:     __doc__ = _dtype_docstring.format(dtype="int64")
       
       
    3: @register_extension_dtype
    2: class UInt8Dtype(IntegerDtype):
    1:     type = np.uint8
    1:     name: ClassVar[str] = "UInt8"
    1:     __doc__ = _dtype_docstring.format(dtype="uint8")
       
       
    3: @register_extension_dtype
    2: class UInt16Dtype(IntegerDtype):
    1:     type = np.uint16
    1:     name: ClassVar[str] = "UInt16"
    1:     __doc__ = _dtype_docstring.format(dtype="uint16")
       
       
    3: @register_extension_dtype
    2: class UInt32Dtype(IntegerDtype):
    1:     type = np.uint32
    1:     name: ClassVar[str] = "UInt32"
    1:     __doc__ = _dtype_docstring.format(dtype="uint32")
       
       
    3: @register_extension_dtype
    2: class UInt64Dtype(IntegerDtype):
    1:     type = np.uint64
    1:     name: ClassVar[str] = "UInt64"
    1:     __doc__ = _dtype_docstring.format(dtype="uint64")
       
       
    1: NUMPY_INT_TO_DTYPE: dict[np.dtype, IntegerDtype] = {
    1:     np.dtype(np.int8): Int8Dtype(),
    1:     np.dtype(np.int16): Int16Dtype(),
    1:     np.dtype(np.int32): Int32Dtype(),
    1:     np.dtype(np.int64): Int64Dtype(),
    1:     np.dtype(np.uint8): UInt8Dtype(),
    1:     np.dtype(np.uint16): UInt16Dtype(),
    1:     np.dtype(np.uint32): UInt32Dtype(),
    1:     np.dtype(np.uint64): UInt64Dtype(),
       }
