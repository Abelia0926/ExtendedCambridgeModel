       # This file is dual licensed under the terms of the Apache License, Version
       # 2.0, and the BSD License. See the LICENSE file in the root of this repository
       # for complete details.
    1: """
       .. testsetup::
       
           from packaging.version import parse, Version
       """
       
    1: from __future__ import annotations
       
    1: import itertools
    1: import re
    1: from typing import Any, Callable, NamedTuple, SupportsInt, Tuple, Union
       
    1: from ._structures import Infinity, InfinityType, NegativeInfinity, NegativeInfinityType
       
    1: __all__ = ["VERSION_PATTERN", "InvalidVersion", "Version", "parse"]
       
    1: LocalType = Tuple[Union[int, str], ...]
       
    1: CmpPrePostDevType = Union[InfinityType, NegativeInfinityType, Tuple[str, int]]
    2: CmpLocalType = Union[
    2:     NegativeInfinityType,
    1:     Tuple[Union[Tuple[int, str], Tuple[NegativeInfinityType, Union[int, str]]], ...],
       ]
    2: CmpKey = Tuple[
    2:     int,
    1:     Tuple[int, ...],
    1:     CmpPrePostDevType,
    1:     CmpPrePostDevType,
    1:     CmpPrePostDevType,
    1:     CmpLocalType,
       ]
    1: VersionComparisonMethod = Callable[[CmpKey, CmpKey], bool]
       
       
    2: class _Version(NamedTuple):
    1:     epoch: int
    1:     release: tuple[int, ...]
    1:     dev: tuple[str, int] | None
    1:     pre: tuple[str, int] | None
    1:     post: tuple[str, int] | None
    1:     local: LocalType | None
       
       
    1: def parse(version: str) -> Version:
           """Parse the given version string.
       
           >>> parse('1.0.dev1')
           <Version('1.0.dev1')>
       
           :param version: The version string to parse.
           :raises InvalidVersion: When the version string is not a valid version.
           """
   13:     return Version(version)
       
       
    2: class InvalidVersion(ValueError):
    1:     """Raised when a version string is not a valid version.
       
           >>> Version("invalid")
           Traceback (most recent call last):
               ...
           packaging.version.InvalidVersion: Invalid version: 'invalid'
           """
       
       
    2: class _BaseVersion:
    1:     _key: tuple[Any, ...]
       
    1:     def __hash__(self) -> int:
               return hash(self._key)
       
           # Please keep the duplicated `isinstance` check
           # in the six comparisons hereunder
           # unless you find a way to avoid adding overhead function calls.
    1:     def __lt__(self, other: _BaseVersion) -> bool:
   14:         if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
   14:         return self._key < other._key
       
    1:     def __le__(self, other: _BaseVersion) -> bool:
               if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
               return self._key <= other._key
       
    1:     def __eq__(self, other: object) -> bool:
               if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
               return self._key == other._key
       
    1:     def __ge__(self, other: _BaseVersion) -> bool:
               if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
               return self._key >= other._key
       
    1:     def __gt__(self, other: _BaseVersion) -> bool:
               if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
               return self._key > other._key
       
    1:     def __ne__(self, other: object) -> bool:
               if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
               return self._key != other._key
       
       
       # Deliberately not anchored to the start and end of the string, to make it
       # easier for 3rd party code to reuse
    1: _VERSION_PATTERN = r"""
           v?
           (?:
               (?:(?P<epoch>[0-9]+)!)?                           # epoch
               (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
               (?P<pre>                                          # pre-release
                   [-_\.]?
                   (?P<pre_l>alpha|a|beta|b|preview|pre|c|rc)
                   [-_\.]?
                   (?P<pre_n>[0-9]+)?
               )?
               (?P<post>                                         # post release
                   (?:-(?P<post_n1>[0-9]+))
                   |
                   (?:
                       [-_\.]?
                       (?P<post_l>post|rev|r)
                       [-_\.]?
                       (?P<post_n2>[0-9]+)?
                   )
               )?
               (?P<dev>                                          # dev release
                   [-_\.]?
                   (?P<dev_l>dev)
                   [-_\.]?
                   (?P<dev_n>[0-9]+)?
               )?
           )
           (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
       """
       
    1: VERSION_PATTERN = _VERSION_PATTERN
    1: """
       A string containing the regular expression used to match a valid version.
       
       The pattern is not anchored at either end, and is intended for embedding in larger
       expressions (for example, matching a version number as part of a file name). The
       regular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``
       flags set.
       
       :meta hide-value:
       """
       
       
    2: class Version(_BaseVersion):
    1:     """This class abstracts handling of a project's versions.
       
           A :class:`Version` instance is comparison aware and can be compared and
           sorted using the standard Python interfaces.
       
           >>> v1 = Version("1.0a5")
           >>> v2 = Version("1.0")
           >>> v1
           <Version('1.0a5')>
           >>> v2
           <Version('1.0')>
           >>> v1 < v2
           True
           >>> v1 == v2
           False
           >>> v1 > v2
           False
           >>> v1 >= v2
           False
           >>> v1 <= v2
           True
           """
       
    1:     _regex = re.compile(r"^\s*" + VERSION_PATTERN + r"\s*$", re.VERBOSE | re.IGNORECASE)
    1:     _key: CmpKey
       
    1:     def __init__(self, version: str) -> None:
               """Initialize a Version object.
       
               :param version:
                   The string representation of a version which will be parsed and normalized
                   before use.
               :raises InvalidVersion:
                   If the ``version`` does not conform to PEP 440 in any way then this
                   exception will be raised.
               """
       
               # Validate the version and parse it into pieces
   22:         match = self._regex.search(version)
   22:         if not match:
                   raise InvalidVersion(f"Invalid version: {version!r}")
       
               # Store the parsed out pieces of the version
   44:         self._version = _Version(
   22:             epoch=int(match.group("epoch")) if match.group("epoch") else 0,
  107:             release=tuple(int(i) for i in match.group("release").split(".")),
   22:             pre=_parse_letter_version(match.group("pre_l"), match.group("pre_n")),
   44:             post=_parse_letter_version(
   22:                 match.group("post_l"), match.group("post_n1") or match.group("post_n2")
                   ),
   22:             dev=_parse_letter_version(match.group("dev_l"), match.group("dev_n")),
   22:             local=_parse_local_version(match.group("local")),
               )
       
               # Generate a key which will be used for sorting
   44:         self._key = _cmpkey(
   22:             self._version.epoch,
   22:             self._version.release,
   22:             self._version.pre,
   22:             self._version.post,
   22:             self._version.dev,
   22:             self._version.local,
               )
       
    1:     def __repr__(self) -> str:
               """A representation of the Version that shows all internal state.
       
               >>> Version('1.0.0')
               <Version('1.0.0')>
               """
               return f"<Version('{self}')>"
       
    1:     def __str__(self) -> str:
               """A string representation of the version that can be round-tripped.
       
               >>> str(Version("1.0a5"))
               '1.0a5'
               """
               parts = []
       
               # Epoch
               if self.epoch != 0:
                   parts.append(f"{self.epoch}!")
       
               # Release segment
               parts.append(".".join(str(x) for x in self.release))
       
               # Pre-release
               if self.pre is not None:
                   parts.append("".join(str(x) for x in self.pre))
       
               # Post-release
               if self.post is not None:
                   parts.append(f".post{self.post}")
       
               # Development release
               if self.dev is not None:
                   parts.append(f".dev{self.dev}")
       
               # Local version segment
               if self.local is not None:
                   parts.append(f"+{self.local}")
       
               return "".join(parts)
       
    2:     @property
    2:     def epoch(self) -> int:
               """The epoch of the version.
       
               >>> Version("2.0.0").epoch
               0
               >>> Version("1!2.0.0").epoch
               1
               """
               return self._version.epoch
       
    2:     @property
    2:     def release(self) -> tuple[int, ...]:
               """The components of the "release" segment of the version.
       
               >>> Version("1.2.3").release
               (1, 2, 3)
               >>> Version("2.0.0").release
               (2, 0, 0)
               >>> Version("1!2.0.0.post0").release
               (2, 0, 0)
       
               Includes trailing zeroes but not the epoch or any pre-release / development /
               post-release suffixes.
               """
    2:         return self._version.release
       
    2:     @property
    2:     def pre(self) -> tuple[str, int] | None:
               """The pre-release segment of the version.
       
               >>> print(Version("1.2.3").pre)
               None
               >>> Version("1.2.3a1").pre
               ('a', 1)
               >>> Version("1.2.3b1").pre
               ('b', 1)
               >>> Version("1.2.3rc1").pre
               ('rc', 1)
               """
               return self._version.pre
       
    2:     @property
    2:     def post(self) -> int | None:
               """The post-release number of the version.
       
               >>> print(Version("1.2.3").post)
               None
               >>> Version("1.2.3.post1").post
               1
               """
               return self._version.post[1] if self._version.post else None
       
    2:     @property
    2:     def dev(self) -> int | None:
               """The development number of the version.
       
               >>> print(Version("1.2.3").dev)
               None
               >>> Version("1.2.3.dev1").dev
               1
               """
               return self._version.dev[1] if self._version.dev else None
       
    2:     @property
    2:     def local(self) -> str | None:
               """The local version segment of the version.
       
               >>> print(Version("1.2.3").local)
               None
               >>> Version("1.2.3+abc").local
               'abc'
               """
               if self._version.local:
                   return ".".join(str(x) for x in self._version.local)
               else:
                   return None
       
    2:     @property
    2:     def public(self) -> str:
               """The public portion of the version.
       
               >>> Version("1.2.3").public
               '1.2.3'
               >>> Version("1.2.3+abc").public
               '1.2.3'
               >>> Version("1!1.2.3dev1+abc").public
               '1!1.2.3.dev1'
               """
               return str(self).split("+", 1)[0]
       
    2:     @property
    2:     def base_version(self) -> str:
               """The "base version" of the version.
       
               >>> Version("1.2.3").base_version
               '1.2.3'
               >>> Version("1.2.3+abc").base_version
               '1.2.3'
               >>> Version("1!1.2.3dev1+abc").base_version
               '1!1.2.3'
       
               The "base version" is the public version of the project without any pre or post
               release markers.
               """
               parts = []
       
               # Epoch
               if self.epoch != 0:
                   parts.append(f"{self.epoch}!")
       
               # Release segment
               parts.append(".".join(str(x) for x in self.release))
       
               return "".join(parts)
       
    2:     @property
    2:     def is_prerelease(self) -> bool:
               """Whether this version is a pre-release.
       
               >>> Version("1.2.3").is_prerelease
               False
               >>> Version("1.2.3a1").is_prerelease
               True
               >>> Version("1.2.3b1").is_prerelease
               True
               >>> Version("1.2.3rc1").is_prerelease
               True
               >>> Version("1.2.3dev1").is_prerelease
               True
               """
               return self.dev is not None or self.pre is not None
       
    2:     @property
    2:     def is_postrelease(self) -> bool:
               """Whether this version is a post-release.
       
               >>> Version("1.2.3").is_postrelease
               False
               >>> Version("1.2.3.post1").is_postrelease
               True
               """
               return self.post is not None
       
    2:     @property
    2:     def is_devrelease(self) -> bool:
               """Whether this version is a development release.
       
               >>> Version("1.2.3").is_devrelease
               False
               >>> Version("1.2.3.dev1").is_devrelease
               True
               """
               return self.dev is not None
       
    2:     @property
    2:     def major(self) -> int:
               """The first item of :attr:`release` or ``0`` if unavailable.
       
               >>> Version("1.2.3").major
               1
               """
    1:         return self.release[0] if len(self.release) >= 1 else 0
       
    2:     @property
    2:     def minor(self) -> int:
               """The second item of :attr:`release` or ``0`` if unavailable.
       
               >>> Version("1.2.3").minor
               2
               >>> Version("1").minor
               0
               """
               return self.release[1] if len(self.release) >= 2 else 0
       
    2:     @property
    2:     def micro(self) -> int:
               """The third item of :attr:`release` or ``0`` if unavailable.
       
               >>> Version("1.2.3").micro
               3
               >>> Version("1").micro
               0
               """
               return self.release[2] if len(self.release) >= 3 else 0
       
       
    2: class _TrimmedRelease(Version):
    2:     @property
    2:     def release(self) -> tuple[int, ...]:
               """
               Release segment without any trailing zeros.
       
               >>> _TrimmedRelease('1.0.0').release
               (1,)
               >>> _TrimmedRelease('0.0').release
               (0,)
               """
               rel = super().release
               nonzeros = (index for index, val in enumerate(rel) if val)
               last_nonzero = max(nonzeros, default=0)
               return rel[: last_nonzero + 1]
       
       
    1: def _parse_letter_version(
           letter: str | None, number: str | bytes | SupportsInt | None
       ) -> tuple[str, int] | None:
   66:     if letter:
               # We consider there to be an implicit 0 in a pre-release if there is
               # not a numeral associated with it.
    1:         if number is None:
                   number = 0
       
               # We normalize any letters to their lower case form
    1:         letter = letter.lower()
       
               # We consider some words to be alternate spellings of other words and
               # in those cases we want to normalize the spellings to our preferred
               # spelling.
    1:         if letter == "alpha":
                   letter = "a"
    1:         elif letter == "beta":
                   letter = "b"
    1:         elif letter in ["c", "pre", "preview"]:
                   letter = "rc"
    1:         elif letter in ["rev", "r"]:
                   letter = "post"
       
    1:         return letter, int(number)
       
   65:     assert not letter
   65:     if number:
               # We assume if we are given a number, but we are not given a letter
               # then this is using the implicit post release syntax (e.g. 1.0-1)
               letter = "post"
       
               return letter, int(number)
       
   65:     return None
       
       
    1: _local_version_separators = re.compile(r"[\._-]")
       
       
    1: def _parse_local_version(local: str | None) -> LocalType | None:
           """
           Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
           """
   22:     if local is not None:
               return tuple(
                   part.lower() if not part.isdigit() else int(part)
                   for part in _local_version_separators.split(local)
               )
   22:     return None
       
       
    1: def _cmpkey(
           epoch: int,
           release: tuple[int, ...],
           pre: tuple[str, int] | None,
           post: tuple[str, int] | None,
           dev: tuple[str, int] | None,
           local: LocalType | None,
       ) -> CmpKey:
           # When we compare a release version, we want to compare it with all of the
           # trailing zeros removed. So we'll use a reverse the list, drop all the now
           # leading zeros until we come to something non zero, then take the rest
           # re-reverse it back into the correct order and make it a tuple and use
           # that for our sorting key.
   44:     _release = tuple(
   46:         reversed(list(itertools.dropwhile(lambda x: x == 0, reversed(release))))
           )
       
           # We need to "trick" the sorting algorithm to put 1.0.dev0 before 1.0a0.
           # We'll do this by abusing the pre segment, but we _only_ want to do this
           # if there is not a pre or a post segment. If we have one of those then
           # the normal sorting rules will handle this case correctly.
   22:     if pre is None and post is None and dev is not None:
               _pre: CmpPrePostDevType = NegativeInfinity
           # Versions without a pre-release (except as noted above) should sort after
           # those with one.
   22:     elif pre is None:
   22:         _pre = Infinity
           else:
               _pre = pre
       
           # Versions without a post segment should sort before those with one.
   22:     if post is None:
   21:         _post: CmpPrePostDevType = NegativeInfinity
       
           else:
    1:         _post = post
       
           # Versions without a development segment should sort after those with one.
   22:     if dev is None:
   22:         _dev: CmpPrePostDevType = Infinity
       
           else:
               _dev = dev
       
   22:     if local is None:
               # Versions without a local segment should sort before those with one.
   22:         _local: CmpLocalType = NegativeInfinity
           else:
               # Versions with a local segment need that segment parsed to implement
               # the sorting rules in PEP440.
               # - Alpha numeric segments sort before numeric segments
               # - Alpha numeric segments sort lexicographically
               # - Numeric segments sort numerically
               # - Shorter versions sort before longer versions when the prefixes
               #   match exactly
               _local = tuple(
                   (i, "") if isinstance(i, int) else (NegativeInfinity, i) for i in local
               )
       
   22:     return epoch, _release, _pre, _post, _dev, _local
