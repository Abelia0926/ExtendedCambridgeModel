       # Copyright Jonathan Hartley 2013. BSD 3-Clause license, see LICENSE file.
    1: import atexit
    1: import contextlib
    1: import sys
       
    1: from .ansitowin32 import AnsiToWin32
       
       
    1: def _wipe_internal_state_for_tests():
           global orig_stdout, orig_stderr
    1:     orig_stdout = None
    1:     orig_stderr = None
       
           global wrapped_stdout, wrapped_stderr
    1:     wrapped_stdout = None
    1:     wrapped_stderr = None
       
           global atexit_done
    1:     atexit_done = False
       
           global fixed_windows_console
    1:     fixed_windows_console = False
       
    1:     try:
               # no-op if it wasn't registered
    1:         atexit.unregister(reset_all)
           except AttributeError:
               # python 2: no atexit.unregister. Oh well, we did our best.
               pass
       
       
    1: def reset_all():
           if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit
               AnsiToWin32(orig_stdout).reset_all()
       
       
    1: def init(autoreset=False, convert=None, strip=None, wrap=True):
       
 1385:     if not wrap and any([autoreset, convert, strip]):
               raise ValueError('wrap=False conflicts with any other arg=True')
       
           global wrapped_stdout, wrapped_stderr
           global orig_stdout, orig_stderr
       
 1385:     orig_stdout = sys.stdout
 1385:     orig_stderr = sys.stderr
       
 1385:     if sys.stdout is None:
               wrapped_stdout = None
           else:
 1385:         sys.stdout = wrapped_stdout = \
 1385:             wrap_stream(orig_stdout, convert, strip, autoreset, wrap)
 1385:     if sys.stderr is None:
               wrapped_stderr = None
           else:
 1385:         sys.stderr = wrapped_stderr = \
 1385:             wrap_stream(orig_stderr, convert, strip, autoreset, wrap)
       
           global atexit_done
 1385:     if not atexit_done:
    1:         atexit.register(reset_all)
    1:         atexit_done = True
       
       
    1: def deinit():
 1385:     if orig_stdout is not None:
 1385:         sys.stdout = orig_stdout
 1385:     if orig_stderr is not None:
 1385:         sys.stderr = orig_stderr
       
       
    1: def just_fix_windows_console():
           global fixed_windows_console
       
           if sys.platform != "win32":
               return
           if fixed_windows_console:
               return
           if wrapped_stdout is not None or wrapped_stderr is not None:
               # Someone already ran init() and it did stuff, so we won't second-guess them
               return
       
           # On newer versions of Windows, AnsiToWin32.__init__ will implicitly enable the
           # native ANSI support in the console as a side-effect. We only need to actually
           # replace sys.stdout/stderr if we're in the old-style conversion mode.
           new_stdout = AnsiToWin32(sys.stdout, convert=None, strip=None, autoreset=False)
           if new_stdout.convert:
               sys.stdout = new_stdout
           new_stderr = AnsiToWin32(sys.stderr, convert=None, strip=None, autoreset=False)
           if new_stderr.convert:
               sys.stderr = new_stderr
       
           fixed_windows_console = True
       
    2: @contextlib.contextmanager
    2: def colorama_text(*args, **kwargs):
           init(*args, **kwargs)
           try:
               yield
           finally:
               deinit()
       
       
    1: def reinit():
 1385:     if wrapped_stdout is not None:
 1385:         sys.stdout = wrapped_stdout
 1385:     if wrapped_stderr is not None:
 1385:         sys.stderr = wrapped_stderr
       
       
    1: def wrap_stream(stream, convert, strip, autoreset, wrap):
 2770:     if wrap:
 5540:         wrapper = AnsiToWin32(stream,
 2770:             convert=convert, strip=strip, autoreset=autoreset)
 2770:         if wrapper.should_wrap():
                   stream = wrapper.stream
 2770:     return stream
       
       
       # Use this for initial setup as well, to reduce code duplication
    1: _wipe_internal_state_for_tests()
