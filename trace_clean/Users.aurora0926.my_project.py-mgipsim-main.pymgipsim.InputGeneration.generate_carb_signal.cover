    1: import numpy as np
    1: from pymgipsim.Probability.pdfs_samplers import sample_generator
    1: from pymgipsim.Utilities.units_conversions_constants import UnitConversion
    1: from pymgipsim.InputGeneration.signal import Events
    1: from pymgipsim.Utilities.Scenario import scenario
    1: from itertools import repeat
       
    1: def generate_carb_ranges_multiscale(scenario_instance):
       
           fraction_of_cho_meals = 1 - np.array(scenario_instance.input_generation.fraction_cho_as_snack)
       
           total_meal_cho = []
           total_snack_cho = []
           for i in range(len(scenario_instance.input_generation.total_carb_range)):
       
               total_meal_cho.append(list(fraction_of_cho_meals * np.array(scenario_instance.input_generation.total_carb_range[i])))
               total_snack_cho.append(list(np.array(scenario_instance.input_generation.fraction_cho_as_snack) * np.array(scenario_instance.input_generation.total_carb_range[i])))
       
           return list(total_meal_cho), list(total_snack_cho)
       
    1: def generate_carb_magnitudes_singlescale(scenario_instance, number_of_days):
       
           """ Meal Magnitude """
    2:     value_limits = [scenario_instance.input_generation.breakfast_carb_range,
    1:                     scenario_instance.input_generation.lunch_carb_range,
    1:                     scenario_instance.input_generation.dinner_carb_range
                           ]
       
    1:     distribution = ['uniform'] * 3
    1:     samples_size = [(scenario_instance.patient.number_of_subjects, number_of_days)] * len(value_limits)
       
    1:     rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
    1:     rng_generator.bit_generator.state = scenario_instance.settings.random_state
    1:     breakfast, lunch, dinner = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
    1:     scenario_instance.settings.random_state = rng_generator.bit_generator.state
       
       
    1:     breakfast_magnitude_samples, lunch_magnitude_samples, dinner_magnitude_samples = breakfast[-1], lunch[-1], dinner[-1]
    1:     combined_meal_magnitudes = np.concatenate((breakfast_magnitude_samples, lunch_magnitude_samples, dinner_magnitude_samples), axis = -1)
       
    1:     """ Snack Magnitude """
    2:     value_limits = [scenario_instance.input_generation.am_snack_carb_range,
    1:                     scenario_instance.input_generation.pm_snack_carb_range,
                           ]
       
    1:     distribution = ['uniform'] * 3
    1:     samples_size = [(scenario_instance.patient.number_of_subjects, number_of_days)] * len(value_limits)
       
    1:     rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
    1:     rng_generator.bit_generator.state = scenario_instance.settings.random_state
    1:     am_snack_magnitude, pm_snack_magnitude = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
    1:     scenario_instance.settings.random_state = rng_generator.bit_generator.state
       
       
    1:     am_snack_magnitude_samples = am_snack_magnitude[-1]
    1:     pm_snack_magnitude_sample = pm_snack_magnitude[-1]
       
    1:     combined_snack_magnitudes = np.concatenate((am_snack_magnitude_samples, pm_snack_magnitude_sample), axis = -1)
       
    1:     return combined_meal_magnitudes, combined_snack_magnitudes
       
    1: def generate_carb_magnitudes_multiscale(scenario_instance, number_of_days, combined_meal_times, combined_snack_times):
       
           for i in range(scenario_instance.patient.number_of_subjects):
       
               """ Meal Magnitude """
               value_limits = [scenario_instance.input_generation.breakfast_carb_range[i],
                               scenario_instance.input_generation.lunch_carb_range[i],
                               scenario_instance.input_generation.dinner_carb_range[i]
                               ]
       
               distribution = ['uniform'] * 3
               samples_size = [(1, number_of_days)] * len(value_limits)
       
               rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
               rng_generator.bit_generator.state = scenario_instance.settings.random_state
               breakfast, lunch, dinner = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
               scenario_instance.settings.random_state = rng_generator.bit_generator.state
               breakfast_magnitude_samples, lunch_magnitude_samples, dinner_magnitude_samples = breakfast[-1], lunch[-1], dinner[-1]
       
               if i == 0:
                   combined_meal_magnitudes = np.concatenate((breakfast_magnitude_samples, lunch_magnitude_samples, dinner_magnitude_samples), axis = -1)
       
               else:
                   combined_meal_magnitudes = np.vstack((combined_meal_magnitudes, np.concatenate((breakfast_magnitude_samples, lunch_magnitude_samples, dinner_magnitude_samples), axis = -1)))
       
       
               """ Snack Magnitude """
               value_limits = [scenario_instance.input_generation.am_snack_carb_range[i],
                               scenario_instance.input_generation.pm_snack_carb_range[i]
                               ]
       
               distribution = ['uniform'] * len(value_limits)
               samples_size = [(1, number_of_days)] * len(value_limits)
       
               rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
               rng_generator.bit_generator.state = scenario_instance.settings.random_state
               am_snack, pm_snack = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
               scenario_instance.settings.random_state = rng_generator.bit_generator.state
               am_snack_magnitude_samples, pm_snack_magnitude_samples = am_snack[-1], pm_snack[-1]
       
               if i == 0:
                   combined_snack_magnitudes = np.concatenate((am_snack_magnitude_samples, pm_snack_magnitude_samples), axis = -1)
       
               else:
                   combined_snack_magnitudes = np.vstack((combined_snack_magnitudes, np.concatenate((am_snack_magnitude_samples, pm_snack_magnitude_samples), axis = -1)))
       
           return combined_meal_magnitudes, combined_snack_magnitudes
       
    1: def calculate_meal_time_samples(scenario_instance, number_of_days):
       
    1:     value_limits = [
    1:                     scenario_instance.input_generation.breakfast_time_range,
    1:                     scenario_instance.input_generation.lunch_time_range,
    1:                     scenario_instance.input_generation.dinner_time_range
                           ]
       
    1:     distribution = ['uniform'] * 3
    1:     samples_size = [(scenario_instance.patient.number_of_subjects, number_of_days)] * 3
       
       
       
    1:     rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
    1:     rng_generator.bit_generator.state = scenario_instance.settings.random_state
    1:     breakfast, lunch, dinner = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
    1:     scenario_instance.settings.random_state = rng_generator.bit_generator.state
       
    1:     breakfast_start_samples, lunch_start_samples, dinner_start_samples = breakfast[-1].astype(float), lunch[-1].astype(float), dinner[-1].astype(float)
       
    2:     breakfast_start_samples += UnitConversion.time.calculate_time_adjustment_array(
    1:                                                                                 breakfast_start_samples.shape,
                                                                                       )
           
    2:     lunch_start_samples += UnitConversion.time.calculate_time_adjustment_array(
    1:                                                                             lunch_start_samples.shape,
                                                                                   )
       
    2:     dinner_start_samples += UnitConversion.time.calculate_time_adjustment_array(
    1:                                                                             dinner_start_samples.shape,
                                                                                   )
       
    1:     return np.concatenate((breakfast_start_samples, lunch_start_samples, dinner_start_samples), axis = -1)
       
    1: def calculate_snack_time_samples(scenario_instance, number_of_days):
       
    2:     value_limits = [scenario_instance.input_generation.am_snack_time_range,
    1:                     scenario_instance.input_generation.pm_snack_time_range
                           ]
       
    1:     distribution = ['uniform'] * 2
    1:     samples_size = [(scenario_instance.patient.number_of_subjects, number_of_days)] * 2
       
    1:     rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
    1:     rng_generator.bit_generator.state = scenario_instance.settings.random_state
    1:     am_snack_start_time, pm_snack_start_time = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
    1:     scenario_instance.settings.random_state = rng_generator.bit_generator.state
       
       
    1:     am_snack_start_time_samples = am_snack_start_time[-1].astype(float)
    1:     pm_snack_start_time_samples = pm_snack_start_time[-1].astype(float)
       
       
    2:     am_snack_start_time_samples += UnitConversion.time.calculate_time_adjustment_array(
    1:                                                                                         am_snack_start_time_samples.shape,
                                                                                               )
       
    2:     pm_snack_start_time_samples += UnitConversion.time.calculate_time_adjustment_array(
    1:                                                                                         pm_snack_start_time_samples.shape,
                                                                                               )
       
    1:     return np.concatenate((am_snack_start_time_samples, pm_snack_start_time_samples), axis = -1)
       
       
    1: def generate_carb_events(scenario_instance: scenario, args):
       
    1:     number_of_days = int(UnitConversion.time.convert_minutes_to_days(scenario_instance.settings.end_time - scenario_instance.settings.start_time))
       
           ####################################################### Meal and Snack Start Times
    1:     """ Meal Start Time """
    1:     combined_meal_times = calculate_meal_time_samples(scenario_instance, number_of_days)
       
    1:     """ Snack Start Time """
    1:     combined_snack_times = calculate_snack_time_samples(scenario_instance, number_of_days)
       
           ####################################################### Meal and Snack Duration
    2:     value_limits = [scenario_instance.input_generation.meal_duration,
    1:                     scenario_instance.input_generation.snack_duration,
                           ]
       
    1:     distribution = ['uniform'] * 2
    1:     samples_size = [combined_meal_times.shape, combined_snack_times.shape]
       
    1:     rng_generator = np.random.default_rng(scenario_instance.settings.random_seed)
    1:     rng_generator.bit_generator.state = scenario_instance.settings.random_state
    1:     meal_duration, snack_duration = map(sample_generator, value_limits, distribution, samples_size, repeat(rng_generator))
    1:     scenario_instance.settings.random_state = rng_generator.bit_generator.state
       
    1:     meal_duration_samples, snack_duration_samples = meal_duration[-1], snack_duration[-1]
       
       
           ####################################################### Magnitudes
       
    1:     if scenario_instance.settings.simulator_name == "MultiScaleSolver":
               combined_meal_magnitudes, combined_snack_magnitudes = generate_carb_magnitudes_multiscale(scenario_instance, number_of_days, combined_meal_times,combined_snack_times)
           else:
    1:         combined_meal_magnitudes, combined_snack_magnitudes = generate_carb_magnitudes_singlescale(scenario_instance, number_of_days)
       
       
           ####################################################### Events
       
           # Sort Meal times and magnitudes
    1:     meal_ascending_order_index_by_subject = np.argsort(combined_meal_times, axis = -1)
    1:     snack_ascending_order_index_by_subject = np.argsort(combined_snack_times, axis = -1)
       
    1:     meal_events = Events()
    1:     snack_events = Events()
       
    5:     for name, meal_arr, snack_arr in zip(['magnitude', 'start_time', 'duration'],
    1:                                         [combined_meal_magnitudes, combined_meal_times, meal_duration_samples],
    1:                                         [combined_snack_magnitudes, combined_snack_times, snack_duration_samples]
                                               ):
       
    6:         setattr(meal_events, name, np.take_along_axis(meal_arr,
    3:                                                     meal_ascending_order_index_by_subject,
    3:                                                     axis = -1)
                       )
       
    6:         setattr(snack_events, name, np.take_along_axis(snack_arr,
    3:                                                     snack_ascending_order_index_by_subject,
    3:                                                     axis = -1)
                       )
       
    1:     return meal_events.as_dict(), snack_events.as_dict()
