    1: """A module containing the `_NestedSequence` protocol."""
       
    1: from __future__ import annotations
       
    1: from collections.abc import Iterator
    1: from typing import (
           Any,
           TypeVar,
           Protocol,
           runtime_checkable,
       )
       
    1: __all__ = ["_NestedSequence"]
       
    1: _T_co = TypeVar("_T_co", covariant=True)
       
       
    3: @runtime_checkable
    2: class _NestedSequence(Protocol[_T_co]):
    1:     """A protocol for representing nested sequences.
       
           Warning
           -------
           `_NestedSequence` currently does not work in combination with typevars,
           *e.g.* ``def func(a: _NestedSequnce[T]) -> T: ...``.
       
           See Also
           --------
           collections.abc.Sequence
               ABCs for read-only and mutable :term:`sequences`.
       
           Examples
           --------
           .. code-block:: python
       
               >>> from __future__ import annotations
       
               >>> from typing import TYPE_CHECKING
               >>> import numpy as np
               >>> from numpy._typing import _NestedSequence
       
               >>> def get_dtype(seq: _NestedSequence[float]) -> np.dtype[np.float64]:
               ...     return np.asarray(seq).dtype
       
               >>> a = get_dtype([1.0])
               >>> b = get_dtype([[1.0]])
               >>> c = get_dtype([[[1.0]]])
               >>> d = get_dtype([[[[1.0]]]])
       
               >>> if TYPE_CHECKING:
               ...     reveal_locals()
               ...     # note: Revealed local types are:
               ...     # note:     a: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
               ...     # note:     b: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
               ...     # note:     c: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
               ...     # note:     d: numpy.dtype[numpy.floating[numpy._typing._64Bit]]
       
           """
       
    1:     def __len__(self, /) -> int:
               """Implement ``len(self)``."""
               raise NotImplementedError
       
    1:     def __getitem__(self, index: int, /) -> _T_co | _NestedSequence[_T_co]:
               """Implement ``self[x]``."""
               raise NotImplementedError
       
    1:     def __contains__(self, x: object, /) -> bool:
               """Implement ``x in self``."""
               raise NotImplementedError
       
    1:     def __iter__(self, /) -> Iterator[_T_co | _NestedSequence[_T_co]]:
               """Implement ``iter(self)``."""
               raise NotImplementedError
       
    1:     def __reversed__(self, /) -> Iterator[_T_co | _NestedSequence[_T_co]]:
               """Implement ``reversed(self)``."""
               raise NotImplementedError
       
    1:     def count(self, value: Any, /) -> int:
               """Return the number of occurrences of `value`."""
               raise NotImplementedError
       
    1:     def index(self, value: Any, /) -> int:
               """Return the first index of `value`."""
               raise NotImplementedError
