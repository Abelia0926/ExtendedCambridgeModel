       # #########################     LICENSE     ############################ #
       
       # Copyright (c) 2005-2015, Michele Simionato
       # All rights reserved.
       
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions are
       # met:
       
       #   Redistributions of source code must retain the above copyright
       #   notice, this list of conditions and the following disclaimer.
       #   Redistributions in bytecode form must reproduce the above copyright
       #   notice, this list of conditions and the following disclaimer in
       #   the documentation and/or other materials provided with the
       #   distribution.
       
       # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
       # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
       # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
       # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
       # HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
       # INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
       # BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
       # OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
       # ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
       # TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
       # USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
       # DAMAGE.
       
    1: """
       Decorator module, see https://pypi.python.org/pypi/decorator
       for the documentation.
       """
    1: import re
    1: import sys
    1: import inspect
    1: import operator
    1: import itertools
    1: import collections
       
    1: from inspect import getfullargspec
       
    1: __version__ = '4.0.5'
       
       
    1: def get_init(cls):
    1:     return cls.__init__
       
       
       # getargspec has been deprecated in Python 3.5
    2: ArgSpec = collections.namedtuple(
    1:     'ArgSpec', 'args varargs varkw defaults')
       
       
    1: def getargspec(f):
           """A replacement for inspect.getargspec"""
           spec = getfullargspec(f)
           return ArgSpec(spec.args, spec.varargs, spec.varkw, spec.defaults)
       
       
    1: DEF = re.compile(r'\s*def\s*([_\w][_\w\d]*)\s*\(')
       
       
       # basic functionality
    2: class FunctionMaker:
    1:     """
           An object with the ability to create functions with a given signature.
           It has attributes name, doc, module, signature, defaults, dict, and
           methods update and make.
           """
       
           # Atomic get-and-increment provided by the GIL
    1:     _compile_count = itertools.count()
       
    2:     def __init__(self, func=None, name=None, signature=None,
    1:                  defaults=None, doc=None, module=None, funcdict=None):
    5:         self.shortsignature = signature
    5:         if func:
                   # func can be a class or a callable, but not an instance method
    3:             self.name = func.__name__
    3:             if self.name == '<lambda>':  # small hack for lambda functions
                       self.name = '_lambda_'
    3:             self.doc = func.__doc__
    3:             self.module = func.__module__
    3:             if inspect.isfunction(func):
    3:                 argspec = getfullargspec(func)
    3:                 self.annotations = getattr(func, '__annotations__', {})
   21:                 for a in ('args', 'varargs', 'varkw', 'defaults', 'kwonlyargs',
                                 'kwonlydefaults'):
   18:                     setattr(self, a, getattr(argspec, a))
    9:                 for i, arg in enumerate(self.args):
    6:                     setattr(self, 'arg%d' % i, arg)
    3:                 allargs = list(self.args)
    3:                 allshortargs = list(self.args)
    3:                 if self.varargs:
                           allargs.append('*' + self.varargs)
                           allshortargs.append('*' + self.varargs)
    3:                 elif self.kwonlyargs:
                           allargs.append('*')  # single star syntax
    3:                 for a in self.kwonlyargs:
                           allargs.append('%s=None' % a)
                           allshortargs.append(f'{a}={a}')
    3:                 if self.varkw:
    1:                     allargs.append('**' + self.varkw)
    1:                     allshortargs.append('**' + self.varkw)
    3:                 self.signature = ', '.join(allargs)
    3:                 self.shortsignature = ', '.join(allshortargs)
    3:                 self.dict = func.__dict__.copy()
               # func=None happens when decorating a caller
    5:         if name:
    2:             self.name = name
    5:         if signature is not None:
    2:             self.signature = signature
    5:         if defaults:
                   self.defaults = defaults
    5:         if doc:
    1:             self.doc = doc
    5:         if module:
    2:             self.module = module
    5:         if funcdict:
                   self.dict = funcdict
               # check existence required attributes
    5:         assert hasattr(self, 'name')
    5:         if not hasattr(self, 'signature'):
                   raise TypeError('You are decorating a non-function: %s' % func)
       
    1:     def update(self, func, **kw):
               "Update the signature of func with the data in self"
    5:         func.__name__ = self.name
    5:         func.__doc__ = getattr(self, 'doc', None)
    5:         func.__dict__ = getattr(self, 'dict', {})
    5:         func.__defaults__ = getattr(self, 'defaults', ())
    5:         func.__kwdefaults__ = getattr(self, 'kwonlydefaults', None)
    5:         func.__annotations__ = getattr(self, 'annotations', None)
    5:         try:
    5:             frame = sys._getframe(3)
               except AttributeError:  # for IronPython and similar implementations
                   callermodule = '?'
               else:
    5:             callermodule = frame.f_globals.get('__name__', '?')
    5:         func.__module__ = getattr(self, 'module', callermodule)
    5:         func.__dict__.update(kw)
       
    1:     def make(self, src_templ, evaldict=None, addsource=False, **attrs):
               "Make a new function from a given template and update the signature"
    5:         src = src_templ % vars(self)  # expand name and signature
    5:         evaldict = evaldict or {}
    5:         mo = DEF.match(src)
    5:         if mo is None:
                   raise SyntaxError('not a valid function template\n%s' % src)
    5:         name = mo.group(1)  # extract the function name
   24:         names = set([name] + [arg.strip(' *') for arg in
    5:                               self.shortsignature.split(',')])
   19:         for n in names:
   14:             if n in ('_func_', '_call_'):
                       raise NameError(f'{n} is overridden in\n{src}')
    5:         if not src.endswith('\n'):  # add a newline just for safety
    5:             src += '\n'  # this is needed in old versions of Python
       
               # Ensure each generated function has a unique filename for profilers
               # (such as cProfile) that depend on the tuple of (<filename>,
               # <definition line>, <function name>) being unique.
    5:         filename = '<decorator-gen-%d>' % (next(self._compile_count),)
    5:         try:
    5:             code = compile(src, filename, 'single')
    5:             exec(code, evaldict)
               except:  # noqa: E722
                   print('Error in generated code:', file=sys.stderr)
                   print(src, file=sys.stderr)
                   raise
    5:         func = evaldict[name]
    5:         if addsource:
    5:             attrs['__source__'] = src
    5:         self.update(func, **attrs)
    5:         return func
       
    2:     @classmethod
    3:     def create(cls, obj, body, evaldict, defaults=None,
    1:                doc=None, module=None, addsource=True, **attrs):
               """
               Create a function from the strings name, signature, and body.
               evaldict is the evaluation dictionary. If addsource is true, an
               attribute __source__ is added to the result. The attributes attrs
               are added, if any.
               """
    5:         if isinstance(obj, str):  # "name(signature)"
    2:             name, rest = obj.strip().split('(', 1)
    2:             signature = rest[:-1]  # strip a right parens
    2:             func = None
               else:  # a function
    3:             name = None
    3:             signature = None
    3:             func = obj
    5:         self = cls(func, name, signature, defaults, doc, module)
   15:         ibody = '\n'.join('    ' + line for line in body.splitlines())
   15:         return self.make('def %(name)s(%(signature)s):\n' + ibody,
   10:                          evaldict, addsource, **attrs)
       
       
    1: def decorate(func, caller):
           """
           decorate(func, caller) decorates a function using a caller.
           """
    3:     evaldict = func.__globals__.copy()
    3:     evaldict['_call_'] = caller
    3:     evaldict['_func_'] = func
    6:     fun = FunctionMaker.create(
    3:         func, "return _call_(_func_, %(shortsignature)s)",
    3:         evaldict, __wrapped__=func)
    3:     if hasattr(func, '__qualname__'):
    3:         fun.__qualname__ = func.__qualname__
    3:     return fun
       
       
    1: def decorator(caller, _func=None):
           """decorator(caller) converts a caller function into a decorator"""
    2:     if _func is not None:  # return a decorated function
               # this is obsolete behavior; you should use decorate instead
               return decorate(_func, caller)
           # else return a decorator function
    2:     if inspect.isclass(caller):
    1:         name = caller.__name__.lower()
    1:         callerfunc = get_init(caller)
    2:         doc = (f'decorator({caller.__name__}) converts functions/generators into ' 
    1:                f'factories of {caller.__name__} objects')
    1:     elif inspect.isfunction(caller):
    1:         if caller.__name__ == '<lambda>':
                   name = '_lambda_'
               else:
    1:             name = caller.__name__
    1:         callerfunc = caller
    1:         doc = caller.__doc__
           else:  # assume caller is an object with a __call__ method
               name = caller.__class__.__name__.lower()
               callerfunc = caller.__call__.__func__
               doc = caller.__call__.__doc__
    2:     evaldict = callerfunc.__globals__.copy()
    2:     evaldict['_call_'] = caller
    2:     evaldict['_decorate_'] = decorate
    4:     return FunctionMaker.create(
    2:         '%s(func)' % name, 'return _decorate_(func, _call_)',
    2:         evaldict, doc=doc, module=caller.__module__,
    2:         __wrapped__=caller)
       
       
       # ####################### contextmanager ####################### #
       
    1: try:  # Python >= 3.2
    1:     from contextlib import _GeneratorContextManager
       except ImportError:  # Python >= 2.5
           from contextlib import GeneratorContextManager as _GeneratorContextManager
       
       
    2: class ContextManager(_GeneratorContextManager):
    1:     def __call__(self, func):
               """Context manager decorator"""
               return FunctionMaker.create(
                   func, "with _self_: return _func_(%(shortsignature)s)",
                   dict(_self_=self, _func_=func), __wrapped__=func)
       
       
    1: init = getfullargspec(_GeneratorContextManager.__init__)
    1: n_args = len(init.args)
    1: if n_args == 2 and not init.varargs:  # (self, genobj) Python 2.7
           def __init__(self, g, *a, **k):
               return _GeneratorContextManager.__init__(self, g(*a, **k))
           ContextManager.__init__ = __init__
    1: elif n_args == 2 and init.varargs:  # (self, gen, *a, **k) Python 3.4
           pass
    1: elif n_args == 4:  # (self, gen, args, kwds) Python 3.5
    1:     def __init__(self, g, *a, **k):
               return _GeneratorContextManager.__init__(self, g, a, k)
    1:     ContextManager.__init__ = __init__
       
    1: contextmanager = decorator(ContextManager)
       
       
       # ############################ dispatch_on ############################ #
       
    1: def append(a, vancestors):
           """
           Append ``a`` to the list of the virtual ancestors, unless it is already
           included.
           """
           add = True
           for j, va in enumerate(vancestors):
               if issubclass(va, a):
                   add = False
                   break
               if issubclass(a, va):
                   vancestors[j] = a
                   add = False
           if add:
               vancestors.append(a)
       
       
       # inspired from simplegeneric by P.J. Eby and functools.singledispatch
    1: def dispatch_on(*dispatch_args):
           """
           Factory of decorators turning a function into a generic function
           dispatching on the given arguments.
           """
           assert dispatch_args, 'No dispatch args passed'
           dispatch_str = '(%s,)' % ', '.join(dispatch_args)
       
           def check(arguments, wrong=operator.ne, msg=''):
               """Make sure one passes the expected number of arguments"""
               if wrong(len(arguments), len(dispatch_args)):
                   raise TypeError('Expected %d arguments, got %d%s' %
                                   (len(dispatch_args), len(arguments), msg))
       
           def gen_func_dec(func):
               """Decorator turning a function into a generic function"""
       
               # first check the dispatch arguments
               argset = set(getfullargspec(func).args)
               if not set(dispatch_args) <= argset:
                   raise NameError('Unknown dispatch arguments %s' % dispatch_str)
       
               typemap = {}
       
               def vancestors(*types):
                   """
                   Get a list of sets of virtual ancestors for the given types
                   """
                   check(types)
                   ras = [[] for _ in range(len(dispatch_args))]
                   for types_ in typemap:
                       for t, type_, ra in zip(types, types_, ras):
                           if issubclass(t, type_) and type_ not in t.__mro__:
                               append(type_, ra)
                   return [set(ra) for ra in ras]
       
               def ancestors(*types):
                   """
                   Get a list of virtual MROs, one for each type
                   """
                   check(types)
                   lists = []
                   for t, vas in zip(types, vancestors(*types)):
                       n_vas = len(vas)
                       if n_vas > 1:
                           raise RuntimeError(
                               f'Ambiguous dispatch for {t}: {vas}')
                       elif n_vas == 1:
                           va, = vas
                           mro = type('t', (t, va), {}).__mro__[1:]
                       else:
                           mro = t.__mro__
                       lists.append(mro[:-1])  # discard t and object
                   return lists
       
               def register(*types):
                   """
                   Decorator to register an implementation for the given types
                   """
                   check(types)
       
                   def dec(f):
                       check(getfullargspec(f).args, operator.lt, ' in ' + f.__name__)
                       typemap[types] = f
                       return f
                   return dec
       
               def dispatch_info(*types):
                   """
                   An utility to introspect the dispatch algorithm
                   """
                   check(types)
                   lst = [tuple(a.__name__ for a in anc)
                          for anc in itertools.product(*ancestors(*types))]
                   return lst
       
               def _dispatch(dispatch_args, *args, **kw):
                   types = tuple(type(arg) for arg in dispatch_args)
                   try:  # fast path
                       f = typemap[types]
                   except KeyError:
                       pass
                   else:
                       return f(*args, **kw)
                   combinations = itertools.product(*ancestors(*types))
                   next(combinations)  # the first one has been already tried
                   for types_ in combinations:
                       f = typemap.get(types_)
                       if f is not None:
                           return f(*args, **kw)
       
                   # else call the default implementation
                   return func(*args, **kw)
       
               return FunctionMaker.create(
                   func, 'return _f_(%s, %%(shortsignature)s)' % dispatch_str,
                   dict(_f_=_dispatch), register=register, default=func,
                   typemap=typemap, vancestors=vancestors, ancestors=ancestors,
                   dispatch_info=dispatch_info, __wrapped__=func)
       
           gen_func_dec.__name__ = 'dispatch_on' + dispatch_str
           return gen_func_dec
