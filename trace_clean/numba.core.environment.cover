    1: import weakref
    1: import importlib
       
    1: from numba import _dynfunc
       
       
    2: class Environment(_dynfunc.Environment):
    1:     """Stores globals and constant pyobjects for runtime.
       
           It is often needed to convert b/w nopython objects and pyobjects.
           """
    1:     __slots__ = ('env_name', '__weakref__')
           # A weak-value dictionary to store live environment with env_name as the
           # key.
    1:     _memo = weakref.WeakValueDictionary()
       
    2:     @classmethod
    2:     def from_fndesc(cls, fndesc):
   24:         try:
                   # Avoid creating new Env
   24:             return cls._memo[fndesc.env_name]
   22:         except KeyError:
   22:             inst = cls(fndesc.lookup_globals())
   22:             inst.env_name = fndesc.env_name
   22:             cls._memo[fndesc.env_name] = inst
   22:             return inst
       
    1:     def can_cache(self):
               is_dyn = '__name__' not in self.globals
               return not is_dyn
       
    1:     def __reduce__(self):
               return _rebuild_env, (
                   self.globals.get('__name__'),
                   self.consts,
                   self.env_name,
               )
       
    1:     def __del__(self):
               return
       
    1:     def __repr__(self):
               return f"<Environment {self.env_name!r} >"
       
       
    1: def _rebuild_env(modname, consts, env_name):
   17:     env = lookup_environment(env_name)
   17:     if env is not None:
    6:         return env
       
   11:     mod = importlib.import_module(modname)
   11:     env = Environment(mod.__dict__)
   11:     env.consts[:] = consts
   11:     env.env_name = env_name
           # Cache loaded object
   11:     Environment._memo[env_name] = env
   11:     return env
       
       
    1: def lookup_environment(env_name):
           """Returns the Environment object for the given name;
           or None if not found
           """
   17:     return Environment._memo.get(env_name)
