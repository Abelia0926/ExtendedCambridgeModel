    1: """
       Contains the core of NumPy: ndarray, ufuncs, dtypes, etc.
       
       Please note that this module is private.  All functions and objects
       are available in the main ``numpy`` namespace - use that instead.
       
       """
       
    1: import os
    1: import warnings
       
    1: from numpy.version import version as __version__
       
       
       # disables OpenBLAS affinity setting of the main thread that limits
       # python threads or processes to one core
    1: env_added = []
    3: for envkey in ['OPENBLAS_MAIN_FREE', 'GOTOBLAS_MAIN_FREE']:
    2:     if envkey not in os.environ:
    2:         os.environ[envkey] = '1'
    2:         env_added.append(envkey)
       
    1: try:
    1:     from . import multiarray
       except ImportError as exc:
           import sys
           msg = """
       
       IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!
       
       Importing the numpy C-extensions failed. This error can happen for
       many reasons, often due to issues with your setup or how NumPy was
       installed.
       
       We have compiled some common reasons and troubleshooting tips at:
       
           https://numpy.org/devdocs/user/troubleshooting-importerror.html
       
       Please note and check the following:
       
         * The Python version is: Python%d.%d from "%s"
         * The NumPy version is: "%s"
       
       and make sure that they are the versions you expect.
       Please carefully study the documentation linked above for further help.
       
       Original error was: %s
       """ % (sys.version_info[0], sys.version_info[1], sys.executable,
               __version__, exc)
           raise ImportError(msg)
       finally:
    3:     for envkey in env_added:
    2:         del os.environ[envkey]
    1: del envkey
    1: del env_added
    1: del os
       
    1: from . import umath
       
       # Check that multiarray,umath are pure python modules wrapping
       # _multiarray_umath and not either of the old c-extension modules
    2: if not (hasattr(multiarray, '_multiarray_umath') and
    1:         hasattr(umath, '_multiarray_umath')):
           import sys
           path = sys.modules['numpy'].__path__
           msg = ("Something is wrong with the numpy installation. "
               "While importing we detected an older version of "
               "numpy in {}. One method of fixing this is to repeatedly uninstall "
               "numpy until none is found, then reinstall this version.")
           raise ImportError(msg.format(path))
       
    1: from . import numerictypes as nt
    1: multiarray.set_typeDict(nt.sctypeDict)
    1: from . import numeric
    1: from .numeric import *
    1: from . import fromnumeric
    1: from .fromnumeric import *
    1: from . import defchararray as char
    1: from . import records
    1: from . import records as rec
    1: from .records import record, recarray, format_parser
       # Note: module name memmap is overwritten by a class with same name
    1: from .memmap import *
    1: from .defchararray import chararray
    1: from . import function_base
    1: from .function_base import *
    1: from . import _machar
    1: from . import getlimits
    1: from .getlimits import *
    1: from . import shape_base
    1: from .shape_base import *
    1: from . import einsumfunc
    1: from .einsumfunc import *
    1: del nt
       
    1: from .numeric import absolute as abs
       
       # do this after everything else, to minimize the chance of this misleadingly
       # appearing in an import-time traceback
    1: from . import _add_newdocs
    1: from . import _add_newdocs_scalars
       # add these for module-freeze analysis (like PyInstaller)
    1: from . import _dtype_ctypes
    1: from . import _internal
    1: from . import _dtype
    1: from . import _methods
       
    1: __all__ = ['char', 'rec', 'memmap']
    1: __all__ += numeric.__all__
    1: __all__ += ['record', 'recarray', 'format_parser']
    1: __all__ += ['chararray']
    1: __all__ += function_base.__all__
    1: __all__ += getlimits.__all__
    1: __all__ += shape_base.__all__
    1: __all__ += einsumfunc.__all__
       
       # We used to use `np.core._ufunc_reconstruct` to unpickle. This is unnecessary,
       # but old pickles saved before 1.20 will be using it, and there is no reason
       # to break loading them.
    1: def _ufunc_reconstruct(module, name):
           # The `fromlist` kwarg is required to ensure that `mod` points to the
           # inner-most module rather than the parent package when module name is
           # nested. This makes it possible to pickle non-toplevel ufuncs such as
           # scipy.special.expit for instance.
           mod = __import__(module, fromlist=[name])
           return getattr(mod, name)
       
       
    1: def _ufunc_reduce(func):
           # Report the `__name__`. pickle will try to find the module. Note that
           # pickle supports for this `__name__` to be a `__qualname__`. It may
           # make sense to add a `__qualname__` to ufuncs, to allow this more
           # explicitly (Numba has ufuncs as attributes).
           # See also: https://github.com/dask/distributed/issues/3450
           return func.__name__
       
       
    1: def _DType_reconstruct(scalar_type):
           # This is a work-around to pickle type(np.dtype(np.float64)), etc.
           # and it should eventually be replaced with a better solution, e.g. when
           # DTypes become HeapTypes.
           return type(dtype(scalar_type))
       
       
    1: def _DType_reduce(DType):
           # As types/classes, most DTypes can simply be pickled by their name:
    1:     if not DType._legacy or DType.__module__ == "numpy.dtypes":
    1:         return DType.__name__
       
           # However, user defined legacy dtypes (like rational) do not end up in
           # `numpy.dtypes` as module and do not have a public class at all.
           # For these, we pickle them by reconstructing them from the scalar type:
           scalar_type = DType.type
           return _DType_reconstruct, (scalar_type,)
       
       
    1: def __getattr__(name):
           # Deprecated 2022-11-22, NumPy 1.25.
           if name == "MachAr":
               warnings.warn(
                   "The `np.core.MachAr` is considered private API (NumPy 1.24)",
                   DeprecationWarning, stacklevel=2,
               )
               return _machar.MachAr
           raise AttributeError(f"Module {__name__!r} has no attribute {name!r}")
       
       
    1: import copyreg
       
    1: copyreg.pickle(ufunc, _ufunc_reduce)
    1: copyreg.pickle(type(dtype), _DType_reduce, _DType_reconstruct)
       
       # Unclutter namespace (must keep _*_reconstruct for unpickling)
    1: del copyreg
    1: del _ufunc_reduce
    1: del _DType_reduce
       
    1: from numpy._pytesttester import PytestTester
    1: test = PytestTester(__name__)
    1: del PytestTester
