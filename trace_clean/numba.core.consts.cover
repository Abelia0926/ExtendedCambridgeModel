    1: from types import ModuleType
       
    1: import weakref
       
    1: from numba.core.errors import ConstantInferenceError, NumbaError
    1: from numba.core import ir
       
       
    2: class ConstantInference(object):
    1:     """
           A constant inference engine for a given interpreter.
           Inference inspects the IR to try and compute a compile-time constant for
           a variable.
       
           This shouldn't be used directly, instead call Interpreter.infer_constant().
           """
       
    1:     def __init__(self, func_ir):
               # Avoid cyclic references as some user-visible objects may be
               # held alive in the cache
   25:         self._func_ir = weakref.proxy(func_ir)
   25:         self._cache = {}
       
    1:     def infer_constant(self, name, loc=None):
               """
               Infer a constant value for the given variable *name*.
               If no value can be inferred, numba.errors.ConstantInferenceError
               is raised.
               """
  175:         if name not in self._cache:
  157:             try:
  157:                 self._cache[name] = (True, self._do_infer(name))
   23:             except ConstantInferenceError as exc:
                       # Store the exception args only, to avoid keeping
                       # a whole traceback alive.
   23:                 self._cache[name] = (False, (exc.__class__, exc.args))
  175:         success, val = self._cache[name]
  175:         if success:
  135:             return val
               else:
   40:             exc, args = val
   40:             if issubclass(exc, NumbaError):
   40:                 raise exc(*args, loc=loc)
                   else:
                       raise exc(*args)
       
    1:     def _fail(self, val):
               # The location here is set to None because `val` is the ir.Var name
               # and not the actual offending use of the var. When this is raised it is
               # caught in the flow control of `infer_constant` and the class and args
               # (the message) are captured and then raised again but with the location
               # set to the expression that caused the constant inference error.
   10:         raise ConstantInferenceError(
    5:             "Constant inference not possible for: %s" % (val,), loc=None)
       
    1:     def _do_infer(self, name):
  157:         if not isinstance(name, str):
                   raise TypeError("infer_constant() called with non-str %r"
                                   % (name,))
  157:         try:
  157:             defn = self._func_ir.get_definition(name)
    2:         except KeyError:
    4:             raise ConstantInferenceError(
    2:                 "no single definition for %r" % (name,))
  155:         try:
  155:             const = defn.infer_constant()
   52:         except ConstantInferenceError:
   52:             if isinstance(defn, ir.Expr):
   51:                 return self._infer_expr(defn)
    1:             self._fail(defn)
  103:         return const
       
    1:     def _infer_expr(self, expr):
               # Infer an expression: handle supported cases
   51:         if expr.op == 'call':
    1:             func = self.infer_constant(expr.func.name, loc=expr.loc)
    1:             return self._infer_call(func, expr)
   50:         elif expr.op == 'getattr':
   33:             value = self.infer_constant(expr.value.name, loc=expr.loc)
   31:             return self._infer_getattr(value, expr)
   17:         elif expr.op == 'build_list':
                   return [self.infer_constant(i.name, loc=expr.loc) for i in
                           expr.items]
   17:         elif expr.op == 'build_tuple':
   42:             return tuple(self.infer_constant(i.name, loc=expr.loc) for i in
   14:                          expr.items)
    3:         self._fail(expr)
       
    1:     def _infer_call(self, func, expr):
    1:         if expr.kws or expr.vararg:
    1:             self._fail(expr)
               # Check supported callables
               _slice = func in (slice,)
               _exc = isinstance(func, type) and issubclass(func, BaseException)
               if _slice or _exc:
                   args = [self.infer_constant(a.name, loc=expr.loc) for a in
                           expr.args]
                   if _slice:
                       return func(*args)
                   elif _exc:
                       # If the exception class is user defined it may implement a ctor
                       # that does not pass the args to the super. Therefore return the
                       # raw class and the args so this can be instantiated at the call
                       # site in the way the user source expects it to be.
                       return func, args
                   else:
                       assert 0, 'Unreachable'
       
               self._fail(expr)
       
    1:     def _infer_getattr(self, value, expr):
   31:         if isinstance(value, (ModuleType, type)):
                   # Allow looking up a constant on a class or module
   31:             try:
   31:                 return getattr(value, expr.attr)
                   except AttributeError:
                       pass
               self._fail(expr)
