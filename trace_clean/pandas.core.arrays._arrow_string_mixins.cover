    1: from __future__ import annotations
       
    1: from typing import Literal
       
    1: import numpy as np
       
    1: from pandas.compat import pa_version_under10p1
       
    1: if not pa_version_under10p1:
    1:     import pyarrow as pa
    1:     import pyarrow.compute as pc
       
       
    2: class ArrowStringArrayMixin:
    1:     _pa_array = None
       
    1:     def __init__(self, *args, **kwargs) -> None:
               raise NotImplementedError
       
    1:     def _str_pad(
               self,
               width: int,
    1:         side: Literal["left", "right", "both"] = "left",
    1:         fillchar: str = " ",
           ):
               if side == "left":
                   pa_pad = pc.utf8_lpad
               elif side == "right":
                   pa_pad = pc.utf8_rpad
               elif side == "both":
                   pa_pad = pc.utf8_center
               else:
                   raise ValueError(
                       f"Invalid side: {side}. Side must be one of 'left', 'right', 'both'"
                   )
               return type(self)(pa_pad(self._pa_array, width=width, padding=fillchar))
       
    1:     def _str_get(self, i: int):
               lengths = pc.utf8_length(self._pa_array)
               if i >= 0:
                   out_of_bounds = pc.greater_equal(i, lengths)
                   start = i
                   stop = i + 1
                   step = 1
               else:
                   out_of_bounds = pc.greater(-i, lengths)
                   start = i
                   stop = i - 1
                   step = -1
               not_out_of_bounds = pc.invert(out_of_bounds.fill_null(True))
               selected = pc.utf8_slice_codeunits(
                   self._pa_array, start=start, stop=stop, step=step
               )
               null_value = pa.scalar(
                   None, type=self._pa_array.type  # type: ignore[attr-defined]
               )
               result = pc.if_else(not_out_of_bounds, selected, null_value)
               return type(self)(result)
       
    1:     def _str_slice_replace(
    1:         self, start: int | None = None, stop: int | None = None, repl: str | None = None
           ):
               if repl is None:
                   repl = ""
               if start is None:
                   start = 0
               if stop is None:
                   stop = np.iinfo(np.int64).max
               return type(self)(pc.utf8_replace_slice(self._pa_array, start, stop, repl))
       
    1:     def _str_capitalize(self):
               return type(self)(pc.utf8_capitalize(self._pa_array))
       
    1:     def _str_title(self):
               return type(self)(pc.utf8_title(self._pa_array))
       
    1:     def _str_swapcase(self):
               return type(self)(pc.utf8_swapcase(self._pa_array))
       
    1:     def _str_removesuffix(self, suffix: str):
               ends_with = pc.ends_with(self._pa_array, pattern=suffix)
               removed = pc.utf8_slice_codeunits(self._pa_array, 0, stop=-len(suffix))
               result = pc.if_else(ends_with, removed, self._pa_array)
               return type(self)(result)
