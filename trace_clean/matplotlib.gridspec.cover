    1: r"""
       :mod:`~matplotlib.gridspec` contains classes that help to layout multiple
       `~.axes.Axes` in a grid-like pattern within a figure.
       
       The `GridSpec` specifies the overall grid structure. Individual cells within
       the grid are referenced by `SubplotSpec`\s.
       
       Often, users need not access this module directly, and can use higher-level
       methods like `~.pyplot.subplots`, `~.pyplot.subplot_mosaic` and
       `~.Figure.subfigures`. See the tutorial :ref:`arranging_axes` for a guide.
       """
       
    1: import copy
    1: import logging
    1: from numbers import Integral
       
    1: import numpy as np
       
    1: import matplotlib as mpl
    1: from matplotlib import _api, _pylab_helpers, _tight_layout
    1: from matplotlib.transforms import Bbox
       
    1: _log = logging.getLogger(__name__)
       
       
    2: class GridSpecBase:
    1:     """
           A base class of GridSpec that specifies the geometry of the grid
           that a subplot will be placed.
           """
       
    1:     def __init__(self, nrows, ncols, height_ratios=None, width_ratios=None):
               """
               Parameters
               ----------
               nrows, ncols : int
                   The number of rows and columns of the grid.
               width_ratios : array-like of length *ncols*, optional
                   Defines the relative widths of the columns. Each column gets a
                   relative width of ``width_ratios[i] / sum(width_ratios)``.
                   If not given, all columns will have the same width.
               height_ratios : array-like of length *nrows*, optional
                   Defines the relative heights of the rows. Each row gets a
                   relative height of ``height_ratios[i] / sum(height_ratios)``.
                   If not given, all rows will have the same height.
               """
    4:         if not isinstance(nrows, Integral) or nrows <= 0:
                   raise ValueError(
                       f"Number of rows must be a positive integer, not {nrows!r}")
    4:         if not isinstance(ncols, Integral) or ncols <= 0:
                   raise ValueError(
                       f"Number of columns must be a positive integer, not {ncols!r}")
    4:         self._nrows, self._ncols = nrows, ncols
    4:         self.set_height_ratios(height_ratios)
    4:         self.set_width_ratios(width_ratios)
       
    1:     def __repr__(self):
               height_arg = (f', height_ratios={self._row_height_ratios!r}'
                             if len(set(self._row_height_ratios)) != 1 else '')
               width_arg = (f', width_ratios={self._col_width_ratios!r}'
                            if len(set(self._col_width_ratios)) != 1 else '')
               return '{clsname}({nrows}, {ncols}{optionals})'.format(
                   clsname=self.__class__.__name__,
                   nrows=self._nrows,
                   ncols=self._ncols,
                   optionals=height_arg + width_arg,
                   )
       
   53:     nrows = property(lambda self: self._nrows,
    1:                      doc="The number of rows in the grid.")
  257:     ncols = property(lambda self: self._ncols,
    1:                      doc="The number of columns in the grid.")
       
    1:     def get_geometry(self):
               """
               Return a tuple containing the number of rows and columns in the grid.
               """
  336:         return self._nrows, self._ncols
       
    1:     def get_subplot_params(self, figure=None):
               # Must be implemented in subclasses
               pass
       
    1:     def new_subplotspec(self, loc, rowspan=1, colspan=1):
               """
               Create and return a `.SubplotSpec` instance.
       
               Parameters
               ----------
               loc : (int, int)
                   The position of the subplot in the grid as
                   ``(row_index, column_index)``.
               rowspan, colspan : int, default: 1
                   The number of rows and columns the subplot should span in the grid.
               """
               loc1, loc2 = loc
               subplotspec = self[loc1:loc1+rowspan, loc2:loc2+colspan]
               return subplotspec
       
    1:     def set_width_ratios(self, width_ratios):
               """
               Set the relative widths of the columns.
       
               *width_ratios* must be of length *ncols*. Each column gets a relative
               width of ``width_ratios[i] / sum(width_ratios)``.
               """
    4:         if width_ratios is None:
    4:             width_ratios = [1] * self._ncols
               elif len(width_ratios) != self._ncols:
                   raise ValueError('Expected the given number of width ratios to '
                                    'match the number of columns of the grid')
    4:         self._col_width_ratios = width_ratios
       
    1:     def get_width_ratios(self):
               """
               Return the width ratios.
       
               This is *None* if no width ratios have been set explicitly.
               """
               return self._col_width_ratios
       
    1:     def set_height_ratios(self, height_ratios):
               """
               Set the relative heights of the rows.
       
               *height_ratios* must be of length *nrows*. Each row gets a relative
               height of ``height_ratios[i] / sum(height_ratios)``.
               """
    4:         if height_ratios is None:
    4:             height_ratios = [1] * self._nrows
               elif len(height_ratios) != self._nrows:
                   raise ValueError('Expected the given number of height ratios to '
                                    'match the number of rows of the grid')
    4:         self._row_height_ratios = height_ratios
       
    1:     def get_height_ratios(self):
               """
               Return the height ratios.
       
               This is *None* if no height ratios have been set explicitly.
               """
               return self._row_height_ratios
       
    1:     def get_grid_positions(self, fig):
               """
               Return the positions of the grid cells in figure coordinates.
       
               Parameters
               ----------
               fig : `~matplotlib.figure.Figure`
                   The figure the grid should be applied to. The subplot parameters
                   (margins and spacing between subplots) are taken from *fig*.
       
               Returns
               -------
               bottoms, tops, lefts, rights : array
                   The bottom, top, left, right positions of the grid cells in
                   figure coordinates.
               """
  129:         nrows, ncols = self.get_geometry()
  129:         subplot_params = self.get_subplot_params(fig)
  129:         left = subplot_params.left
  129:         right = subplot_params.right
  129:         bottom = subplot_params.bottom
  129:         top = subplot_params.top
  129:         wspace = subplot_params.wspace
  129:         hspace = subplot_params.hspace
  129:         tot_width = right - left
  129:         tot_height = top - bottom
       
               # calculate accumulated heights of columns
  129:         cell_h = tot_height / (nrows + hspace*(nrows-1))
  129:         sep_h = hspace * cell_h
  129:         norm = cell_h * nrows / sum(self._row_height_ratios)
  717:         cell_heights = [r * norm for r in self._row_height_ratios]
  129:         sep_heights = [0] + ([sep_h] * (nrows-1))
  129:         cell_hs = np.cumsum(np.column_stack([sep_heights, cell_heights]).flat)
       
               # calculate accumulated widths of rows
  129:         cell_w = tot_width / (ncols + wspace*(ncols-1))
  129:         sep_w = wspace * cell_w
  129:         norm = cell_w * ncols / sum(self._col_width_ratios)
  717:         cell_widths = [r * norm for r in self._col_width_ratios]
  129:         sep_widths = [0] + ([sep_w] * (ncols-1))
  129:         cell_ws = np.cumsum(np.column_stack([sep_widths, cell_widths]).flat)
       
  129:         fig_tops, fig_bottoms = (top - cell_hs).reshape((-1, 2)).T
  129:         fig_lefts, fig_rights = (left + cell_ws).reshape((-1, 2)).T
  129:         return fig_bottoms, fig_tops, fig_lefts, fig_rights
       
    2:     @staticmethod
    2:     def _check_gridspec_exists(figure, nrows, ncols):
               """
               Check if the figure already has a gridspec with these dimensions,
               or create a new one
               """
    2:         for ax in figure.get_axes():
                   gs = ax.get_gridspec()
                   if gs is not None:
                       if hasattr(gs, 'get_topmost_subplotspec'):
                           # This is needed for colorbar gridspec layouts.
                           # This is probably OK because this whole logic tree
                           # is for when the user is doing simple things with the
                           # add_subplot command.  For complicated layouts
                           # like subgridspecs the proper gridspec is passed in...
                           gs = gs.get_topmost_subplotspec().get_gridspec()
                       if gs.get_geometry() == (nrows, ncols):
                           return gs
               # else gridspec not found:
    2:         return GridSpec(nrows, ncols, figure=figure)
       
    1:     def __getitem__(self, key):
               """Create and return a `.SubplotSpec` instance."""
   27:         nrows, ncols = self.get_geometry()
       
   27:         def _normalize(key, size, axis):  # Includes last index.
   52:             orig_key = key
   52:             if isinstance(key, slice):
    2:                 start, stop, _ = key.indices(size)
    2:                 if stop > start:
    2:                     return start, stop - 1
                       raise IndexError("GridSpec slice would result in no space "
                                        "allocated for subplot")
                   else:
   50:                 if key < 0:
                           key = key + size
   50:                 if 0 <= key < size:
   50:                     return key, key
                       elif axis is not None:
                           raise IndexError(f"index {orig_key} is out of bounds for "
                                            f"axis {axis} with size {size}")
                       else:  # flat index
                           raise IndexError(f"index {orig_key} is out of bounds for "
                                            f"GridSpec with size {size}")
       
   27:         if isinstance(key, tuple):
   25:             try:
   25:                 k1, k2 = key
                   except ValueError as err:
                       raise ValueError("Unrecognized subplot spec") from err
   50:             num1, num2 = np.ravel_multi_index(
   25:                 [_normalize(k1, nrows, 0), _normalize(k2, ncols, 1)],
   25:                 (nrows, ncols))
               else:  # Single key
    2:             num1, num2 = _normalize(key, nrows * ncols, None)
       
   27:         return SubplotSpec(self, num1, num2)
       
    2:     def subplots(self, *, sharex=False, sharey=False, squeeze=True,
    1:                  subplot_kw=None):
               """
               Add all subplots specified by this `GridSpec` to its parent figure.
       
               See `.Figure.subplots` for detailed documentation.
               """
       
    2:         figure = self.figure
       
    2:         if figure is None:
                   raise ValueError("GridSpec.subplots() only works for GridSpecs "
                                    "created with a parent figure")
       
    2:         if not isinstance(sharex, str):
    2:             sharex = "all" if sharex else "none"
    2:         if not isinstance(sharey, str):
    2:             sharey = "all" if sharey else "none"
       
    4:         _api.check_in_list(["all", "row", "col", "none", False, True],
    2:                            sharex=sharex, sharey=sharey)
    2:         if subplot_kw is None:
    2:             subplot_kw = {}
               # don't mutate kwargs passed by user...
    2:         subplot_kw = subplot_kw.copy()
       
               # Create array to hold all Axes.
    2:         axarr = np.empty((self._nrows, self._ncols), dtype=object)
    9:         for row in range(self._nrows):
   32:             for col in range(self._ncols):
   50:                 shared_with = {"none": None, "all": axarr[0, 0],
   25:                                "row": axarr[row, 0], "col": axarr[0, col]}
   25:                 subplot_kw["sharex"] = shared_with[sharex]
   25:                 subplot_kw["sharey"] = shared_with[sharey]
   75:                 axarr[row, col] = figure.add_subplot(
   50:                     self[row, col], **subplot_kw)
       
               # turn off redundant tick labeling
    2:         if sharex in ["col", "all"]:
                   for ax in axarr.flat:
                       ax._label_outer_xaxis(skip_non_rectangular_axes=True)
    2:         if sharey in ["row", "all"]:
                   for ax in axarr.flat:
                       ax._label_outer_yaxis(skip_non_rectangular_axes=True)
       
    2:         if squeeze:
                   # Discarding unneeded dimensions that equal 1.  If we only have one
                   # subplot, just return it instead of a 1-element array.
    2:             return axarr.item() if axarr.size == 1 else axarr.squeeze()
               else:
                   # Returned axis array will be always 2-d, even if nrows=ncols=1.
                   return axarr
       
       
    2: class GridSpec(GridSpecBase):
    1:     """
           A grid layout to place subplots within a figure.
       
           The location of the grid cells is determined in a similar way to
           `.SubplotParams` using *left*, *right*, *top*, *bottom*, *wspace*
           and *hspace*.
       
           Indexing a GridSpec instance returns a `.SubplotSpec`.
           """
    2:     def __init__(self, nrows, ncols, figure=None,
    1:                  left=None, bottom=None, right=None, top=None,
    1:                  wspace=None, hspace=None,
    1:                  width_ratios=None, height_ratios=None):
               """
               Parameters
               ----------
               nrows, ncols : int
                   The number of rows and columns of the grid.
       
               figure : `.Figure`, optional
                   Only used for constrained layout to create a proper layoutgrid.
       
               left, right, top, bottom : float, optional
                   Extent of the subplots as a fraction of figure width or height.
                   Left cannot be larger than right, and bottom cannot be larger than
                   top. If not given, the values will be inferred from a figure or
                   rcParams at draw time. See also `GridSpec.get_subplot_params`.
       
               wspace : float, optional
                   The amount of width reserved for space between subplots,
                   expressed as a fraction of the average axis width.
                   If not given, the values will be inferred from a figure or
                   rcParams when necessary. See also `GridSpec.get_subplot_params`.
       
               hspace : float, optional
                   The amount of height reserved for space between subplots,
                   expressed as a fraction of the average axis height.
                   If not given, the values will be inferred from a figure or
                   rcParams when necessary. See also `GridSpec.get_subplot_params`.
       
               width_ratios : array-like of length *ncols*, optional
                   Defines the relative widths of the columns. Each column gets a
                   relative width of ``width_ratios[i] / sum(width_ratios)``.
                   If not given, all columns will have the same width.
       
               height_ratios : array-like of length *nrows*, optional
                   Defines the relative heights of the rows. Each row gets a
                   relative height of ``height_ratios[i] / sum(height_ratios)``.
                   If not given, all rows will have the same height.
       
               """
    4:         self.left = left
    4:         self.bottom = bottom
    4:         self.right = right
    4:         self.top = top
    4:         self.wspace = wspace
    4:         self.hspace = hspace
    4:         self.figure = figure
       
    8:         super().__init__(nrows, ncols,
    4:                          width_ratios=width_ratios,
    4:                          height_ratios=height_ratios)
       
    1:     _AllowedKeys = ["left", "bottom", "right", "top", "wspace", "hspace"]
       
    1:     def update(self, **kwargs):
               """
               Update the subplot parameters of the grid.
       
               Parameters that are not explicitly given are not changed. Setting a
               parameter to *None* resets it to :rc:`figure.subplot.*`.
       
               Parameters
               ----------
               left, right, top, bottom : float or None, optional
                   Extent of the subplots as a fraction of figure width or height.
               wspace, hspace : float, optional
                   Spacing between the subplots as a fraction of the average subplot
                   width / height.
               """
               for k, v in kwargs.items():
                   if k in self._AllowedKeys:
                       setattr(self, k, v)
                   else:
                       raise AttributeError(f"{k} is an unknown keyword")
               for figmanager in _pylab_helpers.Gcf.figs.values():
                   for ax in figmanager.canvas.figure.axes:
                       if ax.get_subplotspec() is not None:
                           ss = ax.get_subplotspec().get_topmost_subplotspec()
                           if ss.get_gridspec() == self:
                               fig = ax.get_figure(root=False)
                               ax._set_position(ax.get_subplotspec().get_position(fig))
       
    1:     def get_subplot_params(self, figure=None):
               """
               Return the `.SubplotParams` for the GridSpec.
       
               In order of precedence the values are taken from
       
               - non-*None* attributes of the GridSpec
               - the provided *figure*
               - :rc:`figure.subplot.*`
       
               Note that the ``figure`` attribute of the GridSpec is always ignored.
               """
  129:         if figure is None:
                   kw = {k: mpl.rcParams["figure.subplot."+k]
                         for k in self._AllowedKeys}
                   subplotpars = SubplotParams(**kw)
               else:
  129:             subplotpars = copy.copy(figure.subplotpars)
       
 1032:         subplotpars.update(**{k: getattr(self, k) for k in self._AllowedKeys})
       
  129:         return subplotpars
       
    1:     def locally_modified_subplot_params(self):
               """
               Return a list of the names of the subplot parameters explicitly set
               in the GridSpec.
       
               This is a subset of the attributes of `.SubplotParams`.
               """
  408:         return [k for k in self._AllowedKeys if getattr(self, k)]
       
    2:     def tight_layout(self, figure, renderer=None,
    1:                      pad=1.08, h_pad=None, w_pad=None, rect=None):
               """
               Adjust subplot parameters to give specified padding.
       
               Parameters
               ----------
               figure : `.Figure`
                   The figure.
               renderer :  `.RendererBase` subclass, optional
                   The renderer to be used.
               pad : float
                   Padding between the figure edge and the edges of subplots, as a
                   fraction of the font-size.
               h_pad, w_pad : float, optional
                   Padding (height/width) between edges of adjacent subplots.
                   Defaults to *pad*.
               rect : tuple (left, bottom, right, top), default: None
                   (left, bottom, right, top) rectangle in normalized figure
                   coordinates that the whole subplots area (including labels) will
                   fit into. Default (None) is the whole figure.
               """
               if renderer is None:
                   renderer = figure._get_renderer()
               kwargs = _tight_layout.get_tight_layout_figure(
                   figure, figure.axes,
                   _tight_layout.get_subplotspec_list(figure.axes, grid_spec=self),
                   renderer, pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
               if kwargs:
                   self.update(**kwargs)
       
       
    2: class GridSpecFromSubplotSpec(GridSpecBase):
    1:     """
           GridSpec whose subplot layout parameters are inherited from the
           location specified by a given SubplotSpec.
           """
    1:     def __init__(self, nrows, ncols,
                        subplot_spec,
    1:                  wspace=None, hspace=None,
    1:                  height_ratios=None, width_ratios=None):
               """
               Parameters
               ----------
               nrows, ncols : int
                   Number of rows and number of columns of the grid.
               subplot_spec : SubplotSpec
                   Spec from which the layout parameters are inherited.
               wspace, hspace : float, optional
                   See `GridSpec` for more details. If not specified default values
                   (from the figure or rcParams) are used.
               height_ratios : array-like of length *nrows*, optional
                   See `GridSpecBase` for details.
               width_ratios : array-like of length *ncols*, optional
                   See `GridSpecBase` for details.
               """
               self._wspace = wspace
               self._hspace = hspace
               if isinstance(subplot_spec, SubplotSpec):
                   self._subplot_spec = subplot_spec
               else:
                   raise TypeError(
                                   "subplot_spec must be type SubplotSpec, "
                                   "usually from GridSpec, or axes.get_subplotspec.")
               self.figure = self._subplot_spec.get_gridspec().figure
               super().__init__(nrows, ncols,
                                width_ratios=width_ratios,
                                height_ratios=height_ratios)
       
    1:     def get_subplot_params(self, figure=None):
               """Return a dictionary of subplot layout parameters."""
               hspace = (self._hspace if self._hspace is not None
                         else figure.subplotpars.hspace if figure is not None
                         else mpl.rcParams["figure.subplot.hspace"])
               wspace = (self._wspace if self._wspace is not None
                         else figure.subplotpars.wspace if figure is not None
                         else mpl.rcParams["figure.subplot.wspace"])
       
               figbox = self._subplot_spec.get_position(figure)
               left, bottom, right, top = figbox.extents
       
               return SubplotParams(left=left, right=right,
                                    bottom=bottom, top=top,
                                    wspace=wspace, hspace=hspace)
       
    1:     def get_topmost_subplotspec(self):
               """
               Return the topmost `.SubplotSpec` instance associated with the subplot.
               """
               return self._subplot_spec.get_topmost_subplotspec()
       
       
    2: class SubplotSpec:
    1:     """
           The location of a subplot in a `GridSpec`.
       
           .. note::
       
               Likely, you will never instantiate a `SubplotSpec` yourself. Instead,
               you will typically obtain one from a `GridSpec` using item-access.
       
           Parameters
           ----------
           gridspec : `~matplotlib.gridspec.GridSpec`
               The GridSpec, which the subplot is referencing.
           num1, num2 : int
               The subplot will occupy the *num1*-th cell of the given
               *gridspec*.  If *num2* is provided, the subplot will span between
               *num1*-th cell and *num2*-th cell **inclusive**.
       
               The index starts from 0.
           """
    1:     def __init__(self, gridspec, num1, num2=None):
   27:         self._gridspec = gridspec
   27:         self.num1 = num1
   27:         self.num2 = num2
       
    1:     def __repr__(self):
               return (f"{self.get_gridspec()}["
                       f"{self.rowspan.start}:{self.rowspan.stop}, "
                       f"{self.colspan.start}:{self.colspan.stop}]")
       
    2:     @staticmethod
    2:     def _from_subplot_args(figure, args):
               """
               Construct a `.SubplotSpec` from a parent `.Figure` and either
       
               - a `.SubplotSpec` -- returned as is;
               - one or three numbers -- a MATLAB-style subplot specifier.
               """
   27:         if len(args) == 1:
   25:             arg, = args
   25:             if isinstance(arg, SubplotSpec):
   25:                 return arg
                   elif not isinstance(arg, Integral):
                       raise ValueError(
                           f"Single argument to subplot must be a three-digit "
                           f"integer, not {arg!r}")
                   try:
                       rows, cols, num = map(int, str(arg))
                   except ValueError:
                       raise ValueError(
                           f"Single argument to subplot must be a three-digit "
                           f"integer, not {arg!r}") from None
    2:         elif len(args) == 3:
    2:             rows, cols, num = args
               else:
                   raise _api.nargs_error("subplot", takes="1 or 3", given=len(args))
       
    2:         gs = GridSpec._check_gridspec_exists(figure, rows, cols)
    2:         if gs is None:
                   gs = GridSpec(rows, cols, figure=figure)
    2:         if isinstance(num, tuple) and len(num) == 2:
                   if not all(isinstance(n, Integral) for n in num):
                       raise ValueError(
                           f"Subplot specifier tuple must contain integers, not {num}"
                       )
                   i, j = num
               else:
    2:             if not isinstance(num, Integral) or num < 1 or num > rows*cols:
                       raise ValueError(
                           f"num must be an integer with 1 <= num <= {rows*cols}, "
                           f"not {num!r}"
                       )
    2:             i = j = num
    2:         return gs[i-1:j]
       
           # num2 is a property only to handle the case where it is None and someone
           # mutates num1.
       
    2:     @property
    2:     def num2(self):
  435:         return self.num1 if self._num2 is None else self._num2
       
    2:     @num2.setter
    2:     def num2(self, value):
   27:         self._num2 = value
       
    1:     def get_gridspec(self):
  588:         return self._gridspec
       
    1:     def get_geometry(self):
               """
               Return the subplot geometry as tuple ``(n_rows, n_cols, start, stop)``.
       
               The indices *start* and *stop* define the range of the subplot within
               the `GridSpec`. *stop* is inclusive (i.e. for a single cell
               ``start == stop``).
               """
               rows, cols = self.get_gridspec().get_geometry()
               return rows, cols, self.num1, self.num2
       
    2:     @property
    2:     def rowspan(self):
               """The rows spanned by this subplot, as a `range` object."""
  102:         ncols = self.get_gridspec().ncols
  102:         return range(self.num1 // ncols, self.num2 // ncols + 1)
       
    2:     @property
    2:     def colspan(self):
               """The columns spanned by this subplot, as a `range` object."""
  102:         ncols = self.get_gridspec().ncols
               # We explicitly support num2 referring to a column on num1's *left*, so
               # we must sort the column indices here so that the range makes sense.
  102:         c1, c2 = sorted([self.num1 % ncols, self.num2 % ncols])
  102:         return range(c1, c2 + 1)
       
    1:     def is_first_row(self):
               return self.rowspan.start == 0
       
    1:     def is_last_row(self):
               return self.rowspan.stop == self.get_gridspec().nrows
       
    1:     def is_first_col(self):
               return self.colspan.start == 0
       
    1:     def is_last_col(self):
               return self.colspan.stop == self.get_gridspec().ncols
       
    1:     def get_position(self, figure):
               """
               Update the subplot position from ``figure.subplotpars``.
               """
  129:         gridspec = self.get_gridspec()
  129:         nrows, ncols = gridspec.get_geometry()
  129:         rows, cols = np.unravel_index([self.num1, self.num2], (nrows, ncols))
  129:         fig_bottoms, fig_tops, fig_lefts, fig_rights = \
  129:             gridspec.get_grid_positions(figure)
       
  129:         fig_bottom = fig_bottoms[rows].min()
  129:         fig_top = fig_tops[rows].max()
  129:         fig_left = fig_lefts[cols].min()
  129:         fig_right = fig_rights[cols].max()
  129:         return Bbox.from_extents(fig_left, fig_bottom, fig_right, fig_top)
       
    1:     def get_topmost_subplotspec(self):
               """
               Return the topmost `SubplotSpec` instance associated with the subplot.
               """
   51:         gridspec = self.get_gridspec()
   51:         if hasattr(gridspec, "get_topmost_subplotspec"):
                   return gridspec.get_topmost_subplotspec()
               else:
   51:             return self
       
    1:     def __eq__(self, other):
               """
               Two SubplotSpecs are considered equal if they refer to the same
               position(s) in the same `GridSpec`.
               """
               # other may not even have the attributes we are checking.
               return ((self._gridspec, self.num1, self.num2)
                       == (getattr(other, "_gridspec", object()),
                           getattr(other, "num1", object()),
                           getattr(other, "num2", object())))
       
    1:     def __hash__(self):
  102:         return hash((self._gridspec, self.num1, self.num2))
       
    1:     def subgridspec(self, nrows, ncols, **kwargs):
               """
               Create a GridSpec within this subplot.
       
               The created `.GridSpecFromSubplotSpec` will have this `SubplotSpec` as
               a parent.
       
               Parameters
               ----------
               nrows : int
                   Number of rows in grid.
       
               ncols : int
                   Number of columns in grid.
       
               Returns
               -------
               `.GridSpecFromSubplotSpec`
       
               Other Parameters
               ----------------
               **kwargs
                   All other parameters are passed to `.GridSpecFromSubplotSpec`.
       
               See Also
               --------
               matplotlib.pyplot.subplots
       
               Examples
               --------
               Adding three subplots in the space occupied by a single subplot::
       
                   fig = plt.figure()
                   gs0 = fig.add_gridspec(3, 1)
                   ax1 = fig.add_subplot(gs0[0])
                   ax2 = fig.add_subplot(gs0[1])
                   gssub = gs0[2].subgridspec(1, 3)
                   for i in range(3):
                       fig.add_subplot(gssub[0, i])
               """
               return GridSpecFromSubplotSpec(nrows, ncols, self, **kwargs)
       
       
    2: class SubplotParams:
    1:     """
           Parameters defining the positioning of a subplots grid in a figure.
           """
       
    2:     def __init__(self, left=None, bottom=None, right=None, top=None,
    1:                  wspace=None, hspace=None):
               """
               Defaults are given by :rc:`figure.subplot.[name]`.
       
               Parameters
               ----------
               left : float
                   The position of the left edge of the subplots,
                   as a fraction of the figure width.
               right : float
                   The position of the right edge of the subplots,
                   as a fraction of the figure width.
               bottom : float
                   The position of the bottom edge of the subplots,
                   as a fraction of the figure height.
               top : float
                   The position of the top edge of the subplots,
                   as a fraction of the figure height.
               wspace : float
                   The width of the padding between subplots,
                   as a fraction of the average Axes width.
               hspace : float
                   The height of the padding between subplots,
                   as a fraction of the average Axes height.
               """
   28:         for key in ["left", "bottom", "right", "top", "wspace", "hspace"]:
   24:             setattr(self, key, mpl.rcParams[f"figure.subplot.{key}"])
    4:         self.update(left, bottom, right, top, wspace, hspace)
       
    2:     def update(self, left=None, bottom=None, right=None, top=None,
    1:                wspace=None, hspace=None):
               """
               Update the dimensions of the passed parameters. *None* means unchanged.
               """
  276:         if ((left if left is not None else self.left)
  138:                 >= (right if right is not None else self.right)):
                   raise ValueError('left cannot be >= right')
  276:         if ((bottom if bottom is not None else self.bottom)
  138:                 >= (top if top is not None else self.top)):
                   raise ValueError('bottom cannot be >= top')
  138:         if left is not None:
    5:             self.left = left
  138:         if right is not None:
    5:             self.right = right
  138:         if bottom is not None:
    5:             self.bottom = bottom
  138:         if top is not None:
    5:             self.top = top
  138:         if wspace is not None:
    4:             self.wspace = wspace
  138:         if hspace is not None:
    4:             self.hspace = hspace
