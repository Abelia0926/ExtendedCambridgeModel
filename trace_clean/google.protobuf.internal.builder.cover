       # Protocol Buffers - Google's data interchange format
       # Copyright 2008 Google Inc.  All rights reserved.
       #
       # Use of this source code is governed by a BSD-style
       # license that can be found in the LICENSE file or at
       # https://developers.google.com/open-source/licenses/bsd
       
    1: """Builds descriptors, message classes and services for generated _pb2.py.
       
       This file is only called in python generated _pb2.py files. It builds
       descriptors, message classes and services that users can directly use
       in generated code.
       """
       
    1: __author__ = 'jieluo@google.com (Jie Luo)'
       
    1: from google.protobuf.internal import enum_type_wrapper
    1: from google.protobuf.internal import python_message
    1: from google.protobuf import message as _message
    1: from google.protobuf import reflection as _reflection
    1: from google.protobuf import symbol_database as _symbol_database
       
    1: _sym_db = _symbol_database.Default()
       
       
    1: def BuildMessageAndEnumDescriptors(file_des, module):
         """Builds message and enum descriptors.
       
         Args:
           file_des: FileDescriptor of the .proto file
           module: Generated _pb2 module
         """
       
   75:   def BuildNestedDescriptors(msg_des, prefix):
  145:     for (name, nested_msg) in msg_des.nested_types_by_name.items():
   12:       module_name = prefix + name.upper()
   12:       module[module_name] = nested_msg
   12:       BuildNestedDescriptors(nested_msg, module_name + '_')
  162:     for enum_des in msg_des.enum_types:
   29:       module[prefix + enum_des.name.upper()] = enum_des
       
  196:   for (name, msg_des) in file_des.message_types_by_name.items():
  121:     module_name = '_' + name.upper()
  121:     module[module_name] = msg_des
  121:     BuildNestedDescriptors(msg_des, module_name + '_')
       
       
    1: def BuildTopDescriptorsAndMessages(file_des, module_name, module):
         """Builds top level descriptors and message classes.
       
         Args:
           file_des: FileDescriptor of the .proto file
           module_name: str, the name of generated _pb2 module
           module: Generated _pb2 module
         """
       
   75:   def BuildMessage(msg_des):
  133:     create_dict = {}
  145:     for (name, nested_msg) in msg_des.nested_types_by_name.items():
   12:       create_dict[name] = BuildMessage(nested_msg)
  133:     create_dict['DESCRIPTOR'] = msg_des
  133:     create_dict['__module__'] = module_name
  266:     message_class = _reflection.GeneratedProtocolMessageType(
  133:         msg_des.name, (_message.Message,), create_dict)
  133:     _sym_db.RegisterMessage(message_class)
  133:     return message_class
       
         # top level enums
   76:   for (name, enum_des) in file_des.enum_types_by_name.items():
    1:     module['_' + name.upper()] = enum_des
    1:     module[name] = enum_type_wrapper.EnumTypeWrapper(enum_des)
    5:     for enum_value in enum_des.values:
    4:       module[enum_value.name] = enum_value.number
       
         # top level extensions
   75:   for (name, extension_des) in file_des.extensions_by_name.items():
           module[name.upper() + '_FIELD_NUMBER'] = extension_des.number
           module[name] = extension_des
       
         # services
   75:   for (name, service) in file_des.services_by_name.items():
           module['_' + name.upper()] = service
       
         # Build messages.
  196:   for (name, msg_des) in file_des.message_types_by_name.items():
  121:     module[name] = BuildMessage(msg_des)
       
       
    1: def AddHelpersToExtensions(file_des):
         """no-op to keep old generated code work with new runtime.
       
         Args:
           file_des: FileDescriptor of the .proto file
         """
         # TODO: Remove this on-op
         return
       
       
    1: def BuildServices(file_des, module_name, module):
         """Builds services classes and services stub class.
       
         Args:
           file_des: FileDescriptor of the .proto file
           module_name: str, the name of generated _pb2 module
           module: Generated _pb2 module
         """
         # pylint: disable=g-import-not-at-top
         from google.protobuf import service_reflection
         # pylint: enable=g-import-not-at-top
         for (name, service) in file_des.services_by_name.items():
           module[name] = service_reflection.GeneratedServiceType(
               name, (),
               dict(DESCRIPTOR=service, __module__=module_name))
           stub_name = name + '_Stub'
           module[stub_name] = service_reflection.GeneratedServiceStubType(
               stub_name, (module[name],),
               dict(DESCRIPTOR=service, __module__=module_name))
