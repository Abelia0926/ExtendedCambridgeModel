    1: from abc import ABC, abstractmethod
       
    1: import numpy as np
       
    1: from ..ODESolvers.ode_solvers import euler_single_step, rk4_single_step
    1: from pymgipsim.Utilities.Scenario import scenario
    1: from pymgipsim.VirtualPatient.Models.Model import BaseModel
    1: from pymgipsim import Controllers
    1: from pymgipsim.Utilities.units_conversions_constants import UnitConversion
    1: from pymgipsim.VirtualPatient.Models import T1DM
    1: from tqdm import tqdm
       
    2: class SolverBase(ABC):
       
       
    1:     def __init__(self, scenario_instance: scenario, model: BaseModel):
       
               # Directory where the results should be stored
    3:         self.scenario_instance = scenario_instance
       
    3:         self.model = model
       
               # ODE solver function
    3:         self.set_solver(self.scenario_instance.settings.solver_name)
       
    1:     def set_controller(self, controller_name):
    3:         match controller_name:
    3:             case Controllers.OpenLoop.controller.Controller.name:
    3:                 self.controller = Controllers.OpenLoop.controller.Controller()
                   case Controllers.StochasticOpenLoop.controller.Controller.name:
                       self.controller = Controllers.StochasticOpenLoop.controller.Controller(self.scenario_instance)
                       self.model.inputs.uInsulin.sampled_signal[:,0] = self.controller.insulin.sampled_signal[:,0]
                       self.model.preprocessing()
                   case Controllers.SAPT.controller.Controller.name:
                       converted_glucose = lambda glucose: UnitConversion.glucose.concentration_mgdl_to_mmolL(glucose) if self.model.states.state_units[self.model.output_state] == 'mmol/L' else glucose
                       self.controller = Controllers.SAPT.controller.Controller(self.scenario_instance, converted_glucose(100.0), self.model.states.state_units)
                       match self.controller.model_name:
                           case T1DM.ExtHovorka.Model.name:
                               self.model.inputs.uInsulin.sampled_signal[:,0] = self.controller.basal.sampled_signal[:,0]
                           case T1DM.IVP.Model.name:
                               self.model.inputs.basal_insulin.sampled_signal[:, 0] = self.controller.basal.sampled_signal[:, 0]
                       self.model.preprocessing()
                   case Controllers.HCL0.controller.Controller.name:
                       self.controller = Controllers.HCL0.controller.Controller(self.scenario_instance)
                       self.model.inputs.uInsulin.sampled_signal[:, 0] = UnitConversion.insulin.Uhr_to_mUmin(np.asarray([x.demographic_info.basal_rate for x in self.controller.controllers]))
                       self.model.preprocessing()
                   case _:  # Default case
                       raise Exception("Undefined controller, Add it to the ModelSolver class.")
       
       
    1:     def set_solver(self, solver_name):
    5:         match solver_name:
    5:             case "RK4":
    5:                 self.ode_solver = rk4_single_step
                   case 'Euler':
                       self.ode_solver = euler_single_step
       
    2:     @abstractmethod
    2:     def do_simulation(self):
               pass
       
       
       
    2: class SingleScaleSolver(SolverBase):
       
    1:     name = "SingleScaleSolver"
       
    1:     def do_simulation(self, no_progress_bar):
       
       
               """ Initialize """
    3:         state_results = self.model.states.as_array
    3:         inputs = self.model.inputs.as_array
    3:         parameters = self.model.parameters.as_array
       
       
    3:         self.set_controller(self.scenario_instance.controller.name)
       
    3:         state_results[:, :, 0] = self.model.initial_conditions.as_array
 4320:         for sample in tqdm(range(1, inputs.shape[2]), disable = no_progress_bar):
       
 4317:             self.controller.run(measurements=state_results[:, self.model.output_state, sample - 1], inputs=inputs, states=state_results, sample=sample-1)
       
 8634:             state_results[:, :, sample] = self.ode_solver(
 4317:                 f=self.model.model,
 4317:                 time=float(sample),
 4317:                 h=float(self.model.sampling_time),
 4317:                 initial=state_results[:, :, sample - 1].copy(),
 4317:                 parameters=parameters,
 4317:                 inputs=inputs[:, :, sample - 1]
                   )
       
    3:         self.model.states.as_array = state_results
    3:         self.model.inputs.as_array = inputs
       
    3:         return state_results
