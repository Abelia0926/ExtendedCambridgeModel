       # util.py
    1: import contextlib
    1: import re
    1: from functools import lru_cache, wraps
    1: import inspect
    1: import itertools
    1: import types
    1: from typing import Callable, Union, Iterable, TypeVar, cast
    1: import warnings
       
    1: _bslash = chr(92)
    1: C = TypeVar("C", bound=Callable)
       
       
    2: class __config_flags:
    1:     """Internal class for defining compatibility and debugging flags"""
       
    1:     _all_names: list[str] = []
    1:     _fixed_names: list[str] = []
    1:     _type_desc = "configuration"
       
    2:     @classmethod
    2:     def _set(cls, dname, value):
               if dname in cls._fixed_names:
                   warnings.warn(
                       f"{cls.__name__}.{dname} {cls._type_desc} is {str(getattr(cls, dname)).upper()}"
                       f" and cannot be overridden",
                       stacklevel=3,
                   )
                   return
               if dname in cls._all_names:
                   setattr(cls, dname, value)
               else:
                   raise ValueError(f"no such {cls._type_desc} {dname!r}")
       
    1:     enable = classmethod(lambda cls, name: cls._set(name, True))
    1:     disable = classmethod(lambda cls, name: cls._set(name, False))
       
       
    2: @lru_cache(maxsize=128)
    2: def col(loc: int, strg: str) -> int:
           """
           Returns current column within a string, counting newlines as line separators.
           The first column is number 1.
       
           Note: the default parsing behavior is to expand tabs in the input string
           before starting the parsing process.  See
           :class:`ParserElement.parse_string` for more
           information on parsing strings containing ``<TAB>`` s, and suggested
           methods to maintain a consistent view of the parsed string, the parse
           location, and line and column positions within the parsed string.
           """
           s = strg
           return 1 if 0 < loc < len(s) and s[loc - 1] == "\n" else loc - s.rfind("\n", 0, loc)
       
       
    2: @lru_cache(maxsize=128)
    2: def lineno(loc: int, strg: str) -> int:
           """Returns current line number within a string, counting newlines as line separators.
           The first line is number 1.
       
           Note - the default parsing behavior is to expand tabs in the input string
           before starting the parsing process.  See :class:`ParserElement.parse_string`
           for more information on parsing strings containing ``<TAB>`` s, and
           suggested methods to maintain a consistent view of the parsed string, the
           parse location, and line and column positions within the parsed string.
           """
           return strg.count("\n", 0, loc) + 1
       
       
    2: @lru_cache(maxsize=128)
    2: def line(loc: int, strg: str) -> str:
           """
           Returns the line of text containing loc within a string, counting newlines as line separators.
           """
           last_cr = strg.rfind("\n", 0, loc)
           next_cr = strg.find("\n", loc)
           return strg[last_cr + 1 : next_cr] if next_cr >= 0 else strg[last_cr + 1 :]
       
       
    2: class _UnboundedCache:
    1:     def __init__(self):
               cache = {}
               cache_get = cache.get
               self.not_in_cache = not_in_cache = object()
       
               def get(_, key):
                   return cache_get(key, not_in_cache)
       
               def set_(_, key, value):
                   cache[key] = value
       
               def clear(_):
                   cache.clear()
       
               self.size = None
               self.get = types.MethodType(get, self)
               self.set = types.MethodType(set_, self)
               self.clear = types.MethodType(clear, self)
       
       
    2: class _FifoCache:
    1:     def __init__(self, size):
    1:         cache = {}
    1:         self.size = size
    1:         self.not_in_cache = not_in_cache = object()
    1:         cache_get = cache.get
    1:         cache_pop = cache.pop
       
    1:         def get(_, key):
   78:             return cache_get(key, not_in_cache)
       
    1:         def set_(_, key, value):
   78:             cache[key] = value
   78:             while len(cache) > size:
                       # pop oldest element in cache by getting the first key
                       cache_pop(next(iter(cache)))
       
    1:         def clear(_):
    8:             cache.clear()
       
    1:         self.get = types.MethodType(get, self)
    1:         self.set = types.MethodType(set_, self)
    1:         self.clear = types.MethodType(clear, self)
       
       
    2: class LRUMemo:
    1:     """
           A memoizing mapping that retains `capacity` deleted items
       
           The memo tracks retained items by their access order; once `capacity` items
           are retained, the least recently used item is discarded.
           """
       
    1:     def __init__(self, capacity):
               self._capacity = capacity
               self._active = {}
               self._memory = {}
       
    1:     def __getitem__(self, key):
               try:
                   return self._active[key]
               except KeyError:
                   self._memory[key] = self._memory.pop(key)
                   return self._memory[key]
       
    1:     def __setitem__(self, key, value):
               self._memory.pop(key, None)
               self._active[key] = value
       
    1:     def __delitem__(self, key):
               try:
                   value = self._active.pop(key)
               except KeyError:
                   pass
               else:
                   oldest_keys = list(self._memory)[: -(self._capacity + 1)]
                   for key_to_delete in oldest_keys:
                       self._memory.pop(key_to_delete)
                   self._memory[key] = value
       
    1:     def clear(self):
               self._active.clear()
               self._memory.clear()
       
       
    2: class UnboundedMemo(dict):
    1:     """
           A memoizing mapping that retains all deleted items
           """
       
    1:     def __delitem__(self, key):
               pass
       
       
    1: def _escape_regex_range_chars(s: str) -> str:
           # escape these chars: ^-[]
           for c in r"\^-[]":
               s = s.replace(c, _bslash + c)
           s = s.replace("\n", r"\n")
           s = s.replace("\t", r"\t")
           return str(s)
       
       
    2: class _GroupConsecutive:
    1:     """
           Used as a callable `key` for itertools.groupby to group
           characters that are consecutive:
               itertools.groupby("abcdejkmpqrs", key=IsConsecutive())
               yields:
                   (0, iter(['a', 'b', 'c', 'd', 'e']))
                   (1, iter(['j', 'k']))
                   (2, iter(['m']))
                   (3, iter(['p', 'q', 'r', 's']))
           """
       
    1:     def __init__(self) -> None:
   22:         self.prev = 0
   22:         self.counter = itertools.count()
   22:         self.value = -1
       
    1:     def __call__(self, char: str) -> int:
 2686:         c_int = ord(char)
 2686:         self.prev, prev = c_int, self.prev
 2686:         if c_int - prev > 1:
  134:             self.value = next(self.counter)
 2686:         return self.value
       
       
    4: def _collapse_string_to_ranges(
    3:     s: Union[str, Iterable[str]], re_escape: bool = True
    1: ) -> str:
           r"""
           Take a string or list of single-character strings, and return
           a string of the consecutive characters in that string collapsed
           into groups, as might be used in a regular expression '[a-z]'
           character set:
               'a' -> 'a' -> '[a]'
               'bc' -> 'bc' -> '[bc]'
               'defgh' -> 'd-h' -> '[d-h]'
               'fdgeh' -> 'd-h' -> '[d-h]'
               'jklnpqrtu' -> 'j-lnp-rtu' -> '[j-lnp-rtu]'
           Duplicates get collapsed out:
               'aaa' -> 'a' -> '[a]'
               'bcbccb' -> 'bc' -> '[bc]'
               'defghhgf' -> 'd-h' -> '[d-h]'
               'jklnpqrjjjtu' -> 'j-lnp-rtu' -> '[j-lnp-rtu]'
           Spaces are preserved:
               'ab c' -> ' a-c' -> '[ a-c]'
           Characters that are significant when defining regex ranges
           get escaped:
               'acde[]-' -> r'\-\[\]ac-e' -> r'[\-\[\]ac-e]'
           """
       
           # Developer notes:
           # - Do not optimize this code assuming that the given input string
           #   or internal lists will be short (such as in loading generators into
           #   lists to make it easier to find the last element); this method is also
           #   used to generate regex ranges for character sets in the pyparsing.unicode
           #   classes, and these can be _very_ long lists of strings
       
   24:     def escape_re_range_char(c: str) -> str:
  161:         return "\\" + c if c in r"\^-][" else c
       
   24:     def no_escape_re_range_char(c: str) -> str:
   74:         return c
       
   24:     if not re_escape:
   11:         escape_re_range_char = no_escape_re_range_char
       
   24:     ret = []
       
           # reduce input string to remove duplicates, and put in sorted order
   24:     s_chars: list[str] = sorted(set(s))
       
   24:     if len(s_chars) > 2:
               # find groups of characters that are consecutive (can be collapsed
               # down to "<first>-<last>")
  156:         for _, chars in itertools.groupby(s_chars, key=_GroupConsecutive()):
                   # _ is unimportant, is just used to identify groups
                   # chars is an iterator of one or more consecutive characters
                   # that comprise the current group
  134:             first = last = next(chars)
  268:             with contextlib.suppress(ValueError):
  134:                 *_, last = chars
       
  134:             if first == last:
                       # there was only a single char in this group
   37:                 ret.append(escape_re_range_char(first))
       
   97:             elif last == chr(ord(first) + 1):
                       # there were only 2 characters in this group
                       #   'a','b' -> 'ab'
    3:                 ret.append(f"{escape_re_range_char(first)}{escape_re_range_char(last)}")
       
                   else:
                       # there were > 2 characters in this group, make into a range
                       #   'c','d','e' -> 'c-e'
  188:                 ret.append(
   94:                     f"{escape_re_range_char(first)}-{escape_re_range_char(last)}"
                       )
           else:
               # only 1 or 2 chars were given to form into groups
               #   'a' -> ['a']
               #   'bc' -> ['b', 'c']
               #   'dg' -> ['d', 'g']
               # no need to list them with "-", just return as a list
               # (after escaping)
    8:         ret = [escape_re_range_char(c) for c in s_chars]
       
   24:     return "".join(ret)
       
       
    1: def _flatten(ll: Iterable) -> list:
           ret = []
           to_visit = [*ll]
           while to_visit:
               i = to_visit.pop(0)
               if isinstance(i, Iterable) and not isinstance(i, str):
                   to_visit[:0] = i
               else:
                   ret.append(i)
           return ret
       
       
    7: def make_compressed_re(
    1:     word_list: Iterable[str],
    2:     max_level: int = 2,
           *,
    2:     non_capturing_groups: bool = True,
    2:     _level: int = 1,
    1: ) -> str:
           """
           Create a regular expression string from a list of words, collapsing by common
           prefixes and optional suffixes.
       
           Calls itself recursively to build nested sublists for each group of suffixes
           that have a shared prefix.
           """
       
           def get_suffixes_from_common_prefixes(namelist: list[str]):
               if len(namelist) > 1:
                   for prefix, suffixes in itertools.groupby(namelist, key=lambda s: s[:1]):
                       yield prefix, sorted([s[1:] for s in suffixes], key=len, reverse=True)
               else:
                   yield namelist[0][0], [namelist[0][1:]]
       
           if _level == 1:
               if not word_list:
                   raise ValueError("no words given to make_compressed_re()")
       
               if "" in word_list:
                   raise ValueError("word list cannot contain empty string")
           else:
               # internal recursive call, just return empty string if no words
               if not word_list:
                   return ""
       
           # dedupe the word list
           word_list = list({}.fromkeys(word_list))
       
           if max_level == 0:
               if any(len(wd) > 1 for wd in word_list):
                   return "|".join(
                       sorted([re.escape(wd) for wd in word_list], key=len, reverse=True)
                   )
               else:
                   return f"[{''.join(_escape_regex_range_chars(wd) for wd in word_list)}]"
       
           ret = []
           sep = ""
           ncgroup = "?:" if non_capturing_groups else ""
       
           for initial, suffixes in get_suffixes_from_common_prefixes(sorted(word_list)):
               ret.append(sep)
               sep = "|"
       
               initial = re.escape(initial)
       
               trailing = ""
               if "" in suffixes:
                   trailing = "?"
                   suffixes.remove("")
       
               if len(suffixes) > 1:
                   if all(len(s) == 1 for s in suffixes):
                       ret.append(
                           f"{initial}[{''.join(_escape_regex_range_chars(s) for s in suffixes)}]{trailing}"
                       )
                   else:
                       if _level < max_level:
                           suffix_re = make_compressed_re(
                               sorted(suffixes),
                               max_level,
                               non_capturing_groups=non_capturing_groups,
                               _level=_level + 1,
                           )
                           ret.append(f"{initial}({ncgroup}{suffix_re}){trailing}")
                       else:
                           if all(len(s) == 1 for s in suffixes):
                               ret.append(
                                   f"{initial}[{''.join(_escape_regex_range_chars(s) for s in suffixes)}]{trailing}"
                               )
                           else:
                               suffixes.sort(key=len, reverse=True)
                               ret.append(
                                   f"{initial}({ncgroup}{'|'.join(re.escape(s) for s in suffixes)}){trailing}"
                               )
               else:
                   if suffixes:
                       suffix = re.escape(suffixes[0])
                       if len(suffix) > 1 and trailing:
                           ret.append(f"{initial}({ncgroup}{suffix}){trailing}")
                       else:
                           ret.append(f"{initial}{suffix}{trailing}")
                   else:
                       ret.append(initial)
           return "".join(ret)
       
       
    1: def replaced_by_pep8(compat_name: str, fn: C) -> C:
           # In a future version, uncomment the code in the internal _inner() functions
           # to begin emitting DeprecationWarnings.
       
           # Unwrap staticmethod/classmethod
   64:     fn = getattr(fn, "__func__", fn)
       
           # (Presence of 'self' arg in signature is used by explain_exception() methods, so we take
           # some extra steps to add it if present in decorated function.)
   64:     if ["self"] == list(inspect.signature(fn).parameters)[:1]:
       
   56:         @wraps(fn)
   56:         def _inner(self, *args, **kwargs):
                   # warnings.warn(
                   #     f"Deprecated - use {fn.__name__}", DeprecationWarning, stacklevel=2
                   # )
   10:             return fn(self, *args, **kwargs)
       
           else:
       
   72:         @wraps(fn)
   72:         def _inner(*args, **kwargs):
                   # warnings.warn(
                   #     f"Deprecated - use {fn.__name__}", DeprecationWarning, stacklevel=2
                   # )
   12:             return fn(*args, **kwargs)
       
   64:     _inner.__doc__ = f"""Deprecated - use :class:`{fn.__name__}`"""
   64:     _inner.__name__ = compat_name
   64:     _inner.__annotations__ = fn.__annotations__
   64:     if isinstance(fn, types.FunctionType):
   62:         _inner.__kwdefaults__ = fn.__kwdefaults__  # type: ignore [attr-defined]
    2:     elif isinstance(fn, type) and hasattr(fn, "__init__"):
    2:         _inner.__kwdefaults__ = fn.__init__.__kwdefaults__  # type: ignore [misc,attr-defined]
           else:
               _inner.__kwdefaults__ = None  # type: ignore [attr-defined]
   64:     _inner.__qualname__ = fn.__qualname__
   64:     return cast(C, _inner)
