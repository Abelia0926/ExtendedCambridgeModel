    1: from llvmlite.ir import Constant, IRBuilder
    1: import llvmlite.ir
       
    1: from numba.core import types, config, cgutils
       
       
    2: class _ArgManager(object):
    1:     """
           A utility class to handle argument unboxing and cleanup
           """
    1:     def __init__(self, context, builder, api, env_manager, endblk, nargs):
    2:         self.context = context
    2:         self.builder = builder
    2:         self.api = api
    2:         self.env_manager = env_manager
    2:         self.arg_count = 0  # how many function arguments have been processed
    2:         self.cleanups = []
    2:         self.nextblk = endblk
       
    1:     def add_arg(self, obj, ty):
               """
               Unbox argument and emit code that handles any error during unboxing.
               Args are cleaned up in reverse order of the parameter list, and
               cleanup begins as soon as unboxing of any argument fails. E.g. failure
               on arg2 will result in control flow going through:
       
                   arg2.err -> arg1.err -> arg0.err -> arg.end (returns)
               """
               # Unbox argument
   10:         native = self.api.to_native_value(ty, obj)
       
               # If an error occurred, go to the cleanup block for
               # the previous argument
   20:         with cgutils.if_unlikely(self.builder, native.is_error):
   10:             self.builder.branch(self.nextblk)
       
               # Define the cleanup function for the argument
   10:         def cleanup_arg():
                   # Native value reflection
   20:             self.api.reflect_native_value(ty, native.value, self.env_manager)
       
                   # Native value cleanup
   20:             if native.cleanup is not None:
                       native.cleanup()
       
                   # NRT cleanup
                   # (happens after the native value cleanup as the latter
                   #  may need the native value)
   20:             if self.context.enable_nrt:
   20:                 self.context.nrt.decref(self.builder, ty, native.value)
       
   10:         self.cleanups.append(cleanup_arg)
       
               # Write the on-error cleanup block for this argument
   20:         cleanupblk = self.builder.append_basic_block(
   10:             "arg%d.err" % self.arg_count)
   20:         with self.builder.goto_block(cleanupblk):
   10:             cleanup_arg()
                   # Go to next cleanup block
   10:             self.builder.branch(self.nextblk)
       
   10:         self.nextblk = cleanupblk
   10:         self.arg_count += 1
   10:         return native.value
       
    1:     def emit_cleanup(self):
               """
               Emit the cleanup code after returning from the wrapped function.
               """
   12:         for dtor in self.cleanups:
   10:             dtor()
       
       
    2: class _GilManager(object):
    1:     """
           A utility class to handle releasing the GIL and then re-acquiring it
           again.
           """
       
    1:     def __init__(self, builder, api, argman):
               self.builder = builder
               self.api = api
               self.argman = argman
               self.thread_state = api.save_thread()
       
    1:     def emit_cleanup(self):
               self.api.restore_thread(self.thread_state)
               self.argman.emit_cleanup()
       
       
    2: class PyCallWrapper(object):
    1:     def __init__(self, context, module, func, fndesc, env, call_helper,
                        release_gil):
    2:         self.context = context
    2:         self.module = module
    2:         self.func = func
    2:         self.fndesc = fndesc
    2:         self.env = env
    2:         self.release_gil = release_gil
       
    1:     def build(self):
    2:         wrapname = self.fndesc.llvm_cpython_wrapper_name
       
               # This is the signature of PyCFunctionWithKeywords
               # (see CPython's methodobject.h)
    2:         pyobj = self.context.get_argument_type(types.pyobject)
    2:         wrapty = llvmlite.ir.FunctionType(pyobj, [pyobj, pyobj, pyobj])
    2:         wrapper = llvmlite.ir.Function(self.module, wrapty, name=wrapname)
       
    2:         builder = IRBuilder(wrapper.append_basic_block('entry'))
       
               # - `closure` will receive the `self` pointer stored in the
               #   PyCFunction object (see _dynfunc.c)
               # - `args` and `kws` will receive the tuple and dict objects
               #   of positional and keyword arguments, respectively.
    2:         closure, args, kws = wrapper.args
    2:         closure.name = 'py_closure'
    2:         args.name = 'py_args'
    2:         kws.name = 'py_kws'
       
    2:         api = self.context.get_python_api(builder)
    2:         self.build_wrapper(api, builder, closure, args, kws)
       
    2:         return wrapper, api
       
    1:     def build_wrapper(self, api, builder, closure, args, kws):
    2:         nargs = len(self.fndesc.argtypes)
       
   14:         objs = [api.alloca_obj() for _ in range(nargs)]
    6:         parseok = api.unpack_tuple(args, self.fndesc.qualname,
    4:                                    nargs, nargs, *objs)
       
    4:         pred = builder.icmp_unsigned(
    2:             '==',
    2:             parseok,
    2:             Constant(parseok.type, None))
    4:         with cgutils.if_unlikely(builder, pred):
    2:             builder.ret(api.get_null_object())
       
               # Block that returns after erroneous argument unboxing/cleanup
    2:         endblk = builder.append_basic_block("arg.end")
    4:         with builder.goto_block(endblk):
    2:             builder.ret(api.get_null_object())
       
               # Get the Environment object
    2:         env_manager = self.get_env(api, builder)
       
    4:         cleanup_manager = _ArgManager(self.context, builder, api,
    2:                                       env_manager, endblk, nargs)
       
               # Compute the arguments to the compiled Numba function.
    2:         innerargs = []
   12:         for obj, ty in zip(objs, self.fndesc.argtypes):
   10:             if isinstance(ty, types.Omitted):
                       # It's an omitted value => ignore dummy Python object
                       innerargs.append(None)
                   else:
   10:                 val = cleanup_manager.add_arg(builder.load(obj), ty)
   10:                 innerargs.append(val)
       
    2:         if self.release_gil:
                   cleanup_manager = _GilManager(builder, api, cleanup_manager)
       
               # We elect to not inline the top level user function into the call
               # wrapper, this incurs an overhead of a function call, however, it
               # increases optimisation stability in that the optimised user function
               # is what will actually be run and it is this function that all the
               # inspection tools "see". Further, this makes optimisation "stable" in
               # that calling the user function from e.g. C or from this wrapper will
               # result in the same code executing, were inlining permitted this may
               # not be the case as the inline could trigger additional optimisation
               # as the function goes into the wrapper, this resulting in the executing
               # instruction stream being different from that of the instruction stream
               # present in the user function.
    4:         status, retval = self.context.call_conv.call_function(
    2:             builder, self.func, self.fndesc.restype, self.fndesc.argtypes,
    2:             innerargs, attrs=('noinline',))
               # Do clean up
    2:         self.debug_print(builder, "# callwrapper: emit_cleanup")
    2:         cleanup_manager.emit_cleanup()
    2:         self.debug_print(builder, "# callwrapper: emit_cleanup end")
       
               # Determine return status
    4:         with builder.if_then(status.is_ok, likely=True):
                   # Ok => return boxed Python value
    4:             with builder.if_then(status.is_none):
    2:                 api.return_none()
       
    2:             retty = self._simplified_return_type()
    2:             obj = api.from_native_return(retty, retval, env_manager)
    2:             builder.ret(obj)
       
               # Error out
    2:         self.context.call_conv.raise_error(builder, api, status)
    2:         builder.ret(api.get_null_object())
       
    1:     def get_env(self, api, builder):
               """Get the Environment object which is declared as a global
               in the module of the wrapped function.
               """
    2:         envname = self.context.get_env_name(self.fndesc)
    2:         gvptr = self.context.declare_env_global(builder.module, envname)
    2:         envptr = builder.load(gvptr)
       
    2:         env_body = self.context.get_env_body(builder, envptr)
       
    4:         api.emit_environment_sentry(envptr, return_pyobject=True,
    2:                                     debug_msg=self.fndesc.env_name)
    2:         env_manager = api.get_env_manager(self.env, env_body, envptr)
    2:         return env_manager
       
    1:     def _simplified_return_type(self):
               """
               The NPM callconv has already converted simplified optional types.
               We can simply use the value type from it.
               """
    2:         restype = self.fndesc.restype
               # Optional type
    2:         if isinstance(restype, types.Optional):
                   return restype.type
               else:
    2:             return restype
       
    1:     def debug_print(self, builder, msg):
    4:         if config.DEBUG_JIT:
                   self.context.debug_print(builder, "DEBUGJIT: {0}".format(msg))
