    1: import collections
    1: import operator
    1: import pathlib
    1: import zipfile
       
    1: from . import abc
       
    1: from ._itertools import unique_everseen
       
       
    1: def remove_duplicates(items):
           return iter(collections.OrderedDict.fromkeys(items))
       
       
    2: class FileReader(abc.TraversableResources):
    1:     def __init__(self, loader):
    1:         self.path = pathlib.Path(loader.path).parent
       
    1:     def resource_path(self, resource):
               """
               Return the file system path to prevent
               `resources.path()` from creating a temporary
               copy.
               """
               return str(self.path.joinpath(resource))
       
    1:     def files(self):
    1:         return self.path
       
       
    2: class ZipReader(abc.TraversableResources):
    1:     def __init__(self, loader, module):
               _, _, name = module.rpartition('.')
               self.prefix = loader.prefix.replace('\\', '/') + name + '/'
               self.archive = loader.archive
       
    1:     def open_resource(self, resource):
               try:
                   return super().open_resource(resource)
               except KeyError as exc:
                   raise FileNotFoundError(exc.args[0])
       
    1:     def is_resource(self, path):
               # workaround for `zipfile.Path.is_file` returning true
               # for non-existent paths.
               target = self.files().joinpath(path)
               return target.is_file() and target.exists()
       
    1:     def files(self):
               return zipfile.Path(self.archive, self.prefix)
       
       
    2: class MultiplexedPath(abc.Traversable):
    1:     """
           Given a series of Traversable objects, implement a merged
           version of the interface across all objects. Useful for
           namespace packages which may be multihomed at a single
           name.
           """
       
    1:     def __init__(self, *paths):
               self._paths = list(map(pathlib.Path, remove_duplicates(paths)))
               if not self._paths:
                   message = 'MultiplexedPath must contain at least one path'
                   raise FileNotFoundError(message)
               if not all(path.is_dir() for path in self._paths):
                   raise NotADirectoryError('MultiplexedPath only supports directories')
       
    1:     def iterdir(self):
               files = (file for path in self._paths for file in path.iterdir())
               return unique_everseen(files, key=operator.attrgetter('name'))
       
    1:     def read_bytes(self):
               raise FileNotFoundError(f'{self} is not a file')
       
    1:     def read_text(self, *args, **kwargs):
               raise FileNotFoundError(f'{self} is not a file')
       
    1:     def is_dir(self):
               return True
       
    1:     def is_file(self):
               return False
       
    1:     def joinpath(self, child):
               # first try to find child in current paths
               for file in self.iterdir():
                   if file.name == child:
                       return file
               # if it does not exist, construct it with the first path
               return self._paths[0] / child
       
    1:     __truediv__ = joinpath
       
    1:     def open(self, *args, **kwargs):
               raise FileNotFoundError(f'{self} is not a file')
       
    2:     @property
    2:     def name(self):
               return self._paths[0].name
       
    1:     def __repr__(self):
               paths = ', '.join(f"'{path}'" for path in self._paths)
               return f'MultiplexedPath({paths})'
       
       
    2: class NamespaceReader(abc.TraversableResources):
    1:     def __init__(self, namespace_path):
               if 'NamespacePath' not in str(namespace_path):
                   raise ValueError('Invalid path')
               self.path = MultiplexedPath(*list(namespace_path))
       
    1:     def resource_path(self, resource):
               """
               Return the file system path to prevent
               `resources.path()` from creating a temporary
               copy.
               """
               return str(self.path.joinpath(resource))
       
    1:     def files(self):
               return self.path
