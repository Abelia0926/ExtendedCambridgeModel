    1: import numpy as np
       
    1: import matplotlib as mpl
    1: from matplotlib import _api
    1: from matplotlib.axes import Axes
    1: import matplotlib.axis as maxis
    1: from matplotlib.patches import Circle
    1: from matplotlib.path import Path
    1: import matplotlib.spines as mspines
    1: from matplotlib.ticker import (
           Formatter, NullLocator, FixedLocator, NullFormatter)
    1: from matplotlib.transforms import Affine2D, BboxTransformTo, Transform
       
       
    2: class GeoAxes(Axes):
    1:     """An abstract base class for geographic projections."""
       
    2:     class ThetaFormatter(Formatter):
    1:         """
               Used to format the theta tick labels.  Converts the native
               unit of radians into degrees and adds a degree symbol.
               """
    1:         def __init__(self, round_to=1.0):
                   self._round_to = round_to
       
    1:         def __call__(self, x, pos=None):
                   degrees = round(np.rad2deg(x) / self._round_to) * self._round_to
                   return f"{degrees:0.0f}\N{DEGREE SIGN}"
       
    1:     RESOLUTION = 75
       
    1:     def _init_axis(self):
               self.xaxis = maxis.XAxis(self, clear=False)
               self.yaxis = maxis.YAxis(self, clear=False)
               self.spines['geo'].register_axis(self.yaxis)
       
    1:     def clear(self):
               # docstring inherited
               super().clear()
       
               self.set_longitude_grid(30)
               self.set_latitude_grid(15)
               self.set_longitude_grid_ends(75)
               self.xaxis.set_minor_locator(NullLocator())
               self.yaxis.set_minor_locator(NullLocator())
               self.xaxis.set_ticks_position('none')
               self.yaxis.set_ticks_position('none')
               self.yaxis.set_tick_params(label1On=True)
               # Why do we need to turn on yaxis tick labels, but
               # xaxis tick labels are already on?
       
               self.grid(mpl.rcParams['axes.grid'])
       
               Axes.set_xlim(self, -np.pi, np.pi)
               Axes.set_ylim(self, -np.pi / 2.0, np.pi / 2.0)
       
    1:     def _set_lim_and_transforms(self):
               # A (possibly non-linear) projection on the (already scaled) data
               self.transProjection = self._get_core_transform(self.RESOLUTION)
       
               self.transAffine = self._get_affine_transform()
       
               self.transAxes = BboxTransformTo(self.bbox)
       
               # The complete data transformation stack -- from data all the
               # way to display coordinates
               self.transData = \
                   self.transProjection + \
                   self.transAffine + \
                   self.transAxes
       
               # This is the transform for longitude ticks.
               self._xaxis_pretransform = \
                   Affine2D() \
                   .scale(1, self._longitude_cap * 2) \
                   .translate(0, -self._longitude_cap)
               self._xaxis_transform = \
                   self._xaxis_pretransform + \
                   self.transData
               self._xaxis_text1_transform = \
                   Affine2D().scale(1, 0) + \
                   self.transData + \
                   Affine2D().translate(0, 4)
               self._xaxis_text2_transform = \
                   Affine2D().scale(1, 0) + \
                   self.transData + \
                   Affine2D().translate(0, -4)
       
               # This is the transform for latitude ticks.
               yaxis_stretch = Affine2D().scale(np.pi * 2, 1).translate(-np.pi, 0)
               yaxis_space = Affine2D().scale(1, 1.1)
               self._yaxis_transform = \
                   yaxis_stretch + \
                   self.transData
               yaxis_text_base = \
                   yaxis_stretch + \
                   self.transProjection + \
                   (yaxis_space +
                    self.transAffine +
                    self.transAxes)
               self._yaxis_text1_transform = \
                   yaxis_text_base + \
                   Affine2D().translate(-8, 0)
               self._yaxis_text2_transform = \
                   yaxis_text_base + \
                   Affine2D().translate(8, 0)
       
    1:     def _get_affine_transform(self):
               transform = self._get_core_transform(1)
               xscale, _ = transform.transform((np.pi, 0))
               _, yscale = transform.transform((0, np.pi/2))
               return Affine2D() \
                   .scale(0.5 / xscale, 0.5 / yscale) \
                   .translate(0.5, 0.5)
       
    1:     def get_xaxis_transform(self, which='grid'):
               _api.check_in_list(['tick1', 'tick2', 'grid'], which=which)
               return self._xaxis_transform
       
    1:     def get_xaxis_text1_transform(self, pad):
               return self._xaxis_text1_transform, 'bottom', 'center'
       
    1:     def get_xaxis_text2_transform(self, pad):
               return self._xaxis_text2_transform, 'top', 'center'
       
    1:     def get_yaxis_transform(self, which='grid'):
               _api.check_in_list(['tick1', 'tick2', 'grid'], which=which)
               return self._yaxis_transform
       
    1:     def get_yaxis_text1_transform(self, pad):
               return self._yaxis_text1_transform, 'center', 'right'
       
    1:     def get_yaxis_text2_transform(self, pad):
               return self._yaxis_text2_transform, 'center', 'left'
       
    1:     def _gen_axes_patch(self):
               return Circle((0.5, 0.5), 0.5)
       
    1:     def _gen_axes_spines(self):
               return {'geo': mspines.Spine.circular_spine(self, (0.5, 0.5), 0.5)}
       
    1:     def set_yscale(self, *args, **kwargs):
               if args[0] != 'linear':
                   raise NotImplementedError
       
    1:     set_xscale = set_yscale
       
    1:     def set_xlim(self, *args, **kwargs):
               """Not supported. Please consider using Cartopy."""
               raise TypeError("Changing axes limits of a geographic projection is "
                               "not supported.  Please consider using Cartopy.")
       
    1:     set_ylim = set_xlim
    1:     set_xbound = set_xlim
    1:     set_ybound = set_ylim
       
    1:     def invert_xaxis(self):
               """Not supported. Please consider using Cartopy."""
               raise TypeError("Changing axes limits of a geographic projection is "
                               "not supported.  Please consider using Cartopy.")
       
    1:     invert_yaxis = invert_xaxis
       
    1:     def format_coord(self, lon, lat):
               """Return a format string formatting the coordinate."""
               lon, lat = np.rad2deg([lon, lat])
               ns = 'N' if lat >= 0.0 else 'S'
               ew = 'E' if lon >= 0.0 else 'W'
               return ('%f\N{DEGREE SIGN}%s, %f\N{DEGREE SIGN}%s'
                       % (abs(lat), ns, abs(lon), ew))
       
    1:     def set_longitude_grid(self, degrees):
               """
               Set the number of degrees between each longitude grid.
               """
               # Skip -180 and 180, which are the fixed limits.
               grid = np.arange(-180 + degrees, 180, degrees)
               self.xaxis.set_major_locator(FixedLocator(np.deg2rad(grid)))
               self.xaxis.set_major_formatter(self.ThetaFormatter(degrees))
       
    1:     def set_latitude_grid(self, degrees):
               """
               Set the number of degrees between each latitude grid.
               """
               # Skip -90 and 90, which are the fixed limits.
               grid = np.arange(-90 + degrees, 90, degrees)
               self.yaxis.set_major_locator(FixedLocator(np.deg2rad(grid)))
               self.yaxis.set_major_formatter(self.ThetaFormatter(degrees))
       
    1:     def set_longitude_grid_ends(self, degrees):
               """
               Set the latitude(s) at which to stop drawing the longitude grids.
               """
               self._longitude_cap = np.deg2rad(degrees)
               self._xaxis_pretransform \
                   .clear() \
                   .scale(1.0, self._longitude_cap * 2.0) \
                   .translate(0.0, -self._longitude_cap)
       
    1:     def get_data_ratio(self):
               """Return the aspect ratio of the data itself."""
               return 1.0
       
           ### Interactive panning
       
    1:     def can_zoom(self):
               """
               Return whether this Axes supports the zoom box button functionality.
       
               This Axes object does not support interactive zoom box.
               """
               return False
       
    1:     def can_pan(self):
               """
               Return whether this Axes supports the pan/zoom button functionality.
       
               This Axes object does not support interactive pan/zoom.
               """
               return False
       
    1:     def start_pan(self, x, y, button):
               pass
       
    1:     def end_pan(self):
               pass
       
    1:     def drag_pan(self, button, key, x, y):
               pass
       
       
    2: class _GeoTransform(Transform):
           # Factoring out some common functionality.
    1:     input_dims = output_dims = 2
       
    1:     def __init__(self, resolution):
               """
               Create a new geographical transform.
       
               Resolution is the number of steps to interpolate between each input
               line segment to approximate its path in curved space.
               """
               super().__init__()
               self._resolution = resolution
       
    1:     def __str__(self):
               return f"{type(self).__name__}({self._resolution})"
       
    1:     def transform_path_non_affine(self, path):
               # docstring inherited
               ipath = path.interpolated(self._resolution)
               return Path(self.transform(ipath.vertices), ipath.codes)
       
       
    2: class AitoffAxes(GeoAxes):
    1:     name = 'aitoff'
       
    2:     class AitoffTransform(_GeoTransform):
    1:         """The base Aitoff transform."""
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   longitude, latitude = values.T
       
                   # Pre-compute some values
                   half_long = longitude / 2.0
                   cos_latitude = np.cos(latitude)
       
                   alpha = np.arccos(cos_latitude * np.cos(half_long))
                   sinc_alpha = np.sinc(alpha / np.pi)  # np.sinc is sin(pi*x)/(pi*x).
       
                   x = (cos_latitude * np.sin(half_long)) / sinc_alpha
                   y = np.sin(latitude) / sinc_alpha
                   return np.column_stack([x, y])
       
    1:         def inverted(self):
                   # docstring inherited
                   return AitoffAxes.InvertedAitoffTransform(self._resolution)
       
    2:     class InvertedAitoffTransform(_GeoTransform):
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   # MGDTODO: Math is hard ;(
                   return np.full_like(values, np.nan)
       
    1:         def inverted(self):
                   # docstring inherited
                   return AitoffAxes.AitoffTransform(self._resolution)
       
    1:     def __init__(self, *args, **kwargs):
               self._longitude_cap = np.pi / 2.0
               super().__init__(*args, **kwargs)
               self.set_aspect(0.5, adjustable='box', anchor='C')
               self.clear()
       
    1:     def _get_core_transform(self, resolution):
               return self.AitoffTransform(resolution)
       
       
    2: class HammerAxes(GeoAxes):
    1:     name = 'hammer'
       
    2:     class HammerTransform(_GeoTransform):
    1:         """The base Hammer transform."""
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   longitude, latitude = values.T
                   half_long = longitude / 2.0
                   cos_latitude = np.cos(latitude)
                   sqrt2 = np.sqrt(2.0)
                   alpha = np.sqrt(1.0 + cos_latitude * np.cos(half_long))
                   x = (2.0 * sqrt2) * (cos_latitude * np.sin(half_long)) / alpha
                   y = (sqrt2 * np.sin(latitude)) / alpha
                   return np.column_stack([x, y])
       
    1:         def inverted(self):
                   # docstring inherited
                   return HammerAxes.InvertedHammerTransform(self._resolution)
       
    2:     class InvertedHammerTransform(_GeoTransform):
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   x, y = values.T
                   z = np.sqrt(1 - (x / 4) ** 2 - (y / 2) ** 2)
                   longitude = 2 * np.arctan((z * x) / (2 * (2 * z ** 2 - 1)))
                   latitude = np.arcsin(y*z)
                   return np.column_stack([longitude, latitude])
       
    1:         def inverted(self):
                   # docstring inherited
                   return HammerAxes.HammerTransform(self._resolution)
       
    1:     def __init__(self, *args, **kwargs):
               self._longitude_cap = np.pi / 2.0
               super().__init__(*args, **kwargs)
               self.set_aspect(0.5, adjustable='box', anchor='C')
               self.clear()
       
    1:     def _get_core_transform(self, resolution):
               return self.HammerTransform(resolution)
       
       
    2: class MollweideAxes(GeoAxes):
    1:     name = 'mollweide'
       
    2:     class MollweideTransform(_GeoTransform):
    1:         """The base Mollweide transform."""
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   def d(theta):
                       delta = (-(theta + np.sin(theta) - pi_sin_l)
                                / (1 + np.cos(theta)))
                       return delta, np.abs(delta) > 0.001
       
                   longitude, latitude = values.T
       
                   clat = np.pi/2 - np.abs(latitude)
                   ihigh = clat < 0.087  # within 5 degrees of the poles
                   ilow = ~ihigh
                   aux = np.empty(latitude.shape, dtype=float)
       
                   if ilow.any():  # Newton-Raphson iteration
                       pi_sin_l = np.pi * np.sin(latitude[ilow])
                       theta = 2.0 * latitude[ilow]
                       delta, large_delta = d(theta)
                       while np.any(large_delta):
                           theta[large_delta] += delta[large_delta]
                           delta, large_delta = d(theta)
                       aux[ilow] = theta / 2
       
                   if ihigh.any():  # Taylor series-based approx. solution
                       e = clat[ihigh]
                       d = 0.5 * (3 * np.pi * e**2) ** (1.0/3)
                       aux[ihigh] = (np.pi/2 - d) * np.sign(latitude[ihigh])
       
                   xy = np.empty(values.shape, dtype=float)
                   xy[:, 0] = (2.0 * np.sqrt(2.0) / np.pi) * longitude * np.cos(aux)
                   xy[:, 1] = np.sqrt(2.0) * np.sin(aux)
       
                   return xy
       
    1:         def inverted(self):
                   # docstring inherited
                   return MollweideAxes.InvertedMollweideTransform(self._resolution)
       
    2:     class InvertedMollweideTransform(_GeoTransform):
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   x, y = values.T
                   # from Equations (7, 8) of
                   # https://mathworld.wolfram.com/MollweideProjection.html
                   theta = np.arcsin(y / np.sqrt(2))
                   longitude = (np.pi / (2 * np.sqrt(2))) * x / np.cos(theta)
                   latitude = np.arcsin((2 * theta + np.sin(2 * theta)) / np.pi)
                   return np.column_stack([longitude, latitude])
       
    1:         def inverted(self):
                   # docstring inherited
                   return MollweideAxes.MollweideTransform(self._resolution)
       
    1:     def __init__(self, *args, **kwargs):
               self._longitude_cap = np.pi / 2.0
               super().__init__(*args, **kwargs)
               self.set_aspect(0.5, adjustable='box', anchor='C')
               self.clear()
       
    1:     def _get_core_transform(self, resolution):
               return self.MollweideTransform(resolution)
       
       
    2: class LambertAxes(GeoAxes):
    1:     name = 'lambert'
       
    2:     class LambertTransform(_GeoTransform):
    1:         """The base Lambert transform."""
       
    1:         def __init__(self, center_longitude, center_latitude, resolution):
                   """
                   Create a new Lambert transform.  Resolution is the number of steps
                   to interpolate between each input line segment to approximate its
                   path in curved Lambert space.
                   """
                   _GeoTransform.__init__(self, resolution)
                   self._center_longitude = center_longitude
                   self._center_latitude = center_latitude
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   longitude, latitude = values.T
                   clong = self._center_longitude
                   clat = self._center_latitude
                   cos_lat = np.cos(latitude)
                   sin_lat = np.sin(latitude)
                   diff_long = longitude - clong
                   cos_diff_long = np.cos(diff_long)
       
                   inner_k = np.maximum(  # Prevent divide-by-zero problems
                       1 + np.sin(clat)*sin_lat + np.cos(clat)*cos_lat*cos_diff_long,
                       1e-15)
                   k = np.sqrt(2 / inner_k)
                   x = k * cos_lat*np.sin(diff_long)
                   y = k * (np.cos(clat)*sin_lat - np.sin(clat)*cos_lat*cos_diff_long)
       
                   return np.column_stack([x, y])
       
    1:         def inverted(self):
                   # docstring inherited
                   return LambertAxes.InvertedLambertTransform(
                       self._center_longitude,
                       self._center_latitude,
                       self._resolution)
       
    2:     class InvertedLambertTransform(_GeoTransform):
       
    1:         def __init__(self, center_longitude, center_latitude, resolution):
                   _GeoTransform.__init__(self, resolution)
                   self._center_longitude = center_longitude
                   self._center_latitude = center_latitude
       
    1:         def transform_non_affine(self, values):
                   # docstring inherited
                   x, y = values.T
                   clong = self._center_longitude
                   clat = self._center_latitude
                   p = np.maximum(np.hypot(x, y), 1e-9)
                   c = 2 * np.arcsin(0.5 * p)
                   sin_c = np.sin(c)
                   cos_c = np.cos(c)
       
                   latitude = np.arcsin(cos_c*np.sin(clat) +
                                        ((y*sin_c*np.cos(clat)) / p))
                   longitude = clong + np.arctan(
                       (x*sin_c) / (p*np.cos(clat)*cos_c - y*np.sin(clat)*sin_c))
       
                   return np.column_stack([longitude, latitude])
       
    1:         def inverted(self):
                   # docstring inherited
                   return LambertAxes.LambertTransform(
                       self._center_longitude,
                       self._center_latitude,
                       self._resolution)
       
    1:     def __init__(self, *args, center_longitude=0, center_latitude=0, **kwargs):
               self._longitude_cap = np.pi / 2
               self._center_longitude = center_longitude
               self._center_latitude = center_latitude
               super().__init__(*args, **kwargs)
               self.set_aspect('equal', adjustable='box', anchor='C')
               self.clear()
       
    1:     def clear(self):
               # docstring inherited
               super().clear()
               self.yaxis.set_major_formatter(NullFormatter())
       
    1:     def _get_core_transform(self, resolution):
               return self.LambertTransform(
                   self._center_longitude,
                   self._center_latitude,
                   resolution)
       
    1:     def _get_affine_transform(self):
               return Affine2D() \
                   .scale(0.25) \
                   .translate(0.5, 0.5)
