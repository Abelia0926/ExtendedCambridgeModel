    1: import matplotlib.pyplot as plt
    1: import matplotlib as mpl
    1: import numpy as np
    1: from pymgipsim.Utilities.Scenario import scenario
    1: from pymgipsim.Utilities.units_conversions_constants import UnitConversion
    1: import pymgipsim.VirtualPatient.Models as Models
       
       
    1: """ 
       #######################################################################################################################
       Model States
       #######################################################################################################################
       """
       
    1: def plot_subject_response(loaded_model, scenario:scenario, patientidx):
    1:     mpl.rcParams["font.size"] = 12
    1:     fig = plt.figure(figsize = (8, 5))
    1:     cho_color = [0.259, 0.125, 0.329]
    1:     insulin_color = [0, 0.639, 0.224]
    1:     snack_color = [0.7, 0.7, 0.7]
    1:     glucose_color = [0.69, 0.235, 0.129]
    1:     sglt2i_color = [0.902, 0.941, 0]
    1:     heart_rate_color = [1, 0.498, 0.545]#[1, 0.325, 0.392]
    1:     time_axis = loaded_model.time.as_unix/60.0
    1:     arrow_width = 0.5
    1:     arrow_height = 5
       
           
    1:     glucose = np.zeros_like(loaded_model.states.as_array[:, loaded_model.glucose_state, :])
       
    1:     match loaded_model.name:
    1:         case Models.T1DM.ExtHovorka.Model.name:
    1:             glucose = UnitConversion.glucose.concentration_mmolL_to_mgdL(loaded_model.states.as_array[patientidx, loaded_model.glucose_state, :] / loaded_model.parameters.VG[patientidx])
                       
               case Models.T1DM.IVP.Model.name:
                   glucose = loaded_model.states.as_array[patientidx, loaded_model.glucose_state, :]
       
    1:     glucose_unit = "mg/dL"
       
       
       
           
    1:     try:
    1:         hr_times = scenario.inputs.heart_rate.start_time[patientidx]
    1:         hr_magnitudes = scenario.inputs.heart_rate.magnitude[patientidx]
    1:         hr_times = np.asarray(hr_times) / 60
    1:         hr_magnitudes = np.asarray(hr_magnitudes)
    1:         hr_times = np.append(hr_times, time_axis[-1])
    1:         hr_magnitudes = np.append(hr_magnitudes, hr_magnitudes[-1])
    1:         plt.fill_between(hr_times, hr_magnitudes, color = heart_rate_color, label='Heart rate [BPM]', alpha=0.4)
           except:
               pass
       
    1:     try:
    1:         if scenario.controller.name == "OpenLoop" or scenario.controller.name == "StochasticOpenLoop":
    1:             label = True
    4:             for magnitude,start_time in zip(scenario.inputs.bolus_insulin.magnitude[patientidx], scenario.inputs.bolus_insulin.start_time[patientidx]):
    3:                 if label:
    1:                     label = False
    1:                     plt.arrow(start_time/60.0, 0, 0, magnitude,head_width=arrow_width,head_length=arrow_height, facecolor=insulin_color, edgecolor=insulin_color, label='Bolus [U]')
                       else:
    2:                     plt.arrow(start_time/60.0, 0, 0, magnitude, head_width=arrow_width, head_length=arrow_height,facecolor=insulin_color, edgecolor=insulin_color)
               else:
                   match loaded_model.name:
                       case Models.T1DM.ExtHovorka.Model.name:
                           plt.fill_between(time_axis, UnitConversion.insulin.mUmin_to_Uhr(loaded_model.inputs.as_array[patientidx, 3, :]), color=insulin_color, label='Insulin infusion rate [U/hr]')
                       case Models.T1DM.IVP.Model.name:
                           plt.fill_between(time_axis, UnitConversion.insulin.uUmin_to_Uhr(loaded_model.inputs.as_array[patientidx, 1, :]),color=insulin_color, label='Insulin infusion rate [U/hr]')
           except:
               pass
           
    1:     try:
    1:         label = True
    4:         for magnitude,start_time in zip(scenario.inputs.meal_carb.magnitude[patientidx], scenario.inputs.meal_carb.start_time[patientidx]):
    3:             if label:
    1:                 plt.arrow(start_time/60.0, 0, 0, magnitude,head_width=arrow_width, head_length=arrow_height, facecolor=cho_color, edgecolor=cho_color, label='Meal carb [g]')
    1:                 label = False
                   else:
    2:                 plt.arrow(start_time/60.0, 0, 0, magnitude, head_width=arrow_width, head_length=arrow_height,facecolor=cho_color, edgecolor=cho_color)
           except:
               pass
       
       
    1:     try:
    1:         label = True
    3:         for magnitude,start_time in zip(scenario.inputs.snack_carb.magnitude[patientidx], scenario.inputs.snack_carb.start_time[patientidx]):
    2:             if label:
    1:                 label = False
    1:                 plt.arrow(start_time/60.0, 0, 0, magnitude,head_width=arrow_width,head_length=arrow_height, facecolor=snack_color, edgecolor=snack_color, label='Snack carb [g]')
                   else:
    1:                 plt.arrow(start_time/60.0, 0, 0, magnitude, head_width=arrow_width,head_length=arrow_height, facecolor=snack_color, edgecolor=snack_color)
           except:
               pass
    1:     try:
    1:         label = True
    1:         for magnitude,start_time in zip(scenario.inputs.sgl2i.magnitude[patientidx], scenario.inputs.sgl2i.start_time[patientidx]):
                   if magnitude>0.0:
                       if label:
                           label = False
                           plt.arrow(start_time/60.0, 0, 0, magnitude,head_width=arrow_width,head_length=arrow_height, facecolor=sglt2i_color, edgecolor=sglt2i_color, label='SGLT2i [mg]')
                       else:
                           plt.arrow(start_time/60.0, 0, 0, magnitude, head_width=arrow_width, head_length=arrow_height,facecolor=sglt2i_color, edgecolor=sglt2i_color)
    1:     except:
    1:         pass
       
    1:     plt.plot(time_axis, glucose, color=glucose_color, label="Blood glucose ["+glucose_unit+"]")
    1:     plt.grid()
           # plt.ylim((0, 400))
    1:     plt.xlabel('Time [h]')
    1:     plt.ylabel('Magnitude')
    1:     plt.xlim([0, time_axis[-1]])
    1:     if np.max(glucose) < 250.0:
    1:         plt.ylim([0.0, 250.0])
           else:
               plt.ylim([0.0, np.max(glucose)])
    1:     try:
    1:         plt.title(scenario.patient.model.name+" "+scenario.patient.files[patientidx].replace(".json",""))
           except:
               pass
    1:     plt.legend(loc='upper right')
       
    1:     return fig
       
       
    1: def plot_bgc(time, glucose, figsize, figcolor):
           """
           Plot the blood glucose concentration (BGC) over time.
       
           Parameters:
           - formatted_time: np.ndarray
               Time array for plotting.
           - formatted_glucose: np.ndarray
               2D array containing blood glucose data for different subjects.
       
           Returns:
           - fig: matplotlib.figure.Figure
               The created matplotlib figure.
       
       
           """
       
    1:     mpl.rcParams["font.size"] = 18
    1:     fig = plt.figure(figsize = figsize)
       
    1:     glucose_mean = glucose.mean(axis=0)
    1:     glucose_std = glucose.std(axis=0)
       
    1:     time = time/60.0
       
    1:     plt.plot(time, glucose_mean, color=figcolor, linewidth=1.8)#[0.961*0.5, 0.867*0.5, 0.208*0.5]
    1:     plt.fill_between(time, glucose_mean - glucose_std, glucose_mean + glucose_std, alpha=0.4, color=figcolor)#[0.961, 0.867, 0.208],label='Without SGL2Ti'
    1:     plt.legend()
    1:     plt.grid()
    1:     plt.title("Blood glucose response")
    1:     plt.xlabel('Time [h]')
    1:     plt.ylabel('Blood glucose [mg/dL]')
    1:     plt.ylim([50.0, 250.0])
    1:     plt.xlim([0.0, time[-1]])
       
    1:     return fig
       
       
    1: def plot_all_states(time, all_states, state_units, state_names, figsize, figcolor):
           """
           Plot all states over time in subplots.
       
           Parameters:
           - formatted_time: np.ndarray
               Time array for plotting.
           - all_states: np.ndarray
               4D array containing state data for different days and variables.
           - state_names: list
               List of state variable names.
           - state_units: list
               List of units corresponding to state variables.
       
           Returns:
           - fig: matplotlib.figure.Figure
               The created matplotlib figure.
           """
    1:     mpl.rcParams["font.size"] = 10
    1:     rows = int(np.sqrt(all_states.shape[1]))
    1:     cols = rows
       
    1:     fig, axes = plt.subplots(rows, cols, figsize=figsize)
       
    1:     state_num = 0
    5:     for row_num in range(rows):
   20:         for col_num in range(cols):
   16:             mean = all_states[:, state_num, :].mean(axis=0)
   16:             std = all_states[:, state_num, :].std(axis=0)
       
   16:             axes[row_num, col_num].plot(time, mean, color=figcolor)
   16:             axes[row_num, col_num].fill_between(time, mean - std, mean + std, alpha=0.4, color=figcolor)
   16:             axes[row_num, col_num].set_xlabel('Time (h)')
   16:             axes[row_num, col_num].set_ylabel(state_units[state_num])
   16:             axes[row_num, col_num].set_title(state_names[state_num])
       
   16:             state_num += 1
       
    1:     plt.xlabel('Time (h)')
       
    1:     plt.tight_layout()
       
    1:     return fig
       
       
    1: def plot_bw(time, bw_state, bw_unit, state_name, figsize, figcolor):
       
           fig = plt.figure(figsize = figsize)
       
           mean = bw_state.mean(axis = 0)[0]
           std = bw_state.std(axis = 0)[0]
       
           plt.plot(time, mean, color=figcolor)
           plt.fill_between(time, mean - std, mean + std, alpha=0.4, color=figcolor)
       
           plt.xlabel('Days')
           plt.ylabel(f'{state_name} ({bw_unit})')
           plt.ylim((0.9 * np.min(mean - std), 1.1 * np.max(mean + std)))
       
           return fig
       
       
    1: """ 
       #######################################################################################################################
       Inputs
       #######################################################################################################################
       """
       
    1: def plot_input_signals(time, input_array, input_names):
       
    1:     num_inputs = input_array.shape[1]
       
    1:     if num_inputs > 1:
    1:         num_rows = np.ceil(np.sqrt(num_inputs)).astype(int)
    1:         num_cols = num_rows.astype(int)
       
    1:     fig, axes = plt.subplots(num_rows, num_cols)
       
    1:     input_num = 0
    4:     for row in range(num_rows):
   12:         for col in range(num_cols):
       
    9:             if input_num < num_inputs:
       
    5:                 mean = input_array[:, input_num, :].mean(axis = 0)
    5:                 std = input_array[:, input_num, :].std(axis = 0)
       
    5:                 axes[row, col].plot(time, mean)
    5:                 axes[row, col].fill_between(time, mean - std, mean + std, alpha = 0.4)
    5:                 axes[row, col].set_xlabel('Time (min)')
    5:                 axes[row, col].set_title(f"{input_names[input_num]}")
    5:                 axes[row, col].set_ylim([0, 1.1*max(mean + std)])
       
    9:             input_num += 1
       
    1:     fig.tight_layout()
       
    1:     return fig
