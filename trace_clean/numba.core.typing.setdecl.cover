    1: import operator
       
    1: from numba.core import types
    1: from .templates import (ConcreteTemplate, AbstractTemplate, AttributeTemplate,
                               CallableTemplate,  Registry, signature, bound_function,
                               make_callable_template)
       # Ensure set is typed as a collection as well
    1: from numba.core.typing import collections
       
       
    1: registry = Registry()
    1: infer = registry.register
    1: infer_global = registry.register_global
    1: infer_getattr = registry.register_attr
       
       
    3: @infer_global(set)
    2: class SetBuiltin(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               assert not kws
               if args:
                   # set(iterable)
                   iterable, = args
                   if isinstance(iterable, types.IterableType):
                       dtype = iterable.iterator_type.yield_type
                       if isinstance(dtype, types.Hashable):
                           return signature(types.Set(dtype), iterable)
               else:
                   # set()
                   return signature(types.Set(types.undefined))
       
       
    3: @infer_getattr
    2: class SetAttribute(AttributeTemplate):
    1:     key = types.Set
       
    2:     @bound_function("set.add")
    2:     def resolve_add(self, set, args, kws):
               item, = args
               assert not kws
               unified = self.context.unify_pairs(set.dtype, item)
               if unified is not None:
                   sig = signature(types.none, unified)
                   sig = sig.replace(recvr=set.copy(dtype=unified))
                   return sig
       
    2:     @bound_function("set.update")
    2:     def resolve_update(self, set, args, kws):
               iterable, = args
               assert not kws
               if not isinstance(iterable, types.IterableType):
                   return
       
               dtype = iterable.iterator_type.yield_type
               unified = self.context.unify_pairs(set.dtype, dtype)
               if unified is not None:
                   sig = signature(types.none, iterable)
                   sig = sig.replace(recvr=set.copy(dtype=unified))
                   return sig
       
    1:     def _resolve_operator(self, set, args, kws):
               assert not kws
               iterable, = args
               # Set arguments only supported for now
               # (note we can mix non-reflected and reflected arguments)
               if isinstance(iterable, types.Set) and iterable.dtype == set.dtype:
                   return signature(set, iterable)
       
    1:     def _resolve_comparator(self, set, args, kws):
               assert not kws
               arg, = args
               if arg == set:
                   return signature(types.boolean, arg)
       
       
    2: class SetOperator(AbstractTemplate):
       
    1:     def generic(self, args, kws):
   52:         if len(args) != 2:
    4:             return
   48:         a, b = args
   48:         if (isinstance(a, types.Set) and isinstance(b, types.Set)
                   and a.dtype == b.dtype):
                   return signature(a, *args)
       
       
    2: class SetComparison(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               if len(args) != 2:
                   return
               a, b = args
               if isinstance(a, types.Set) and isinstance(b, types.Set) and a == b:
                   return signature(types.boolean, *args)
       
       
    3: for op_key in (operator.add, operator.invert):
    6:     @infer_global(op_key)
    4:     class ConcreteSetOperator(SetOperator):
    2:         key = op_key
       
       
    2: for op_key in (operator.iadd,):
    3:     @infer_global(op_key)
    2:     class ConcreteInplaceSetOperator(SetOperator):
    1:         key = op_key
