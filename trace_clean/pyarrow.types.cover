       # Licensed to the Apache Software Foundation (ASF) under one
       # or more contributor license agreements.  See the NOTICE file
       # distributed with this work for additional information
       # regarding copyright ownership.  The ASF licenses this file
       # to you under the Apache License, Version 2.0 (the
       # "License"); you may not use this file except in compliance
       # with the License.  You may obtain a copy of the License at
       #
       #   http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing,
       # software distributed under the License is distributed on an
       # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
       # KIND, either express or implied.  See the License for the
       # specific language governing permissions and limitations
       # under the License.
       
       # Tools for dealing with Arrow type metadata in Python
       
       
    1: from pyarrow.lib import (is_boolean_value,  # noqa
                                is_integer_value,
                                is_float_value)
       
    1: import pyarrow.lib as lib
    1: from pyarrow.util import doc
       
       
    2: _SIGNED_INTEGER_TYPES = {lib.Type_INT8, lib.Type_INT16, lib.Type_INT32,
    1:                          lib.Type_INT64}
    2: _UNSIGNED_INTEGER_TYPES = {lib.Type_UINT8, lib.Type_UINT16, lib.Type_UINT32,
    1:                            lib.Type_UINT64}
    1: _INTEGER_TYPES = _SIGNED_INTEGER_TYPES | _UNSIGNED_INTEGER_TYPES
    1: _FLOATING_TYPES = {lib.Type_HALF_FLOAT, lib.Type_FLOAT, lib.Type_DOUBLE}
    2: _DECIMAL_TYPES = {lib.Type_DECIMAL32, lib.Type_DECIMAL64, lib.Type_DECIMAL128,
    1:                   lib.Type_DECIMAL256}
    1: _DATE_TYPES = {lib.Type_DATE32, lib.Type_DATE64}
    1: _TIME_TYPES = {lib.Type_TIME32, lib.Type_TIME64}
    1: _INTERVAL_TYPES = {lib.Type_INTERVAL_MONTH_DAY_NANO}
    5: _TEMPORAL_TYPES = ({lib.Type_TIMESTAMP,
    3:                     lib.Type_DURATION} | _TIME_TYPES | _DATE_TYPES |
    1:                    _INTERVAL_TYPES)
    1: _UNION_TYPES = {lib.Type_SPARSE_UNION, lib.Type_DENSE_UNION}
    3: _NESTED_TYPES = {lib.Type_LIST, lib.Type_FIXED_SIZE_LIST, lib.Type_LARGE_LIST,
    1:                  lib.Type_LIST_VIEW, lib.Type_LARGE_LIST_VIEW,
    2:                  lib.Type_STRUCT, lib.Type_MAP} | _UNION_TYPES
       
       
    2: @doc(datatype="null")
    2: def is_null(t):
           """
           Return True if value is an instance of type: {datatype}.
       
           Parameters
           ----------
           t : DataType
           """
           return t.id == lib.Type_NA
       
       
    2: @doc(is_null, datatype="boolean")
    2: def is_boolean(t):
           return t.id == lib.Type_BOOL
       
       
    2: @doc(is_null, datatype="any integer")
    2: def is_integer(t):
           return t.id in _INTEGER_TYPES
       
       
    2: @doc(is_null, datatype="signed integer")
    2: def is_signed_integer(t):
           return t.id in _SIGNED_INTEGER_TYPES
       
       
    2: @doc(is_null, datatype="unsigned integer")
    2: def is_unsigned_integer(t):
           return t.id in _UNSIGNED_INTEGER_TYPES
       
       
    2: @doc(is_null, datatype="int8")
    2: def is_int8(t):
           return t.id == lib.Type_INT8
       
       
    2: @doc(is_null, datatype="int16")
    2: def is_int16(t):
           return t.id == lib.Type_INT16
       
       
    2: @doc(is_null, datatype="int32")
    2: def is_int32(t):
           return t.id == lib.Type_INT32
       
       
    2: @doc(is_null, datatype="int64")
    2: def is_int64(t):
           return t.id == lib.Type_INT64
       
       
    2: @doc(is_null, datatype="uint8")
    2: def is_uint8(t):
           return t.id == lib.Type_UINT8
       
       
    2: @doc(is_null, datatype="uint16")
    2: def is_uint16(t):
           return t.id == lib.Type_UINT16
       
       
    2: @doc(is_null, datatype="uint32")
    2: def is_uint32(t):
           return t.id == lib.Type_UINT32
       
       
    2: @doc(is_null, datatype="uint64")
    2: def is_uint64(t):
           return t.id == lib.Type_UINT64
       
       
    2: @doc(is_null, datatype="floating point numeric")
    2: def is_floating(t):
           return t.id in _FLOATING_TYPES
       
       
    2: @doc(is_null, datatype="float16 (half-precision)")
    2: def is_float16(t):
           return t.id == lib.Type_HALF_FLOAT
       
       
    2: @doc(is_null, datatype="float32 (single precision)")
    2: def is_float32(t):
           return t.id == lib.Type_FLOAT
       
       
    2: @doc(is_null, datatype="float64 (double precision)")
    2: def is_float64(t):
           return t.id == lib.Type_DOUBLE
       
       
    2: @doc(is_null, datatype="list")
    2: def is_list(t):
           return t.id == lib.Type_LIST
       
       
    2: @doc(is_null, datatype="large list")
    2: def is_large_list(t):
           return t.id == lib.Type_LARGE_LIST
       
       
    2: @doc(is_null, datatype="fixed size list")
    2: def is_fixed_size_list(t):
           return t.id == lib.Type_FIXED_SIZE_LIST
       
       
    2: @doc(is_null, datatype="list view")
    2: def is_list_view(t):
           return t.id == lib.Type_LIST_VIEW
       
       
    2: @doc(is_null, datatype="large list view")
    2: def is_large_list_view(t):
           return t.id == lib.Type_LARGE_LIST_VIEW
       
       
    2: @doc(is_null, datatype="struct")
    2: def is_struct(t):
           return t.id == lib.Type_STRUCT
       
       
    2: @doc(is_null, datatype="union")
    2: def is_union(t):
           return t.id in _UNION_TYPES
       
       
    2: @doc(is_null, datatype="nested type")
    2: def is_nested(t):
           return t.id in _NESTED_TYPES
       
       
    2: @doc(is_null, datatype="run-end encoded")
    2: def is_run_end_encoded(t):
           return t.id == lib.Type_RUN_END_ENCODED
       
       
    2: @doc(is_null, datatype="date, time, timestamp or duration")
    2: def is_temporal(t):
           return t.id in _TEMPORAL_TYPES
       
       
    2: @doc(is_null, datatype="timestamp")
    2: def is_timestamp(t):
           return t.id == lib.Type_TIMESTAMP
       
       
    2: @doc(is_null, datatype="duration")
    2: def is_duration(t):
           return t.id == lib.Type_DURATION
       
       
    2: @doc(is_null, datatype="time")
    2: def is_time(t):
           return t.id in _TIME_TYPES
       
       
    2: @doc(is_null, datatype="time32")
    2: def is_time32(t):
           return t.id == lib.Type_TIME32
       
       
    2: @doc(is_null, datatype="time64")
    2: def is_time64(t):
           return t.id == lib.Type_TIME64
       
       
    2: @doc(is_null, datatype="variable-length binary")
    2: def is_binary(t):
           return t.id == lib.Type_BINARY
       
       
    2: @doc(is_null, datatype="large variable-length binary")
    2: def is_large_binary(t):
           return t.id == lib.Type_LARGE_BINARY
       
       
    2: @doc(method="is_string")
    2: def is_unicode(t):
           """
           Alias for {method}.
       
           Parameters
           ----------
           t : DataType
           """
           return is_string(t)
       
       
    2: @doc(is_null, datatype="string (utf8 unicode)")
    2: def is_string(t):
           return t.id == lib.Type_STRING
       
       
    2: @doc(is_unicode, method="is_large_string")
    2: def is_large_unicode(t):
           return is_large_string(t)
       
       
    2: @doc(is_null, datatype="large string (utf8 unicode)")
    2: def is_large_string(t):
           return t.id == lib.Type_LARGE_STRING
       
       
    2: @doc(is_null, datatype="fixed size binary")
    2: def is_fixed_size_binary(t):
           return t.id == lib.Type_FIXED_SIZE_BINARY
       
       
    2: @doc(is_null, datatype="variable-length binary view")
    2: def is_binary_view(t):
           return t.id == lib.Type_BINARY_VIEW
       
       
    2: @doc(is_null, datatype="variable-length string (utf-8) view")
    2: def is_string_view(t):
           return t.id == lib.Type_STRING_VIEW
       
       
    2: @doc(is_null, datatype="date")
    2: def is_date(t):
           return t.id in _DATE_TYPES
       
       
    2: @doc(is_null, datatype="date32 (days)")
    2: def is_date32(t):
           return t.id == lib.Type_DATE32
       
       
    2: @doc(is_null, datatype="date64 (milliseconds)")
    2: def is_date64(t):
           return t.id == lib.Type_DATE64
       
       
    2: @doc(is_null, datatype="map")
    2: def is_map(t):
           return t.id == lib.Type_MAP
       
       
    2: @doc(is_null, datatype="decimal")
    2: def is_decimal(t):
           return t.id in _DECIMAL_TYPES
       
       
    2: @doc(is_null, datatype="decimal32")
    2: def is_decimal32(t):
           return t.id == lib.Type_DECIMAL32
       
       
    2: @doc(is_null, datatype="decimal64")
    2: def is_decimal64(t):
           return t.id == lib.Type_DECIMAL64
       
       
    2: @doc(is_null, datatype="decimal128")
    2: def is_decimal128(t):
           return t.id == lib.Type_DECIMAL128
       
       
    2: @doc(is_null, datatype="decimal256")
    2: def is_decimal256(t):
           return t.id == lib.Type_DECIMAL256
       
       
    2: @doc(is_null, datatype="dictionary-encoded")
    2: def is_dictionary(t):
           return t.id == lib.Type_DICTIONARY
       
       
    2: @doc(is_null, datatype="interval")
    2: def is_interval(t):
           return t.id == lib.Type_INTERVAL_MONTH_DAY_NANO
       
       
    2: @doc(is_null, datatype="primitive type")
    2: def is_primitive(t):
           return lib._is_primitive(t.id)
