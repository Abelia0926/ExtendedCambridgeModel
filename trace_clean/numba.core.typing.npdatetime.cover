    1: """
       Typing declarations for np.timedelta64.
       """
       
       
    1: from itertools import product
    1: import operator
       
    1: from numba.core import types
    1: from numba.core.typing.templates import (AttributeTemplate, ConcreteTemplate,
                                                AbstractTemplate, infer_global, infer,
                                                infer_getattr, signature)
    1: from numba.np import npdatetime_helpers
    1: from numba.np.numpy_support import numpy_version
       
       
       # timedelta64-only operations
       
    2: class TimedeltaUnaryOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               if len(args) == 2:
                   # Guard against binary + and -
                   return
               op, = args
               if not isinstance(op, types.NPTimedelta):
                   return
               return signature(op, op)
       
       
    2: class TimedeltaBinOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               if len(args) == 1:
                   # Guard against unary + and -
                   return
               left, right = args
               if not all(isinstance(tp, types.NPTimedelta) for tp in args):
                   return
               if npdatetime_helpers.can_cast_timedelta_units(left.unit, right.unit):
                   return signature(right, left, right)
               elif npdatetime_helpers.can_cast_timedelta_units(right.unit, left.unit):
                   return signature(left, left, right)
       
       
    2: class TimedeltaCmpOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               # For equality comparisons, all units are inter-comparable
               left, right = args
               if not all(isinstance(tp, types.NPTimedelta) for tp in args):
                   return
               return signature(types.boolean, left, right)
       
       
    2: class TimedeltaOrderedCmpOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               # For ordered comparisons, units must be compatible
               left, right = args
               if not all(isinstance(tp, types.NPTimedelta) for tp in args):
                   return
               if (npdatetime_helpers.can_cast_timedelta_units(left.unit, right.unit) or
                   npdatetime_helpers.can_cast_timedelta_units(right.unit, left.unit)):
                   return signature(types.boolean, left, right)
       
       
    2: class TimedeltaMixOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               """
               (timedelta64, {int, float}) -> timedelta64
               ({int, float}, timedelta64) -> timedelta64
               """
               left, right = args
               if isinstance(right, types.NPTimedelta):
                   td, other = right, left
                   sig_factory = lambda other: signature(td, other, td)
               elif isinstance(left, types.NPTimedelta):
                   td, other = left, right
                   sig_factory = lambda other: signature(td, td, other)
               else:
                   return
               if not isinstance(other, (types.Float, types.Integer)):
                   return
               # Force integer types to convert to signed because it matches
               # timedelta64 semantics better.
               if isinstance(other, types.Integer):
                   other = types.int64
               return sig_factory(other)
       
       
    2: class TimedeltaDivOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               """
               (timedelta64, {int, float}) -> timedelta64
               (timedelta64, timedelta64) -> float
               """
               left, right = args
               if not isinstance(left, types.NPTimedelta):
                   return
               if isinstance(right, types.NPTimedelta):
                   if (npdatetime_helpers.can_cast_timedelta_units(left.unit, right.unit)
                       or npdatetime_helpers.can_cast_timedelta_units(right.unit, left.unit)):
                       return signature(types.float64, left, right)
               elif isinstance(right, (types.Float)):
                   return signature(left, left, right)
               elif isinstance(right, (types.Integer)):
                   # Force integer types to convert to signed because it matches
                   # timedelta64 semantics better.
                   return signature(left, left, types.int64)
       
       
    3: @infer_global(operator.pos)
    2: class TimedeltaUnaryPos(TimedeltaUnaryOp):
    1:     key = operator.pos
       
    3: @infer_global(operator.neg)
    2: class TimedeltaUnaryNeg(TimedeltaUnaryOp):
    1:     key = operator.neg
       
    3: @infer_global(operator.add)
    2: @infer_global(operator.iadd)
    2: class TimedeltaBinAdd(TimedeltaBinOp):
    1:     key = operator.add
       
    3: @infer_global(operator.sub)
    2: @infer_global(operator.isub)
    2: class TimedeltaBinSub(TimedeltaBinOp):
    1:     key = operator.sub
       
    3: @infer_global(operator.mul)
    2: @infer_global(operator.imul)
    2: class TimedeltaBinMult(TimedeltaMixOp):
    1:     key = operator.mul
       
    3: @infer_global(operator.truediv)
    2: @infer_global(operator.itruediv)
    2: class TimedeltaTrueDiv(TimedeltaDivOp):
    1:     key = operator.truediv
       
    3: @infer_global(operator.floordiv)
    2: @infer_global(operator.ifloordiv)
    2: class TimedeltaFloorDiv(TimedeltaDivOp):
    1:     key = operator.floordiv
       
    1: if numpy_version >= (1, 25):
    3:     @infer_global(operator.eq)
    2:     class TimedeltaCmpEq(TimedeltaOrderedCmpOp):
    1:         key = operator.eq
       
    3:     @infer_global(operator.ne)
    2:     class TimedeltaCmpNe(TimedeltaOrderedCmpOp):
    1:         key = operator.ne
       else:
           @infer_global(operator.eq)
           class TimedeltaCmpEq(TimedeltaCmpOp):
               key = operator.eq
       
           @infer_global(operator.ne)
           class TimedeltaCmpNe(TimedeltaCmpOp):
               key = operator.ne
       
    3: @infer_global(operator.lt)
    2: class TimedeltaCmpLt(TimedeltaOrderedCmpOp):
    1:     key = operator.lt
       
    3: @infer_global(operator.le)
    2: class TimedeltaCmpLE(TimedeltaOrderedCmpOp):
    1:     key = operator.le
       
    3: @infer_global(operator.gt)
    2: class TimedeltaCmpGt(TimedeltaOrderedCmpOp):
    1:     key = operator.gt
       
    3: @infer_global(operator.ge)
    2: class TimedeltaCmpGE(TimedeltaOrderedCmpOp):
    1:     key = operator.ge
       
       
    3: @infer_global(abs)
    2: class TimedeltaAbs(TimedeltaUnaryOp):
    1:     pass
       
       
       # datetime64 operations
       
    3: @infer_global(operator.add)
    2: @infer_global(operator.iadd)
    2: class DatetimePlusTimedelta(AbstractTemplate):
    1:     key = operator.add
       
    1:     def generic(self, args, kws):
               if len(args) == 1:
                   # Guard against unary +
                   return
               left, right = args
               if isinstance(right, types.NPTimedelta):
                   dt = left
                   td = right
               elif isinstance(left, types.NPTimedelta):
                   dt = right
                   td = left
               else:
                   return
               if isinstance(dt, types.NPDatetime):
                   unit = npdatetime_helpers.combine_datetime_timedelta_units(dt.unit,
                                                                              td.unit)
                   if unit is not None:
                       return signature(types.NPDatetime(unit), left, right)
       
    3: @infer_global(operator.sub)
    2: @infer_global(operator.isub)
    2: class DatetimeMinusTimedelta(AbstractTemplate):
    1:     key = operator.sub
       
    1:     def generic(self, args, kws):
               if len(args) == 1:
                   # Guard against unary -
                   return
               dt, td = args
               if isinstance(dt, types.NPDatetime) and isinstance(td,
                                                                  types.NPTimedelta):
                   unit = npdatetime_helpers.combine_datetime_timedelta_units(dt.unit,
                                                                              td.unit)
                   if unit is not None:
                       return signature(types.NPDatetime(unit), dt, td)
       
    3: @infer_global(operator.sub)
    2: class DatetimeMinusDatetime(AbstractTemplate):
    1:     key = operator.sub
       
    1:     def generic(self, args, kws):
               if len(args) == 1:
                   # Guard against unary -
                   return
               left, right = args
               if isinstance(left, types.NPDatetime) and isinstance(right,
                                                                    types.NPDatetime):
                   unit = npdatetime_helpers.get_best_unit(left.unit, right.unit)
                   return signature(types.NPTimedelta(unit), left, right)
       
       
    2: class DatetimeCmpOp(AbstractTemplate):
       
    1:     def generic(self, args, kws):
               # For datetime64 comparisons, all units are inter-comparable
               left, right = args
               if not all(isinstance(tp, types.NPDatetime) for tp in args):
                   return
               return signature(types.boolean, left, right)
       
       
    3: @infer_global(operator.eq)
    2: class DatetimeCmpEq(DatetimeCmpOp):
    1:     key = operator.eq
       
    3: @infer_global(operator.ne)
    2: class DatetimeCmpNe(DatetimeCmpOp):
    1:     key = operator.ne
       
    3: @infer_global(operator.lt)
    2: class DatetimeCmpLt(DatetimeCmpOp):
    1:     key = operator.lt
       
    3: @infer_global(operator.le)
    2: class DatetimeCmpLE(DatetimeCmpOp):
    1:     key = operator.le
       
    3: @infer_global(operator.gt)
    2: class DatetimeCmpGt(DatetimeCmpOp):
    1:     key = operator.gt
       
    3: @infer_global(operator.ge)
    2: class DatetimeCmpGE(DatetimeCmpOp):
    1:     key = operator.ge
       
       
    3: @infer_global(npdatetime_helpers.datetime_minimum)
    2: @infer_global(npdatetime_helpers.datetime_maximum)
    2: class DatetimeMinMax(AbstractTemplate):
    1:     def generic(self, args, kws):
               assert not kws
               assert len(args) == 2
               error_msg = "DatetimeMinMax requires both arguments to be NPDatetime type or both arguments to be NPTimedelta types"
               assert isinstance(args[0], (types.NPDatetime, types.NPTimedelta)), error_msg
               if isinstance(args[0], types.NPDatetime):
                   if not isinstance(args[1], types.NPDatetime):
                       raise TypeError(error_msg)
               else:
                   if not isinstance(args[1], types.NPTimedelta):
                       raise TypeError(error_msg)
               return signature(args[0], *args)
