    1: """
       Discrete Fourier Transforms - basic.py
       """
    1: import numpy as np
    1: import functools
    1: from . import pypocketfft as pfft
    1: from .helper import (_asfarray, _init_nd_shape_and_axes, _datacopied,
                            _fix_shape, _fix_shape_1d, _normalization,
                            _workers)
       
    3: def c2c(forward, x, n=None, axis=-1, norm=None, overwrite_x=False,
    2:         workers=None, *, plan=None):
           """ Return discrete Fourier transform of real or complex sequence. """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
           overwrite_x = overwrite_x or _datacopied(tmp, x)
           norm = _normalization(norm, forward)
           workers = _workers(workers)
       
           if n is not None:
               tmp, copied = _fix_shape_1d(tmp, n, axis)
               overwrite_x = overwrite_x or copied
           elif tmp.shape[axis] < 1:
               message = f"invalid number of data points ({tmp.shape[axis]}) specified"
               raise ValueError(message)
       
           out = (tmp if overwrite_x and tmp.dtype.kind == 'c' else None)
       
           return pfft.c2c(tmp, (axis,), forward, norm, out, workers)
       
       
    1: fft = functools.partial(c2c, True)
    1: fft.__name__ = 'fft'
    1: ifft = functools.partial(c2c, False)
    1: ifft.__name__ = 'ifft'
       
       
    3: def r2c(forward, x, n=None, axis=-1, norm=None, overwrite_x=False,
    2:         workers=None, *, plan=None):
           """
           Discrete Fourier transform of a real sequence.
           """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
           norm = _normalization(norm, forward)
           workers = _workers(workers)
       
           if not np.isrealobj(tmp):
               raise TypeError("x must be a real sequence")
       
           if n is not None:
               tmp, _ = _fix_shape_1d(tmp, n, axis)
           elif tmp.shape[axis] < 1:
               raise ValueError(f"invalid number of data points ({tmp.shape[axis]}) specified")
       
           # Note: overwrite_x is not utilised
           return pfft.r2c(tmp, (axis,), forward, norm, None, workers)
       
       
    1: rfft = functools.partial(r2c, True)
    1: rfft.__name__ = 'rfft'
    1: ihfft = functools.partial(r2c, False)
    1: ihfft.__name__ = 'ihfft'
       
       
    3: def c2r(forward, x, n=None, axis=-1, norm=None, overwrite_x=False,
    2:         workers=None, *, plan=None):
           """
           Return inverse discrete Fourier transform of real sequence x.
           """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
           norm = _normalization(norm, forward)
           workers = _workers(workers)
       
           # TODO: Optimize for hermitian and real?
           if np.isrealobj(tmp):
               tmp = tmp + 0.j
       
           # Last axis utilizes hermitian symmetry
           if n is None:
               n = (tmp.shape[axis] - 1) * 2
               if n < 1:
                   raise ValueError(f"Invalid number of data points ({n}) specified")
           else:
               tmp, _ = _fix_shape_1d(tmp, (n//2) + 1, axis)
       
           # Note: overwrite_x is not utilized
           return pfft.c2r(tmp, (axis,), n, forward, norm, None, workers)
       
       
    1: hfft = functools.partial(c2r, True)
    1: hfft.__name__ = 'hfft'
    1: irfft = functools.partial(c2r, False)
    1: irfft.__name__ = 'irfft'
       
       
    2: def hfft2(x, s=None, axes=(-2,-1), norm=None, overwrite_x=False, workers=None,
    1:           *, plan=None):
           """
           2-D discrete Fourier transform of a Hermitian sequence
           """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           return hfftn(x, s, axes, norm, overwrite_x, workers)
       
       
    2: def ihfft2(x, s=None, axes=(-2,-1), norm=None, overwrite_x=False, workers=None,
    1:            *, plan=None):
           """
           2-D discrete inverse Fourier transform of a Hermitian sequence
           """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           return ihfftn(x, s, axes, norm, overwrite_x, workers)
       
       
    3: def c2cn(forward, x, s=None, axes=None, norm=None, overwrite_x=False,
    2:          workers=None, *, plan=None):
           """
           Return multidimensional discrete Fourier transform.
           """
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
       
           shape, axes = _init_nd_shape_and_axes(tmp, s, axes)
           overwrite_x = overwrite_x or _datacopied(tmp, x)
           workers = _workers(workers)
       
           if len(axes) == 0:
               return x
       
           tmp, copied = _fix_shape(tmp, shape, axes)
           overwrite_x = overwrite_x or copied
       
           norm = _normalization(norm, forward)
           out = (tmp if overwrite_x and tmp.dtype.kind == 'c' else None)
       
           return pfft.c2c(tmp, axes, forward, norm, out, workers)
       
       
    1: fftn = functools.partial(c2cn, True)
    1: fftn.__name__ = 'fftn'
    1: ifftn = functools.partial(c2cn, False)
    1: ifftn.__name__ = 'ifftn'
       
    3: def r2cn(forward, x, s=None, axes=None, norm=None, overwrite_x=False,
    2:          workers=None, *, plan=None):
           """Return multidimensional discrete Fourier transform of real input"""
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
       
           if not np.isrealobj(tmp):
               raise TypeError("x must be a real sequence")
       
           shape, axes = _init_nd_shape_and_axes(tmp, s, axes)
           tmp, _ = _fix_shape(tmp, shape, axes)
           norm = _normalization(norm, forward)
           workers = _workers(workers)
       
           if len(axes) == 0:
               raise ValueError("at least 1 axis must be transformed")
       
           # Note: overwrite_x is not utilized
           return pfft.r2c(tmp, axes, forward, norm, None, workers)
       
       
    1: rfftn = functools.partial(r2cn, True)
    1: rfftn.__name__ = 'rfftn'
    1: ihfftn = functools.partial(r2cn, False)
    1: ihfftn.__name__ = 'ihfftn'
       
       
    3: def c2rn(forward, x, s=None, axes=None, norm=None, overwrite_x=False,
    2:          workers=None, *, plan=None):
           """Multidimensional inverse discrete fourier transform with real output"""
           if plan is not None:
               raise NotImplementedError('Passing a precomputed plan is not yet '
                                         'supported by scipy.fft functions')
           tmp = _asfarray(x)
       
           # TODO: Optimize for hermitian and real?
           if np.isrealobj(tmp):
               tmp = tmp + 0.j
       
           noshape = s is None
           shape, axes = _init_nd_shape_and_axes(tmp, s, axes)
       
           if len(axes) == 0:
               raise ValueError("at least 1 axis must be transformed")
       
           shape = list(shape)
           if noshape:
               shape[-1] = (x.shape[axes[-1]] - 1) * 2
       
           norm = _normalization(norm, forward)
           workers = _workers(workers)
       
           # Last axis utilizes hermitian symmetry
           lastsize = shape[-1]
           shape[-1] = (shape[-1] // 2) + 1
       
           tmp, _ = tuple(_fix_shape(tmp, shape, axes))
       
           # Note: overwrite_x is not utilized
           return pfft.c2r(tmp, axes, lastsize, forward, norm, None, workers)
       
       
    1: hfftn = functools.partial(c2rn, True)
    1: hfftn.__name__ = 'hfftn'
    1: irfftn = functools.partial(c2rn, False)
    1: irfftn.__name__ = 'irfftn'
       
       
    1: def r2r_fftpack(forward, x, n=None, axis=-1, norm=None, overwrite_x=False):
           """FFT of a real sequence, returning fftpack half complex format"""
           tmp = _asfarray(x)
           overwrite_x = overwrite_x or _datacopied(tmp, x)
           norm = _normalization(norm, forward)
           workers = _workers(None)
       
           if tmp.dtype.kind == 'c':
               raise TypeError('x must be a real sequence')
       
           if n is not None:
               tmp, copied = _fix_shape_1d(tmp, n, axis)
               overwrite_x = overwrite_x or copied
           elif tmp.shape[axis] < 1:
               raise ValueError(f"invalid number of data points ({tmp.shape[axis]}) specified")
       
           out = (tmp if overwrite_x else None)
       
           return pfft.r2r_fftpack(tmp, (axis,), forward, forward, norm, out, workers)
       
       
    1: rfft_fftpack = functools.partial(r2r_fftpack, True)
    1: rfft_fftpack.__name__ = 'rfft_fftpack'
    1: irfft_fftpack = functools.partial(r2r_fftpack, False)
    1: irfft_fftpack.__name__ = 'irfft_fftpack'
