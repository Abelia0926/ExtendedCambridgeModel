    1: from collections import defaultdict
    1: from collections.abc import Sequence
    1: import types as pytypes
    1: import weakref
    1: import threading
    1: import contextlib
    1: import operator
       
    1: import numba
    1: from numba.core import types, errors
    1: from numba.core.typeconv import Conversion, rules
    1: from numba.core.typing import templates
    1: from numba.core.utils import order_by_target_specificity
    1: from .typeof import typeof, Purpose
       
    1: from numba.core import utils
       
       
    2: class Rating(object):
    1:     __slots__ = 'promote', 'safe_convert', "unsafe_convert"
       
    1:     def __init__(self):
 1908:         self.promote = 0
 1908:         self.safe_convert = 0
 1908:         self.unsafe_convert = 0
       
    1:     def astuple(self):
               """Returns a tuple suitable for comparing with the worse situation
               start first.
               """
 1815:         return (self.unsafe_convert, self.safe_convert, self.promote)
       
    1:     def __add__(self, other):
               if type(self) is not type(other):
                   return NotImplemented
               rsum = Rating()
               rsum.promote = self.promote + other.promote
               rsum.safe_convert = self.safe_convert + other.safe_convert
               rsum.unsafe_convert = self.unsafe_convert + other.unsafe_convert
               return rsum
       
       
    2: class CallStack(Sequence):
    1:     """
           A compile-time call stack
           """
       
    1:     def __init__(self):
   62:         self._stack = []
   62:         self._lock = threading.RLock()
       
    1:     def __getitem__(self, index):
               """
               Returns item in the stack where index=0 is the top and index=1 is
               the second item from the top.
               """
 1554:         return self._stack[len(self) - index - 1]
       
    1:     def __len__(self):
 1554:         return len(self._stack)
       
    2:     @contextlib.contextmanager
    2:     def register(self, target, typeinfer, func_id, args):
               # guard compiling the same function with the same signature
   24:         if self.match(func_id.func, args):
                   msg = "compiler re-entrant to the same function signature"
                   raise errors.NumbaRuntimeError(msg)
   24:         self._lock.acquire()
   24:         self._stack.append(CallFrame(target, typeinfer, func_id, args))
   24:         try:
   24:             yield
               finally:
   24:             self._stack.pop()
   24:             self._lock.release()
       
    1:     def finditer(self, py_func):
               """
               Yields frame that matches the function object starting from the top
               of stack.
               """
   92:         for frame in self:
   68:             if frame.func_id.func is py_func:
                       yield frame
       
    1:     def findfirst(self, py_func):
               """
               Returns the first result from `.finditer(py_func)`; or None if no match.
               """
               try:
                   return next(self.finditer(py_func))
               except StopIteration:
                   return
       
    1:     def match(self, py_func, args):
               """
               Returns first function that matches *py_func* and the arguments types in
               *args*; or, None if no match.
               """
   24:         for frame in self.finditer(py_func):
                   if frame.args == args:
                       return frame
       
       
    2: class CallFrame(object):
    1:     """
           A compile-time call frame
           """
    1:     def __init__(self, target, typeinfer, func_id, args):
   24:         self.typeinfer = typeinfer
   24:         self.func_id = func_id
   24:         self.args = args
   24:         self.target = target
   24:         self._inferred_retty = set()
       
    1:     def __repr__(self):
               return "CallFrame({}, {})".format(self.func_id, self.args)
       
    1:     def add_return_type(self, return_type):
               """Add *return_type* to the list of inferred return-types.
               If there are too many, raise `TypingError`.
               """
               # The maximum limit is picked arbitrarily.
               # Don't think that this needs to be user configurable.
               RETTY_LIMIT = 16
               self._inferred_retty.add(return_type)
               if len(self._inferred_retty) >= RETTY_LIMIT:
                   m = "Return type of recursive function does not converge"
                   raise errors.TypingError(m)
       
       
    2: class BaseContext(object):
    1:     """A typing context for storing function typing constrain template.
           """
       
    1:     def __init__(self):
               # A list of installed registries
   62:         self._registries = {}
               # Typing declarations extracted from the registries or other sources
   62:         self._functions = defaultdict(list)
   62:         self._attributes = defaultdict(list)
   62:         self._globals = utils.UniqueDict()
   62:         self.tm = rules.default_type_manager
   62:         self.callstack = CallStack()
       
               # Initialize
   62:         self.init()
       
   63:     def init(self):
               """
               Initialize the typing context.  Can be overridden by subclasses.
               """
       
    1:     def refresh(self):
               """
               Refresh context with new declarations from known registries.
               Useful for third-party extensions.
               """
  380:         self.load_additional_registries()
               # Some extensions may have augmented the builtin registry
  380:         self._load_builtins()
       
    1:     def explain_function_type(self, func):
               """
               Returns a string description of the type of a function
               """
               desc = []
               defns = []
               param = False
               if isinstance(func, types.Callable):
                   sigs, param = func.get_call_signatures()
                   defns.extend(sigs)
       
               elif func in self._functions:
                   for tpl in self._functions[func]:
                       param = param or hasattr(tpl, 'generic')
                       defns.extend(getattr(tpl, 'cases', []))
       
               else:
                   msg = "No type info available for {func!r} as a callable."
                   desc.append(msg.format(func=func))
       
               if defns:
                   desc = ['Known signatures:']
                   for sig in defns:
                       desc.append(' * {0}'.format(sig))
       
               return '\n'.join(desc)
       
    1:     def resolve_function_type(self, func, args, kws):
               """
               Resolve function type *func* for argument types *args* and *kws*.
               A signature is returned.
               """
               # Prefer user definition first
  411:         try:
  411:             res = self._resolve_user_function_type(func, args, kws)
               except errors.TypingError as e:
                   # Capture any typing error
                   last_exception = e
                   res = None
               else:
  411:             last_exception = None
       
               # Return early we know there's a working user function
  411:         if res is not None:
  367:             return res
       
               # Check builtin functions
   44:         res = self._resolve_builtin_function_type(func, args, kws)
       
               # Re-raise last_exception if no function type has been found
   44:         if res is None and last_exception is not None:
                   raise last_exception
       
   44:         return res
       
    1:     def _resolve_builtin_function_type(self, func, args, kws):
               # NOTE: we should reduce usage of this
   44:         if func in self._functions:
                   # Note: Duplicating code with types.Function.get_call_type().
                   #       *defns* are CallTemplates.
   36:             defns = self._functions[func]
   76:             for defn in defns:
  152:                 for support_literals in [True, False]:
  112:                     if support_literals:
   72:                         res = defn.apply(args, kws)
                           else:
  160:                         fixedargs = [types.unliteral(a) for a in args]
   40:                         res = defn.apply(fixedargs, kws)
  112:                     if res is not None:
   32:                         return res
       
    1:     def _resolve_user_function_type(self, func, args, kws, literals=None):
               # It's not a known function type, perhaps it's a global?
  411:         functy = self._lookup_global(func)
  411:         if functy is not None:
   30:             func = functy
       
  411:         if isinstance(func, types.Type):
                   # If it's a type, it may support a __call__ method
  367:             func_type = self.resolve_getattr(func, "__call__")
  367:             if func_type is not None:
                       # The function has a __call__ method, type its call.
    6:                 return self.resolve_function_type(func_type, args, kws)
       
  405:         if isinstance(func, types.Callable):
                   # XXX fold this into the __call__ attribute logic?
  361:             return func.get_call_type(self, args, kws)
       
    1:     def _get_attribute_templates(self, typ):
               """
               Get matching AttributeTemplates for the Numba type.
               """
 1029:         if typ in self._attributes:
    6:             for attrinfo in self._attributes[typ]:
    3:                 yield attrinfo
               else:
 7458:             for cls in type(typ).__mro__:
 6432:                 if cls in self._attributes:
 1447:                     for attrinfo in self._attributes[cls]:
 1362:                         yield attrinfo
       
    1:     def resolve_getattr(self, typ, attr):
               """
               Resolve getting the attribute *attr* (a string) on the Numba type.
               The attribute's type is returned, or None if resolution failed.
               """
  519:         def core(typ):
  979:             out = self.find_matching_getattr_template(typ, attr)
  979:             if out:
   59:                 return out['return_type']
       
  519:         out = core(typ)
  519:         if out is not None:
   59:             return out
       
               # Try again without literals
  460:         out = core(types.unliteral(typ))
  460:         if out is not None:
                   return out
       
  460:         if isinstance(typ, types.Module):
   99:             attrty = self.resolve_module_constants(typ, attr)
   99:             if attrty is not None:
   99:                 return attrty
       
    1:     def find_matching_getattr_template(self, typ, attr):
       
 1029:         templates = list(self._get_attribute_templates(typ))
       
               # get the order in which to try templates
 1029:         from numba.core.target_extension import get_local_target # circular
 1029:         target_hw = get_local_target(self)
 1029:         order = order_by_target_specificity(target_hw, templates, fnkey=attr)
       
 2248:         for template in order:
 1295:             return_type = template.resolve(typ, attr)
 1295:             if return_type is not None:
   76:                 return {
   76:                     'template': template,
   76:                     'return_type': return_type,
                       }
       
    1:     def resolve_setattr(self, target, attr, value):
               """
               Resolve setting the attribute *attr* (a string) on the *target* type
               to the given *value* type.
               A function signature is returned, or None if resolution failed.
               """
               for attrinfo in self._get_attribute_templates(target):
                   expectedty = attrinfo.resolve(target, attr)
                   # NOTE: convertibility from *value* to *expectedty* is left to
                   # the caller.
                   if expectedty is not None:
                       return templates.signature(types.void, target, expectedty)
       
    1:     def resolve_static_getitem(self, value, index):
   16:         assert not isinstance(index, types.Type), index
   16:         args = value, index
   16:         kws = ()
   16:         return self.resolve_function_type("static_getitem", args, kws)
       
    1:     def resolve_static_setitem(self, target, index, value):
               assert not isinstance(index, types.Type), index
               args = target, index, value
               kws = {}
               return self.resolve_function_type("static_setitem", args, kws)
       
    1:     def resolve_setitem(self, target, index, value):
   13:         assert isinstance(index, types.Type), index
   13:         fnty = self.resolve_value_type(operator.setitem)
   13:         sig = fnty.get_call_type(self, (target, index, value), {})
   13:         return sig
       
    1:     def resolve_delitem(self, target, index):
               args = target, index
               kws = {}
               fnty = self.resolve_value_type(operator.delitem)
               sig = fnty.get_call_type(self, args, kws)
               return sig
       
    1:     def resolve_module_constants(self, typ, attr):
               """
               Resolve module-level global constants.
               Return None or the attribute type
               """
  132:         assert isinstance(typ, types.Module)
  132:         attrval = getattr(typ.pymod, attr)
  132:         try:
  132:             return self.resolve_value_type(attrval)
               except ValueError:
                   pass
       
    1:     def resolve_argument_type(self, val):
               """
               Return the numba type of a Python value that is being used
               as a function argument.  Integer types will all be considered
               int64, regardless of size.
       
               ValueError is raised for unsupported types.
               """
               try:
                   return typeof(val, Purpose.argument)
               except ValueError:
                   if numba.cuda.is_cuda_array(val):
                       # There's no need to synchronize on a stream when we're only
                       # determining typing - synchronization happens at launch time,
                       # so eliding sync here is safe.
                       return typeof(numba.cuda.as_cuda_array(val, sync=False),
                                     Purpose.argument)
                   else:
                       raise
       
    1:     def resolve_value_type(self, val):
               """
               Return the numba type of a Python value that is being used
               as a runtime constant.
               ValueError is raised for unsupported types.
               """
  678:         try:
  678:             ty = typeof(val, Purpose.constant)
  534:         except ValueError as e:
                   # Make sure the exception doesn't hold a reference to the user
                   # value.
  534:             typeof_exc = utils.erase_traceback(e)
               else:
  144:             return ty
       
  534:         if isinstance(val, types.ExternalFunction):
                   return val
       
               # Try to look up target specific typing information
  534:         ty = self._get_global_type(val)
  534:         if ty is not None:
  534:             return ty
       
               raise typeof_exc
       
    1:     def resolve_value_type_prefer_literal(self, value):
               """Resolve value type and prefer Literal types whenever possible.
               """
   21:         lit = types.maybe_literal(value)
   21:         if lit is None:
   18:             return self.resolve_value_type(value)
               else:
    3:             return lit
       
    1:     def _get_global_type(self, gv):
  534:         ty = self._lookup_global(gv)
  534:         if ty is not None:
  501:             return ty
   33:         if isinstance(gv, pytypes.ModuleType):
   33:             return types.Module(gv)
       
    1:     def _load_builtins(self):
               # Initialize declarations
  380:         from numba.core.typing import builtins, arraydecl, npdatetime  # noqa: F401, E501
  380:         from numba.core.typing import ctypes_utils, bufproto           # noqa: F401, E501
  380:         from numba.core.unsafe import eh                    # noqa: F401
       
  380:         self.install_registry(templates.builtin_registry)
       
    1:     def load_additional_registries(self):
               """
               Load target-specific registries.  Can be overridden by subclasses.
               """
       
    1:     def install_registry(self, registry):
               """
               Install a *registry* (a templates.Registry instance) of function,
               attribute and global declarations.
               """
 3420:         try:
 3420:             loader = self._registries[registry]
    9:         except KeyError:
    9:             loader = templates.RegistryLoader(registry)
    9:             self._registries[registry] = loader
 4643:         for ftcls in loader.new_registrations('functions'):
 1223:             self.insert_function(ftcls(self))
 3704:         for ftcls in loader.new_registrations('attributes'):
  284:             self.insert_attributes(ftcls(self))
 4948:         for gv, gty in loader.new_registrations('globals'):
 1528:             existing = self._lookup_global(gv)
 1528:             if existing is None:
 1205:                 self.insert_global(gv, gty)
                   else:
                       # A type was already inserted, see if we can add to it
  323:                 newty = existing.augment(gty)
  323:                 if newty is None:
                           raise TypeError("cannot augment %s with %s"
                                           % (existing, gty))
  323:                 self._remove_global(gv)
  323:                 self._insert_global(gv, newty)
       
    1:     def _lookup_global(self, gv):
               """
               Look up the registered type for global value *gv*.
               """
 2473:         try:
 2473:             gv = weakref.ref(gv)
  370:         except TypeError:
  370:             pass
 2473:         try:
 2473:             return self._globals.get(gv, None)
               except TypeError:
                   # Unhashable type
                   return None
       
    1:     def _insert_global(self, gv, gty):
               """
               Register type *gty* for value *gv*.  Only a weak reference
               to *gv* is kept, if possible.
               """
 1586:         def on_disposal(wr, pop=self._globals.pop):
                   # pop() is pre-looked up to avoid a crash late at shutdown on 3.5
                   # (https://bugs.python.org/issue25217)
                   pop(wr)
 1586:         try:
 1586:             gv = weakref.ref(gv, on_disposal)
  238:         except TypeError:
  238:             pass
 1586:         self._globals[gv] = gty
       
    1:     def _remove_global(self, gv):
               """
               Remove the registered type for global value *gv*.
               """
  323:         try:
  323:             gv = weakref.ref(gv)
    3:         except TypeError:
    3:             pass
  323:         del self._globals[gv]
       
    1:     def insert_global(self, gv, gty):
 1263:         self._insert_global(gv, gty)
       
    1:     def insert_attributes(self, at):
  284:         key = at.key
  284:         self._attributes[key].append(at)
       
    1:     def insert_function(self, ft):
 1223:         key = ft.key
 1223:         self._functions[key].append(ft)
       
    1:     def insert_user_function(self, fn, ft):
               """Insert a user function.
       
               Args
               ----
               - fn:
                   object used as callee
               - ft:
                   function template
               """
               self._insert_global(fn, types.Function(ft))
       
    1:     def can_convert(self, fromty, toty):
               """
               Check whether conversion is possible from *fromty* to *toty*.
               If successful, return a numba.typeconv.Conversion instance;
               otherwise None is returned.
               """
 3632:         if fromty == toty:
  687:             return Conversion.exact
               else:
                   # First check with the type manager (some rules are registered
                   # at startup there, see numba.typeconv.rules)
 2945:             conv = self.tm.check_compatible(fromty, toty)
 2945:             if conv is not None:
 2881:                 return conv
       
                   # Fall back on type-specific rules
   64:             forward = fromty.can_convert_to(self, toty)
   64:             backward = toty.can_convert_from(self, fromty)
   64:             if backward is None:
   64:                 return forward
                   elif forward is None:
                       return backward
                   else:
                       return min(forward, backward)
       
    2:     def _rate_arguments(self, actualargs, formalargs, unsafe_casting=True,
    1:                         exact_match_required=False):
               """
               Rate the actual arguments for compatibility against the formal
               arguments.  A Rating instance is returned, or None if incompatible.
               """
 1908:         if len(actualargs) != len(formalargs):
                   return None
 1908:         rate = Rating()
 5395:         for actual, formal in zip(actualargs, formalargs):
 3580:             conv = self.can_convert(actual, formal)
 3580:             if conv is None:
   36:                 return None
 3544:             elif not unsafe_casting and conv >= Conversion.unsafe:
   57:                 return None
 3487:             elif exact_match_required and conv != Conversion.exact:
                       return None
       
 3487:             if conv == Conversion.promote:
                       rate.promote += 1
 3487:             elif conv == Conversion.safe:
  459:                 rate.safe_convert += 1
 3028:             elif conv == Conversion.unsafe:
 2363:                 rate.unsafe_convert += 1
  665:             elif conv == Conversion.exact:
  665:                 pass
                   else:
                       raise Exception("unreachable", conv)
       
 1815:         return rate
       
    1:     def install_possible_conversions(self, actualargs, formalargs):
               """
               Install possible conversions from the actual argument types to
               the formal argument types in the C++ type manager.
               Return True if all arguments can be converted.
               """
    1:         if len(actualargs) != len(formalargs):
                   return False
    5:         for actual, formal in zip(actualargs, formalargs):
    4:             if self.tm.check_compatible(actual, formal) is not None:
                       # This conversion is already known
    3:                 continue
    1:             conv = self.can_convert(actual, formal)
    1:             if conv is None:
                       return False
    1:             assert conv is not Conversion.exact
    1:             self.tm.set_compatible(actual, formal, conv)
    1:         return True
       
    1:     def resolve_overload(self, key, cases, args, kws,
    1:                          allow_ambiguous=True, unsafe_casting=True,
    1:                          exact_match_required=False):
               """
               Given actual *args* and *kws*, find the best matching
               signature in *cases*, or None if none matches.
               *key* is used for error reporting purposes.
               If *allow_ambiguous* is False, a tie in the best matches
               will raise an error.
               If *unsafe_casting* is False, unsafe casting is forbidden.
               """
  274:         assert not kws, "Keyword arguments are not supported, yet"
  274:         options = {
  274:             'unsafe_casting': unsafe_casting,
  274:             'exact_match_required': exact_match_required,
               }
               # Rate each case
  274:         candidates = []
 2362:         for case in cases:
 2088:             if len(args) == len(case.args):
 1908:                 rating = self._rate_arguments(args, case.args, **options)
 1908:                 if rating is not None:
 1815:                     candidates.append((rating.astuple(), case))
       
               # Find the best case
 2089:         candidates.sort(key=lambda i: i[0])
  274:         if candidates:
  274:             best_rate, best = candidates[0]
  274:             if not allow_ambiguous:
                       # Find whether there is a tie and if so, raise an error
                       tied = []
                       for rate, case in candidates:
                           if rate != best_rate:
                               break
                           tied.append(case)
                       if len(tied) > 1:
                           args = (key, args, '\n'.join(map(str, tied)))
                           msg = "Ambiguous overloading for %s %s:\n%s" % args
                           raise TypeError(msg)
                   # Simply return the best matching candidate in order.
                   # If there is a tie, since list.sort() is stable, the first case
                   # in the original order is returned.
                   # (this can happen if e.g. a function template exposes
                   #  (int32, int32) -> int32 and (int64, int64) -> int64,
                   #  and you call it with (int16, int16) arguments)
  274:             return best
       
    1:     def unify_types(self, *typelist):
               # Sort the type list according to bit width before doing
               # pairwise unification (with thanks to aterrel).
   30:         def keyfunc(obj):
                   """Uses bitwidth to order numeric-types.
                   Fallback to stable, deterministic sort.
                   """
   36:             return getattr(obj, 'bitwidth', 0)
   30:         typelist = sorted(typelist, key=keyfunc)
   30:         unified = typelist[0]
   36:         for tp in typelist[1:]:
    6:             unified = self.unify_pairs(unified, tp)
    6:             if unified is None:
                       break
   30:         return unified
       
    1:     def unify_pairs(self, first, second):
               """
               Try to unify the two given types.  A third type is returned,
               or None in case of failure.
               """
  452:         if first == second:
  435:             return first
       
   17:         if first is types.undefined:
                   return second
   17:         elif second is types.undefined:
                   return first
       
               # Types with special unification rules
   17:         unified = first.unify(self, second)
   17:         if unified is not None:
    8:             return unified
       
    9:         unified = second.unify(self, first)
    9:         if unified is not None:
                   return unified
       
               # Other types with simple conversion rules
    9:         conv = self.can_convert(fromty=first, toty=second)
    9:         if conv is not None and conv <= Conversion.safe:
                   # Can convert from first to second
                   return second
       
    9:         conv = self.can_convert(fromty=second, toty=first)
    9:         if conv is not None and conv <= Conversion.safe:
                   # Can convert from second to first
    6:             return first
       
    3:         if isinstance(first, types.Literal) or \
                  isinstance(second, types.Literal):
    3:             first = types.unliteral(first)
    3:             second = types.unliteral(second)
    3:             return self.unify_pairs(first, second)
       
               # Cannot unify
               return None
       
       
    2: class Context(BaseContext):
       
    1:     def load_additional_registries(self):
  380:         from . import (
                   cffi_utils,
                   cmathdecl,
                   enumdecl,
                   listdecl,
                   mathdecl,
                   npydecl,
                   setdecl,
                   dictdecl,
               )
  380:         self.install_registry(cffi_utils.registry)
  380:         self.install_registry(cmathdecl.registry)
  380:         self.install_registry(enumdecl.registry)
  380:         self.install_registry(listdecl.registry)
  380:         self.install_registry(mathdecl.registry)
  380:         self.install_registry(npydecl.registry)
  380:         self.install_registry(setdecl.registry)
  380:         self.install_registry(dictdecl.registry)
