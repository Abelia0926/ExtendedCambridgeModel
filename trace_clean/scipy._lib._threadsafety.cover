    1: import threading
       
    1: import scipy._lib.decorator
       
       
    1: __all__ = ['ReentrancyError', 'ReentrancyLock', 'non_reentrant']
       
       
    2: class ReentrancyError(RuntimeError):
    1:     pass
       
       
    2: class ReentrancyLock:
    1:     """
           Threading lock that raises an exception for reentrant calls.
       
           Calls from different threads are serialized, and nested calls from the
           same thread result to an error.
       
           The object can be used as a context manager or to decorate functions
           via the decorate() method.
       
           """
       
    1:     def __init__(self, err_msg):
    1:         self._rlock = threading.RLock()
    1:         self._entered = False
    1:         self._err_msg = err_msg
       
    1:     def __enter__(self):
               self._rlock.acquire()
               if self._entered:
                   self._rlock.release()
                   raise ReentrancyError(self._err_msg)
               self._entered = True
       
    1:     def __exit__(self, type, value, traceback):
               self._entered = False
               self._rlock.release()
       
    1:     def decorate(self, func):
               def caller(func, *a, **kw):
                   with self:
                       return func(*a, **kw)
               return scipy._lib.decorator.decorate(func, caller)
       
       
    1: def non_reentrant(err_msg=None):
           """
           Decorate a function with a threading lock and prevent reentrant calls.
           """
           def decorator(func):
               msg = err_msg
               if msg is None:
                   msg = "%s is not re-entrant" % func.__name__
               lock = ReentrancyLock(msg)
               return lock.decorate(func)
           return decorator
