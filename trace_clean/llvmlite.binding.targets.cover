    1: import os
    1: from ctypes import (POINTER, c_char_p, c_longlong, c_int, c_size_t,
                           c_void_p, string_at)
       
    1: from llvmlite.binding import ffi
    1: from llvmlite.binding.common import _decode_string, _encode_string
       
       
    1: def get_process_triple():
           """
           Return a target triple suitable for generating code for the current process.
           An example when the default triple from ``get_default_triple()`` is not be
           suitable is when LLVM is compiled for 32-bit but the process is executing
           in 64-bit mode.
           """
  140:     with ffi.OutputString() as out:
   70:         ffi.lib.LLVMPY_GetProcessTriple(out)
   70:         return str(out)
       
       
    2: class FeatureMap(dict):
    1:     """
           Maps feature name to a boolean indicating the availability of the feature.
           Extends ``dict`` to add `.flatten()` method.
           """
       
    1:     def flatten(self, sort=True):
               """
               Args
               ----
               sort: bool
                   Optional.  If True, the features are sorted by name; otherwise,
                   the ordering is unstable between python session due to hash
                   randomization.  Defaults to True.
       
               Returns a string suitable for use as the ``features`` argument to
               ``Target.create_target_machine()``.
       
               """
    1:         iterator = sorted(self.items()) if sort else iter(self.items())
    1:         flag_map = {True: '+', False: '-'}
    3:         return ','.join('{0}{1}'.format(flag_map[v], k)
    1:                         for k, v in iterator)
       
       
    1: def get_host_cpu_features():
           """
           Returns a dictionary-like object indicating the CPU features for current
           architecture and whether they are enabled for this CPU.  The key-value pairs
           are the feature name as string and a boolean indicating whether the feature
           is available.  The returned value is an instance of ``FeatureMap`` class,
           which adds a new method ``.flatten()`` for returning a string suitable for
           use as the "features" argument to ``Target.create_target_machine()``.
       
           If LLVM has not implemented this feature or it fails to get the information,
           this function will raise a RuntimeError exception.
           """
    2:     with ffi.OutputString() as out:
    1:         outdict = FeatureMap()
    1:         if not ffi.lib.LLVMPY_GetHostCPUFeatures(out):
    1:             return outdict
               flag_map = {'+': True, '-': False}
               content = str(out)
               if content:  # protect against empty string
                   for feat in content.split(','):
                       if feat:  # protect against empty feature
                           outdict[feat[1:]] = flag_map[feat[0]]
               return outdict
       
       
    1: def get_default_triple():
           """
           Return the default target triple LLVM is configured to produce code for.
           """
    2:     with ffi.OutputString() as out:
    1:         ffi.lib.LLVMPY_GetDefaultTargetTriple(out)
    1:         return str(out)
       
       
    1: def get_host_cpu_name():
           """
           Get the name of the host's CPU, suitable for using with
           :meth:`Target.create_target_machine()`.
           """
   10:     with ffi.OutputString() as out:
    5:         ffi.lib.LLVMPY_GetHostCPUName(out)
    5:         return str(out)
       
       
    1: _object_formats = {
    1:     1: "COFF",
    1:     2: "ELF",
    1:     3: "MachO",
       }
       
       
    1: def get_object_format(triple=None):
           """
           Get the object format for the given *triple* string (or the default
           triple if omitted).
           A string is returned
           """
           if triple is None:
               triple = get_default_triple()
           res = ffi.lib.LLVMPY_GetTripleObjectFormat(_encode_string(triple))
           return _object_formats[res]
       
       
    1: def create_target_data(layout):
           """
           Create a TargetData instance for the given *layout* string.
           """
           return TargetData(ffi.lib.LLVMPY_CreateTargetData(_encode_string(layout)))
       
       
    2: class TargetData(ffi.ObjectRef):
    1:     """
           A TargetData provides structured access to a data layout.
           Use :func:`create_target_data` to create instances.
           """
       
    1:     def __str__(self):
    1:         if self._closed:
                   return "<dead TargetData>"
    2:         with ffi.OutputString() as out:
    1:             ffi.lib.LLVMPY_CopyStringRepOfTargetData(self, out)
    1:             return str(out)
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeTargetData(self)
       
    1:     def get_abi_size(self, ty):
               """
               Get ABI size of LLVM type *ty*.
               """
               return ffi.lib.LLVMPY_ABISizeOfType(self, ty)
       
    1:     def get_element_offset(self, ty, position):
               """
               Get byte offset of type's ty element at the given position
               """
       
               offset = ffi.lib.LLVMPY_OffsetOfElement(self, ty, position)
               if offset == -1:
                   raise ValueError("Could not determined offset of {}th "
                                    "element of the type '{}'. Is it a struct"
                                    "type?".format(position, str(ty)))
               return offset
       
    1:     def get_pointee_abi_size(self, ty):
               """
               Get ABI size of pointee type of LLVM pointer type *ty*.
               """
   62:         size = ffi.lib.LLVMPY_ABISizeOfElementType(self, ty)
   62:         if size == -1:
                   raise RuntimeError("Not a pointer type: %s" % (ty,))
   62:         return size
       
    1:     def get_pointee_abi_alignment(self, ty):
               """
               Get minimum ABI alignment of pointee type of LLVM pointer type *ty*.
               """
               size = ffi.lib.LLVMPY_ABIAlignmentOfElementType(self, ty)
               if size == -1:
                   raise RuntimeError("Not a pointer type: %s" % (ty,))
               return size
       
       
    1: RELOC = frozenset(['default', 'static', 'pic', 'dynamicnopic'])
    1: CODEMODEL = frozenset(['default', 'jitdefault', 'small', 'kernel', 'medium',
                              'large'])
       
       
    2: class Target(ffi.ObjectRef):
    1:     _triple = ''
       
           # No _dispose() method since LLVMGetTargetFromTriple() returns a
           # persistent object.
       
    2:     @classmethod
    2:     def from_default_triple(cls):
               """
               Create a Target instance for the default triple.
               """
    1:         triple = get_default_triple()
    1:         return cls.from_triple(triple)
       
    2:     @classmethod
    2:     def from_triple(cls, triple):
               """
               Create a Target instance for the given triple (a string).
               """
    4:         with ffi.OutputString() as outerr:
    4:             target = ffi.lib.LLVMPY_GetTargetFromTriple(triple.encode('utf8'),
    2:                                                         outerr)
    2:             if not target:
                       raise RuntimeError(str(outerr))
    2:             target = cls(target)
    2:             target._triple = triple
    2:             return target
       
    2:     @property
    2:     def name(self):
    1:         s = ffi.lib.LLVMPY_GetTargetName(self)
    1:         return _decode_string(s)
       
    2:     @property
    2:     def description(self):
               s = ffi.lib.LLVMPY_GetTargetDescription(self)
               return _decode_string(s)
       
    2:     @property
    2:     def triple(self):
               return self._triple
       
    1:     def __str__(self):
               return "<Target {0} ({1})>".format(self.name, self.description)
       
    2:     def create_target_machine(self, cpu='', features='',
    1:                               opt=2, reloc='default', codemodel='jitdefault',
    1:                               printmc=False, jit=False, abiname=''):
               """
               Create a new TargetMachine for this target and the given options.
       
               Specifying codemodel='default' will result in the use of the "small"
               code model. Specifying codemodel='jitdefault' will result in the code
               model being picked based on platform bitness (32="small", 64="large").
       
               The `printmc` option corresponds to llvm's `-print-machineinstrs`.
       
               The `jit` option should be set when the target-machine is to be used
               in a JIT engine.
       
               The `abiname` option specifies the ABI. RISC-V targets with hard-float
               needs to pass the ABI name to LLVM.
               """
    1:         assert 0 <= opt <= 3
    1:         assert reloc in RELOC
    1:         assert codemodel in CODEMODEL
    1:         triple = self._triple
               # MCJIT under Windows only supports ELF objects, see
               # http://lists.llvm.org/pipermail/llvm-dev/2013-December/068341.html
               # Note we still want to produce regular COFF files in AOT mode.
    1:         if os.name == 'nt' and codemodel == 'jitdefault':
                   triple += '-elf'
    2:         tm = ffi.lib.LLVMPY_CreateTargetMachine(self,
    1:                                                 _encode_string(triple),
    1:                                                 _encode_string(cpu),
    1:                                                 _encode_string(features),
    1:                                                 opt,
    1:                                                 _encode_string(reloc),
    1:                                                 _encode_string(codemodel),
    1:                                                 int(printmc),
    1:                                                 int(jit),
    1:                                                 _encode_string(abiname),
                                                       )
    1:         if tm:
    1:             return TargetMachine(tm)
               else:
                   raise RuntimeError("Cannot create target machine")
       
       
    2: class TargetMachine(ffi.ObjectRef):
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeTargetMachine(self)
       
    1:     def add_analysis_passes(self, pm):
               """
               Register analysis passes for this target machine with a pass manager.
               """
   40:         ffi.lib.LLVMPY_AddAnalysisPasses(self, pm)
       
    1:     def set_asm_verbosity(self, verbose):
               """
               Set whether this target machine will emit assembly with human-readable
               comments describing control flow, debug information, and so on.
               """
               ffi.lib.LLVMPY_SetTargetMachineAsmVerbosity(self, verbose)
       
    1:     def emit_object(self, module):
               """
               Represent the module as a code object, suitable for use with
               the platform's linker.  Returns a byte string.
               """
               return self._emit_to_memory(module, use_object=True)
       
    1:     def emit_assembly(self, module):
               """
               Return the raw assembler of the module, as a string.
       
               llvm.initialize_native_asmprinter() must have been called first.
               """
               return _decode_string(self._emit_to_memory(module, use_object=False))
       
    1:     def _emit_to_memory(self, module, use_object=False):
               """Returns bytes of object code of the module.
       
               Args
               ----
               use_object : bool
                   Emit object code or (if False) emit assembly code.
               """
               with ffi.OutputString() as outerr:
                   mb = ffi.lib.LLVMPY_TargetMachineEmitToMemory(self, module,
                                                                 int(use_object),
                                                                 outerr)
                   if not mb:
                       raise RuntimeError(str(outerr))
       
               bufptr = ffi.lib.LLVMPY_GetBufferStart(mb)
               bufsz = ffi.lib.LLVMPY_GetBufferSize(mb)
               try:
                   return string_at(bufptr, bufsz)
               finally:
                   ffi.lib.LLVMPY_DisposeMemoryBuffer(mb)
       
    2:     @property
    2:     def target_data(self):
               return TargetData(ffi.lib.LLVMPY_CreateTargetMachineData(self))
       
    2:     @property
    2:     def triple(self):
               with ffi.OutputString() as out:
                   ffi.lib.LLVMPY_GetTargetMachineTriple(self, out)
                   return str(out)
       
       
    1: def has_svml():
           """
           Returns True if SVML was enabled at FFI support compile time.
           """
           if ffi.lib.LLVMPY_HasSVMLSupport() == 0:
               return False
           else:
               return True
       
       
       # ============================================================================
       # FFI
       
    1: ffi.lib.LLVMPY_GetProcessTriple.argtypes = [POINTER(c_char_p)]
       
    1: ffi.lib.LLVMPY_GetHostCPUFeatures.argtypes = [POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_GetHostCPUFeatures.restype = c_int
       
    1: ffi.lib.LLVMPY_GetDefaultTargetTriple.argtypes = [POINTER(c_char_p)]
       
    1: ffi.lib.LLVMPY_GetHostCPUName.argtypes = [POINTER(c_char_p)]
       
    1: ffi.lib.LLVMPY_GetTripleObjectFormat.argtypes = [c_char_p]
    1: ffi.lib.LLVMPY_GetTripleObjectFormat.restype = c_int
       
    1: ffi.lib.LLVMPY_CreateTargetData.argtypes = [c_char_p]
    1: ffi.lib.LLVMPY_CreateTargetData.restype = ffi.LLVMTargetDataRef
       
    1: ffi.lib.LLVMPY_CopyStringRepOfTargetData.argtypes = [
    1:     ffi.LLVMTargetDataRef,
    1:     POINTER(c_char_p),
       ]
       
    1: ffi.lib.LLVMPY_DisposeTargetData.argtypes = [
    1:     ffi.LLVMTargetDataRef,
       ]
       
    2: ffi.lib.LLVMPY_ABISizeOfType.argtypes = [ffi.LLVMTargetDataRef,
    1:                                          ffi.LLVMTypeRef]
    1: ffi.lib.LLVMPY_ABISizeOfType.restype = c_longlong
       
    2: ffi.lib.LLVMPY_OffsetOfElement.argtypes = [ffi.LLVMTargetDataRef,
    1:                                            ffi.LLVMTypeRef,
    1:                                            c_int]
    1: ffi.lib.LLVMPY_OffsetOfElement.restype = c_longlong
       
    2: ffi.lib.LLVMPY_ABISizeOfElementType.argtypes = [ffi.LLVMTargetDataRef,
    1:                                                 ffi.LLVMTypeRef]
    1: ffi.lib.LLVMPY_ABISizeOfElementType.restype = c_longlong
       
    2: ffi.lib.LLVMPY_ABIAlignmentOfElementType.argtypes = [ffi.LLVMTargetDataRef,
    1:                                                      ffi.LLVMTypeRef]
    1: ffi.lib.LLVMPY_ABIAlignmentOfElementType.restype = c_longlong
       
    1: ffi.lib.LLVMPY_GetTargetFromTriple.argtypes = [c_char_p, POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_GetTargetFromTriple.restype = ffi.LLVMTargetRef
       
    1: ffi.lib.LLVMPY_GetTargetName.argtypes = [ffi.LLVMTargetRef]
    1: ffi.lib.LLVMPY_GetTargetName.restype = c_char_p
       
    1: ffi.lib.LLVMPY_GetTargetDescription.argtypes = [ffi.LLVMTargetRef]
    1: ffi.lib.LLVMPY_GetTargetDescription.restype = c_char_p
       
    1: ffi.lib.LLVMPY_CreateTargetMachine.argtypes = [
    1:     ffi.LLVMTargetRef,
           # Triple
    1:     c_char_p,
           # CPU
    1:     c_char_p,
           # Features
    1:     c_char_p,
           # OptLevel
    1:     c_int,
           # Reloc
    1:     c_char_p,
           # CodeModel
    1:     c_char_p,
           # PrintMC
    1:     c_int,
           # JIT
    1:     c_int,
           # ABIName
    1:     c_char_p,
       ]
    1: ffi.lib.LLVMPY_CreateTargetMachine.restype = ffi.LLVMTargetMachineRef
       
    1: ffi.lib.LLVMPY_DisposeTargetMachine.argtypes = [ffi.LLVMTargetMachineRef]
       
    2: ffi.lib.LLVMPY_GetTargetMachineTriple.argtypes = [ffi.LLVMTargetMachineRef,
    1:                                                   POINTER(c_char_p)]
       
    1: ffi.lib.LLVMPY_SetTargetMachineAsmVerbosity.argtypes = [
    1:     ffi.LLVMTargetMachineRef, c_int]
       
    1: ffi.lib.LLVMPY_AddAnalysisPasses.argtypes = [
    1:     ffi.LLVMTargetMachineRef,
    1:     ffi.LLVMPassManagerRef,
       ]
       
    1: ffi.lib.LLVMPY_TargetMachineEmitToMemory.argtypes = [
    1:     ffi.LLVMTargetMachineRef,
    1:     ffi.LLVMModuleRef,
    1:     c_int,
    1:     POINTER(c_char_p),
       ]
    1: ffi.lib.LLVMPY_TargetMachineEmitToMemory.restype = ffi.LLVMMemoryBufferRef
       
    1: ffi.lib.LLVMPY_GetBufferStart.argtypes = [ffi.LLVMMemoryBufferRef]
    1: ffi.lib.LLVMPY_GetBufferStart.restype = c_void_p
       
    1: ffi.lib.LLVMPY_GetBufferSize.argtypes = [ffi.LLVMMemoryBufferRef]
    1: ffi.lib.LLVMPY_GetBufferSize.restype = c_size_t
       
    1: ffi.lib.LLVMPY_DisposeMemoryBuffer.argtypes = [ffi.LLVMMemoryBufferRef]
       
    1: ffi.lib.LLVMPY_CreateTargetMachineData.argtypes = [
    1:     ffi.LLVMTargetMachineRef,
       ]
    1: ffi.lib.LLVMPY_CreateTargetMachineData.restype = ffi.LLVMTargetDataRef
       
    1: ffi.lib.LLVMPY_HasSVMLSupport.argtypes = []
    1: ffi.lib.LLVMPY_HasSVMLSupport.restype = c_int
