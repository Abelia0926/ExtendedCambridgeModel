    1: import collections
       
    1: from llvmlite.ir import context, values, types, _utils
       
       
    2: class Module(object):
    1:     def __init__(self, name='', context=context.global_context):
  129:         self.context = context
  129:         self.name = name   # name is for debugging/informational
  129:         self.data_layout = ""
  129:         self.scope = _utils.NameScope()
  129:         self.triple = 'unknown-unknown-unknown'
  129:         self.globals = collections.OrderedDict()
               # Innamed metadata nodes.
  129:         self.metadata = []
               # Named metadata nodes
  129:         self.namedmetadata = {}
               # Cache for metadata node deduplication
  129:         self._metadatacache = {}
       
    1:     def _fix_metadata_operands(self, operands):
  378:         fixed_ops = []
 1326:         for op in operands:
  948:             if op is None:
                       # A literal None creates a null metadata value
                       op = types.MetaDataType()(None)
  948:             elif isinstance(op, str):
                       # A literal string creates a metadata string value
                       op = values.MetaDataString(self, op)
  948:             elif isinstance(op, (list, tuple)):
                       # A sequence creates a metadata node reference
                       op = self.add_metadata(op)
  948:             fixed_ops.append(op)
  378:         return fixed_ops
       
    1:     def _fix_di_operands(self, operands):
               fixed_ops = []
               for name, op in operands:
                   if isinstance(op, (list, tuple)):
                       # A sequence creates a metadata node reference
                       op = self.add_metadata(op)
                   fixed_ops.append((name, op))
               return fixed_ops
       
    1:     def add_metadata(self, operands):
               """
               Add an unnamed metadata to the module with the given *operands*
               (a sequence of values) or return a previous equivalent metadata.
               A MDValue instance is returned, it can then be associated to
               e.g. an instruction.
               """
  378:         if not isinstance(operands, (list, tuple)):
                   raise TypeError("expected a list or tuple of metadata values, "
                                   "got %r" % (operands,))
  378:         operands = self._fix_metadata_operands(operands)
  378:         key = tuple(operands)
  378:         if key not in self._metadatacache:
   54:             n = len(self.metadata)
   54:             md = values.MDValue(self, operands, name=str(n))
   54:             self._metadatacache[key] = md
               else:
  324:             md = self._metadatacache[key]
  378:         return md
       
    1:     def add_debug_info(self, kind, operands, is_distinct=False):
               """
               Add debug information metadata to the module with the given
               *operands* (a dict of values with string keys) or return
               a previous equivalent metadata.  *kind* is a string of the
               debug information kind (e.g. "DICompileUnit").
       
               A DIValue instance is returned, it can then be associated to e.g.
               an instruction.
               """
               operands = tuple(sorted(self._fix_di_operands(operands.items())))
               key = (kind, operands, is_distinct)
               if key not in self._metadatacache:
                   n = len(self.metadata)
                   di = values.DIValue(self, is_distinct, kind, operands, name=str(n))
                   self._metadatacache[key] = di
               else:
                   di = self._metadatacache[key]
               return di
       
    1:     def add_named_metadata(self, name, element=None):
               """
               Add a named metadata node to the module, if it doesn't exist,
               or return the existing node.
               If *element* is given, it will append a new element to
               the named metadata node.  If *element* is a sequence of values
               (rather than a metadata value), a new unnamed node will first be
               created.
       
               Example::
                   module.add_named_metadata("llvm.ident", ["llvmlite/1.0"])
               """
               if name in self.namedmetadata:
                   nmd = self.namedmetadata[name]
               else:
                   nmd = self.namedmetadata[name] = values.NamedMetaData(self)
               if element is not None:
                   if not isinstance(element, values.Value):
                       element = self.add_metadata(element)
                   if not isinstance(element.type, types.MetaDataType):
                       raise TypeError("wrong type for metadata element: got %r"
                                       % (element,))
                   nmd.add(element)
               return nmd
       
    1:     def get_named_metadata(self, name):
               """
               Return the metadata node with the given *name*.  KeyError is raised
               if no such node exists (contrast with add_named_metadata()).
               """
   24:         return self.namedmetadata[name]
       
    2:     @property
    2:     def functions(self):
               """
               A list of functions declared or defined in this module.
               """
  142:         return [v for v in self.globals.values()
   55:                 if isinstance(v, values.Function)]
       
    2:     @property
    2:     def global_values(self):
               """
               An iterable of global values in this module.
               """
               return self.globals.values()
       
    1:     def get_global(self, name):
               """
               Get a global value by name.
               """
  129:         return self.globals[name]
       
    1:     def add_global(self, globalvalue):
               """
               Add a new global value.
               """
  558:         assert globalvalue.name not in self.globals
  558:         self.globals[globalvalue.name] = globalvalue
       
    1:     def get_unique_name(self, name=''):
               """
               Get a unique global name with the following *name* hint.
               """
  166:         return self.scope.deduplicate(name)
       
    1:     def declare_intrinsic(self, intrinsic, tys=(), fnty=None):
   18:         def _error():
                   raise NotImplementedError("unknown intrinsic %r with %d types"
                                             % (intrinsic, len(tys)))
       
   18:         if intrinsic in {'llvm.cttz', 'llvm.ctlz', 'llvm.fma'}:
                   suffixes = [tys[0].intrinsic_name]
               else:
   55:             suffixes = [t.intrinsic_name for t in tys]
   18:         name = '.'.join([intrinsic] + suffixes)
   18:         if name in self.globals:
   12:             return self.globals[name]
       
    6:         if fnty is not None:
                   # General case: function type is given
    4:             pass
               # Compute function type if omitted for common cases
    2:         elif len(tys) == 0 and intrinsic == 'llvm.assume':
                   fnty = types.FunctionType(types.VoidType(), [types.IntType(1)])
    2:         elif len(tys) == 1:
    1:             if intrinsic == 'llvm.powi':
                       fnty = types.FunctionType(tys[0], [tys[0], types.IntType(32)])
    1:             elif intrinsic == 'llvm.pow':
    1:                 fnty = types.FunctionType(tys[0], tys * 2)
                   elif intrinsic == 'llvm.convert.from.fp16':
                       fnty = types.FunctionType(tys[0], [types.IntType(16)])
                   elif intrinsic == 'llvm.convert.to.fp16':
                       fnty = types.FunctionType(types.IntType(16), tys)
                   else:
                       fnty = types.FunctionType(tys[0], tys)
    1:         elif len(tys) == 2:
    1:             if intrinsic == 'llvm.memset':
    2:                 tys = [tys[0], types.IntType(8), tys[1],
    1:                        types.IntType(1)]
    1:                 fnty = types.FunctionType(types.VoidType(), tys)
                   elif intrinsic in {'llvm.cttz', 'llvm.ctlz'}:
                       tys = [tys[0], types.IntType(1)]
                       fnty = types.FunctionType(tys[0], tys)
                   else:
                       _error()
               elif len(tys) == 3:
                   if intrinsic in ('llvm.memcpy', 'llvm.memmove'):
                       tys = tys + [types.IntType(1)]
                       fnty = types.FunctionType(types.VoidType(), tys)
                   elif intrinsic == 'llvm.fma':
                       tys = [tys[0]] * 3
                       fnty = types.FunctionType(tys[0], tys)
                   else:
                       _error()
               else:
                   _error()
    6:         return values.Function(self, fnty, name=name)
       
    1:     def get_identified_types(self):
  129:         return self.context.identified_types
       
    1:     def _get_body_lines(self):
               # Type declarations
  387:         lines = [it.get_declaration()
  129:                  for it in self.get_identified_types().values()]
               # Global values (including function definitions)
  816:         lines += [str(v) for v in self.globals.values()]
  129:         return lines
       
    1:     def _get_metadata_lines(self):
  129:         mdbuf = []
  129:         for k, v in self.namedmetadata.items():
                   mdbuf.append("!{name} = !{{ {operands} }}".format(
                       name=k, operands=', '.join(i.get_reference()
                                                  for i in v.operands)))
  183:         for md in self.metadata:
   54:             mdbuf.append(str(md))
  129:         return mdbuf
       
    1:     def _stringify_body(self):
               # For testing
               return "\n".join(self._get_body_lines())
       
    1:     def _stringify_metadata(self):
               # For testing
               return "\n".join(self._get_metadata_lines())
       
    1:     def __repr__(self):
  129:         lines = []
               # Header
  258:         lines += [
  129:             '; ModuleID = "%s"' % (self.name,),
  129:             'target triple = "%s"' % (self.triple,),
  129:             'target datalayout = "%s"' % (self.data_layout,),
  129:             '']
               # Body
  129:         lines += self._get_body_lines()
               # Metadata
  129:         lines += self._get_metadata_lines()
       
  129:         return "\n".join(lines)
