    1: import _signal
    1: from _signal import *
    1: from enum import IntEnum as _IntEnum
       
    1: _globals = globals()
       
    2: _IntEnum._convert_(
    1:         'Signals', __name__,
   70:         lambda name:
  110:             name.isupper()
   41:             and (name.startswith('SIG') and not name.startswith('SIG_'))
   37:             or name.startswith('CTRL_'))
       
    2: _IntEnum._convert_(
    1:         'Handlers', __name__,
   71:         lambda name: name in ('SIG_DFL', 'SIG_IGN'))
       
    1: if 'pthread_sigmask' in _globals:
    2:     _IntEnum._convert_(
    1:             'Sigmasks', __name__,
   72:             lambda name: name in ('SIG_BLOCK', 'SIG_UNBLOCK', 'SIG_SETMASK'))
       
       
    1: def _int_to_enum(value, enum_klass):
           """Convert a numeric value to an IntEnum member.
           If it's not a known member, return the numeric value itself.
           """
    2:     try:
    2:         return enum_klass(value)
           except ValueError:
               return value
       
       
    1: def _enum_to_int(value):
           """Convert an IntEnum member to a numeric value.
           If it's not an IntEnum member return the value itself.
           """
           try:
               return int(value)
           except (ValueError, TypeError):
               return value
       
       
       # Similar to functools.wraps(), but only assign __doc__.
       # __module__ should be preserved,
       # __name__ and __qualname__ are already fine,
       # __annotations__ is not set.
    1: def _wraps(wrapped):
    6:     def decorator(wrapper):
    6:         wrapper.__doc__ = wrapped.__doc__
    6:         return wrapper
    6:     return decorator
       
    2: @_wraps(_signal.signal)
    2: def signal(signalnum, handler):
           handler = _signal.signal(_enum_to_int(signalnum), _enum_to_int(handler))
           return _int_to_enum(handler, Handlers)
       
       
    2: @_wraps(_signal.getsignal)
    2: def getsignal(signalnum):
           handler = _signal.getsignal(signalnum)
           return _int_to_enum(handler, Handlers)
       
       
    1: if 'pthread_sigmask' in _globals:
    2:     @_wraps(_signal.pthread_sigmask)
    2:     def pthread_sigmask(how, mask):
    2:         sigs_set = _signal.pthread_sigmask(how, mask)
    6:         return set(_int_to_enum(x, Signals) for x in sigs_set)
       
       
    1: if 'sigpending' in _globals:
    2:     @_wraps(_signal.sigpending)
    2:     def sigpending():
               return {_int_to_enum(x, Signals) for x in _signal.sigpending()}
       
       
    1: if 'sigwait' in _globals:
    2:     @_wraps(_signal.sigwait)
    2:     def sigwait(sigset):
               retsig = _signal.sigwait(sigset)
               return _int_to_enum(retsig, Signals)
       
       
    1: if 'valid_signals' in _globals:
    2:     @_wraps(_signal.valid_signals)
    2:     def valid_signals():
               return {_int_to_enum(x, Signals) for x in _signal.valid_signals()}
       
       
    1: del _globals, _wraps
