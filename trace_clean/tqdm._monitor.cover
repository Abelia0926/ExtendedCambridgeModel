    1: import atexit
    1: from threading import Event, Thread, current_thread
    1: from time import time
    1: from warnings import warn
       
    1: __all__ = ["TMonitor", "TqdmSynchronisationWarning"]
       
       
    2: class TqdmSynchronisationWarning(RuntimeWarning):
    1:     """tqdm multi-thread/-process errors which may cause incorrect nesting
           but otherwise no adverse effects"""
    1:     pass
       
       
    2: class TMonitor(Thread):
    1:     """
           Monitoring thread for tqdm bars.
           Monitors if tqdm bars are taking too much time to display
           and readjusts miniters automatically if necessary.
       
           Parameters
           ----------
           tqdm_cls  : class
               tqdm class to use (can be core tqdm or a submodule).
           sleep_interval  : float
               Time to sleep between monitoring checks.
           """
    1:     _test = {}  # internal vars for unit testing
       
    1:     def __init__(self, tqdm_cls, sleep_interval):
    1:         Thread.__init__(self)
    1:         self.daemon = True  # kill thread when main killed (KeyboardInterrupt)
    1:         self.woken = 0  # last time woken up, to sync with monitor
    1:         self.tqdm_cls = tqdm_cls
    1:         self.sleep_interval = sleep_interval
    1:         self._time = self._test.get("time", time)
    1:         self.was_killed = self._test.get("Event", Event)()
    1:         atexit.register(self.exit)
    1:         self.start()
       
    1:     def exit(self):
               self.was_killed.set()
               if self is not current_thread():
                   self.join()
               return self.report()
       
    1:     def get_instances(self):
               # returns a copy of started `tqdm_cls` instances
               return [i for i in self.tqdm_cls._instances.copy()
                       # Avoid race by checking that the instance started
                       if hasattr(i, 'start_t')]
       
    1:     def run(self):
    1:         cur_t = self._time()
    1:         while True:
                   # After processing and before sleeping, notify that we woke
                   # Need to be done just before sleeping
    1:             self.woken = cur_t
                   # Sleep some time...
    1:             self.was_killed.wait(self.sleep_interval)
                   # Quit if killed
                   if self.was_killed.is_set():
                       return
                   # Then monitor!
                   # Acquire lock (to access _instances)
                   with self.tqdm_cls.get_lock():
                       cur_t = self._time()
                       # Check tqdm instances are waiting too long to print
                       instances = self.get_instances()
                       for instance in instances:
                           # Check event in loop to reduce blocking time on exit
                           if self.was_killed.is_set():
                               return
                           # Only if mininterval > 1 (else iterations are just slow)
                           # and last refresh exceeded maxinterval
                           if (
                               instance.miniters > 1
                               and (cur_t - instance.last_print_t) >= instance.maxinterval
                           ):
                               # force bypassing miniters on next iteration
                               # (dynamic_miniters adjusts mininterval automatically)
                               instance.miniters = 1
                               # Refresh now! (works only for manual tqdm)
                               instance.refresh(nolock=True)
                           # Remove accidental long-lived strong reference
                           del instance
                       if instances != self.get_instances():  # pragma: nocover
                           warn("Set changed size during iteration" +
                                " (see https://github.com/tqdm/tqdm/issues/481)",
                                TqdmSynchronisationWarning, stacklevel=2)
                       # Remove accidental long-lived strong references
                       del instances
       
    1:     def report(self):
    2:         return not self.was_killed.is_set()
