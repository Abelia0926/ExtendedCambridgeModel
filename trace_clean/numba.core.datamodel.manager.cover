    1: import weakref
    1: from collections import ChainMap
       
    1: from numba.core import types
       
       
    2: class DataModelManager(object):
    1:     """Manages mapping of FE types to their corresponding data model
           """
       
    1:     def __init__(self, handlers=None):
               """
               Parameters
               -----------
               handlers: Mapping[Type, DataModel] or None
                   Optionally provide the initial handlers mapping.
               """
               # { numba type class -> model factory }
    1:         self._handlers = handlers or {}
               # { numba type instance -> model instance }
    1:         self._cache = weakref.WeakKeyDictionary()
       
    1:     def register(self, fetypecls, handler):
               """Register the datamodel factory corresponding to a frontend-type class
               """
  110:         assert issubclass(fetypecls, types.Type)
  110:         self._handlers[fetypecls] = handler
       
    1:     def lookup(self, fetype):
               """Returns the corresponding datamodel given the frontend-type instance
               """
 4793:         try:
 4793:             return self._cache[fetype]
   82:         except KeyError:
   82:             pass
   82:         handler = self._handlers[type(fetype)]
   82:         model = self._cache[fetype] = handler(self, fetype)
   82:         return model
       
    1:     def __getitem__(self, fetype):
               """Shorthand for lookup()
               """
 4189:         return self.lookup(fetype)
       
    1:     def copy(self):
               """
               Make a copy of the manager.
               Use this to inherit from the default data model and specialize it
               for custom target.
               """
               return DataModelManager(self._handlers.copy())
       
    1:     def chain(self, other_manager):
               """Create a new DataModelManager by chaining the handlers mapping of
               `other_manager` with a fresh handlers mapping.
       
               Any existing and new handlers inserted to `other_manager` will be
               visible to the new manager. Any handlers inserted to the new manager
               can override existing handlers in `other_manager` without actually
               mutating `other_manager`.
       
               Parameters
               ----------
               other_manager: DataModelManager
               """
               chained = ChainMap(self._handlers, other_manager._handlers)
               return DataModelManager(chained)
       
