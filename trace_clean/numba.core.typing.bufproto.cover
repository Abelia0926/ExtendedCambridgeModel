    1: """
       Typing support for the buffer protocol (PEP 3118).
       """
       
    1: import array
       
    1: from numba.core import types
       
       
    1: _pep3118_int_types = set('bBhHiIlLqQnN')
       
    1: _pep3118_scalar_map = {
    1:     'f': types.float32,
    1:     'd': types.float64,
    1:     'Zf': types.complex64,
    1:     'Zd': types.complex128,
           }
       
    1: _type_map = {
    1:     bytearray: types.ByteArray,
    1:     array.array: types.PyArray,
           }
       
    1: _type_map[memoryview] = types.MemoryView
    1: _type_map[bytes] = types.Bytes
       
       
    1: def decode_pep3118_format(fmt, itemsize):
           """
           Return the Numba type for an item with format string *fmt* and size
           *itemsize* (in bytes).
           """
           # XXX reuse _dtype_from_pep3118() from np.core._internal?
           if fmt in _pep3118_int_types:
               # Determine int width and signedness
               name = 'int%d' % (itemsize * 8,)
               if fmt.isupper():
                   name = 'u' + name
               return types.Integer(name)
           try:
               # For the hard-coded types above, consider "=" the same as "@"
               # (the default).  This is because Numpy sometimes adds "="
               # in front of the PEP 3118 format string.
               return _pep3118_scalar_map[fmt.lstrip('=')]
           except KeyError:
               raise ValueError("unsupported PEP 3118 format %r" % (fmt,))
       
       
    1: def get_type_class(typ):
           """
           Get the Numba type class for buffer-compatible Python *typ*.
           """
           try:
               # Look up special case.
               return _type_map[typ]
           except KeyError:
               # Fall back on generic one.
               return types.Buffer
       
       
    1: def infer_layout(val):
           """
           Infer layout of the given memoryview *val*.
           """
           return ('C' if val.c_contiguous else
                   'F' if val.f_contiguous else
                   'A')
