    1: from __future__ import annotations
       
    1: import collections.abc as c
    1: import inspect
    1: import typing as t
    1: from weakref import ref
    1: from weakref import WeakMethod
       
    1: T = t.TypeVar("T")
       
       
    2: class Symbol:
    1:     """A constant symbol, nicer than ``object()``. Repeated calls return the
           same instance.
       
           >>> Symbol('foo') is Symbol('foo')
           True
           >>> Symbol('foo')
           foo
           """
       
    1:     symbols: t.ClassVar[dict[str, Symbol]] = {}
       
    1:     def __new__(cls, name: str) -> Symbol:
    1:         if name in cls.symbols:
                   return cls.symbols[name]
       
    1:         obj = super().__new__(cls)
    1:         cls.symbols[name] = obj
    1:         return obj
       
    1:     def __init__(self, name: str) -> None:
    1:         self.name = name
       
    1:     def __repr__(self) -> str:
               return self.name
       
    1:     def __getnewargs__(self) -> tuple[t.Any, ...]:
               return (self.name,)
       
       
    1: def make_id(obj: object) -> c.Hashable:
           """Get a stable identifier for a receiver or sender, to be used as a dict
           key or in a set.
           """
    3:     if inspect.ismethod(obj):
               # The id of a bound method is not stable, but the id of the unbound
               # function and instance are.
               return id(obj.__func__), id(obj.__self__)
       
    3:     if isinstance(obj, (str, int)):
               # Instances with the same value always compare equal and have the same
               # hash, even if the id may change.
               return obj
       
           # Assume other types are not hashable but will always be the same instance.
    3:     return id(obj)
       
       
    1: def make_ref(obj: T, callback: c.Callable[[ref[T]], None] | None = None) -> ref[T]:
           if inspect.ismethod(obj):
               return WeakMethod(obj, callback)  # type: ignore[arg-type, return-value]
       
           return ref(obj, callback)
