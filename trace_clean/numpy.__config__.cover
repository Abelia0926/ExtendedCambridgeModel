       # This file is generated by numpy's build process
       # It contains system_info results at the time of building this package.
    1: from enum import Enum
    1: from numpy.core._multiarray_umath import (
           __cpu_features__,
           __cpu_baseline__,
           __cpu_dispatch__,
       )
       
    1: __all__ = ["show"]
    1: _built_with_meson = True
       
       
    2: class DisplayModes(Enum):
    1:     stdout = "stdout"
    1:     dicts = "dicts"
       
       
    1: def _cleanup(d):
           """
           Removes empty values in a `dict` recursively
           This ensures we remove values that Meson could not provide to CONFIG
           """
  379:     if isinstance(d, dict):
  277:         return {k: _cleanup(v) for k, v in d.items() if v and _cleanup(v)}
           else:
  340:         return d
       
       
    2: CONFIG = _cleanup(
    1:     {
    1:         "Compilers": {
    1:             "c": {
    1:                 "name": "clang",
    1:                 "linker": r"ld64",
    1:                 "version": "14.0.0",
    1:                 "commands": r"cc",
    1:                 "args": r"-fno-strict-aliasing, -DBLAS_SYMBOL_SUFFIX=64_, -DHAVE_BLAS_ILP64",
    1:                 "linker args": r"-fno-strict-aliasing, -DBLAS_SYMBOL_SUFFIX=64_, -DHAVE_BLAS_ILP64",
                   },
    1:             "cython": {
    1:                 "name": "cython",
    1:                 "linker": r"cython",
    1:                 "version": "3.0.8",
    1:                 "commands": r"cython",
    1:                 "args": r"",
    1:                 "linker args": r"",
                   },
    1:             "c++": {
    1:                 "name": "clang",
    1:                 "linker": r"ld64",
    1:                 "version": "14.0.0",
    1:                 "commands": r"c++",
    1:                 "args": r"-DBLAS_SYMBOL_SUFFIX=64_, -DHAVE_BLAS_ILP64",
    1:                 "linker args": r"-DBLAS_SYMBOL_SUFFIX=64_, -DHAVE_BLAS_ILP64",
                   },
               },
    1:         "Machine Information": {
    1:             "host": {
    1:                 "cpu": "aarch64",
    1:                 "family": "aarch64",
    1:                 "endian": "little",
    1:                 "system": "darwin",
                   },
    1:             "build": {
    1:                 "cpu": "aarch64",
    1:                 "family": "aarch64",
    1:                 "endian": "little",
    1:                 "system": "darwin",
                   },
    1:             "cross-compiled": bool("False".lower().replace("false", "")),
               },
    1:         "Build Dependencies": {
    1:             "blas": {
    1:                 "name": "openblas64",
    1:                 "found": bool("True".lower().replace("false", "")),
    1:                 "version": "0.3.23.dev",
    1:                 "detection method": "pkgconfig",
    1:                 "include directory": r"/opt/arm64-builds/include",
    1:                 "lib directory": r"/opt/arm64-builds/lib",
    1:                 "openblas configuration": r"USE_64BITINT=1 DYNAMIC_ARCH=1 DYNAMIC_OLDER= NO_CBLAS= NO_LAPACK= NO_LAPACKE= NO_AFFINITY=1 USE_OPENMP= SANDYBRIDGE MAX_THREADS=3",
    1:                 "pc file directory": r"/usr/local/lib/pkgconfig",
                   },
    1:             "lapack": {
    1:                 "name": "dep4350285776",
    1:                 "found": bool("True".lower().replace("false", "")),
    1:                 "version": "1.26.4",
    1:                 "detection method": "internal",
    1:                 "include directory": r"unknown",
    1:                 "lib directory": r"unknown",
    1:                 "openblas configuration": r"unknown",
    1:                 "pc file directory": r"unknown",
                   },
               },
    1:         "Python Information": {
    1:             "path": r"/private/var/folders/76/zy5ktkns50v6gt5g8r0sf6sc0000gn/T/cibw-run-iyy0yn4s/cp311-macosx_arm64/build/venv/bin/python",
    1:             "version": "3.11",
               },
    1:         "SIMD Extensions": {
    1:             "baseline": __cpu_baseline__,
    8:             "found": [
    4:                 feature for feature in __cpu_dispatch__ if __cpu_features__[feature]
                   ],
    8:             "not found": [
    4:                 feature for feature in __cpu_dispatch__ if not __cpu_features__[feature]
                   ],
               },
           }
       )
       
       
    1: def _check_pyyaml():
           import yaml
       
           return yaml
       
       
    1: def show(mode=DisplayModes.stdout.value):
           """
           Show libraries and system information on which NumPy was built
           and is being used
       
           Parameters
           ----------
           mode : {`'stdout'`, `'dicts'`}, optional.
               Indicates how to display the config information.
               `'stdout'` prints to console, `'dicts'` returns a dictionary
               of the configuration.
       
           Returns
           -------
           out : {`dict`, `None`}
               If mode is `'dicts'`, a dict is returned, else None
       
           See Also
           --------
           get_include : Returns the directory containing NumPy C
                         header files.
       
           Notes
           -----
           1. The `'stdout'` mode will give more readable
              output if ``pyyaml`` is installed
       
           """
           if mode == DisplayModes.stdout.value:
               try:  # Non-standard library, check import
                   yaml = _check_pyyaml()
       
                   print(yaml.dump(CONFIG))
               except ModuleNotFoundError:
                   import warnings
                   import json
       
                   warnings.warn("Install `pyyaml` for better output", stacklevel=1)
                   print(json.dumps(CONFIG, indent=2))
           elif mode == DisplayModes.dicts.value:
               return CONFIG
           else:
               raise AttributeError(
                   f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
               )
