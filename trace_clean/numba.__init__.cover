    1: """
       Expose top-level symbols that are safe for import *
       """
       
    1: import platform
    1: import re
    1: import sys
    1: import warnings
       
       
       # ---------------------- WARNING WARNING WARNING ----------------------------
       # THIS MUST RUN FIRST, DO NOT MOVE... SEE DOCSTRING IN _ensure_critical_deps
    1: def _ensure_critical_deps():
           """
           Make sure the Python, NumPy and SciPy present are supported versions.
           This has to be done _before_ importing anything from Numba such that
           incompatible versions can be reported to the user. If this occurs _after_
           importing things from Numba and there's an issue in e.g. a Numba c-ext, a
           SystemError might have occurred which prevents reporting the likely cause of
           the problem (incompatible versions of critical dependencies).
           """
           #NOTE THIS CODE SHOULD NOT IMPORT ANYTHING FROM NUMBA!
       
    1:     def extract_version(mod):
    2:         return tuple(map(int, mod.__version__.split('.')[:2]))
       
    1:     PYVERSION = sys.version_info[:2]
       
    1:     if PYVERSION < (3, 9):
               msg = ("Numba needs Python 3.9 or greater. Got Python "
                      f"{PYVERSION[0]}.{PYVERSION[1]}.")
               raise ImportError(msg)
       
    1:     import numpy as np
    1:     numpy_version = extract_version(np)
       
    1:     if numpy_version < (1, 22):
               msg = (f"Numba needs NumPy 1.22 or greater. Got NumPy "
                      f"{numpy_version[0]}.{numpy_version[1]}.")
               raise ImportError(msg)
    1:     elif numpy_version > (1, 26):
               raise ImportError("Numba needs NumPy 1.26 or less")
       
    1:     try:
    1:         import scipy
           except ImportError:
               pass
           else:
    1:         sp_version = extract_version(scipy)
    1:         if sp_version < (1, 0):
                   msg = ("Numba requires SciPy version 1.0 or greater. Got SciPy "
                          f"{scipy.__version__}.")
                   raise ImportError(msg)
       
       
    1: _ensure_critical_deps()
       # END DO NOT MOVE
       # ---------------------- WARNING WARNING WARNING ----------------------------
       
       
    1: from ._version import get_versions
    1: from numba.misc.init_utils import generate_version_info
       
    1: __version__ = get_versions()['version']
    1: version_info = generate_version_info(__version__)
    1: del get_versions
    1: del generate_version_info
       
       
    1: from numba.core import config
    1: from numba.core import types, errors
       
       # Re-export typeof
    1: from numba.misc.special import (
           typeof, prange, pndindex, gdb, gdb_breakpoint, gdb_init,
           literally, literal_unroll,
       )
       
       # Re-export error classes
    1: from numba.core.errors import *
       
       # Re-export types itself
    1: import numba.core.types as types
       
       # Re-export all type names
    1: from numba.core.types import *
       
       # Re-export decorators
    1: from numba.core.decorators import (cfunc, jit, njit, stencil,
                                          jit_module)
       
       # Re-export vectorize decorators and the thread layer querying function
    1: from numba.np.ufunc import (vectorize, guvectorize, threading_layer,
                                   get_num_threads, set_num_threads,
                                   set_parallel_chunksize, get_parallel_chunksize,
                                   get_thread_id)
       
       # Re-export Numpy helpers
    1: from numba.np.numpy_support import carray, farray, from_dtype
       
       # Re-export experimental
    1: from numba import experimental
       
       # Initialize withcontexts
    1: import numba.core.withcontexts
    1: from numba.core.withcontexts import objmode_context as objmode
    1: from numba.core.withcontexts import parallel_chunksize
       
       # Initialize target extensions
    1: import numba.core.target_extension
       
       # Initialize typed containers
    1: import numba.typed
       
       # Keep this for backward compatibility.
    1: def test(argv, **kwds):
           # To speed up the import time, avoid importing `unittest` and other test
           # dependencies unless the user is actually trying to run tests.
           from numba.testing import _runtests as runtests
           return runtests.main(argv, **kwds)
       
    3: __all__ = """
           cfunc
           from_dtype
           guvectorize
           jit
           experimental
           njit
           stencil
           jit_module
           typeof
           prange
           gdb
           gdb_breakpoint
           gdb_init
           vectorize
           objmode
           literal_unroll
           get_num_threads
           set_num_threads
           set_parallel_chunksize
           get_parallel_chunksize
           parallel_chunksize
    2:     """.split() + types.__all__ + errors.__all__
       
       
    1: _min_llvmlite_version = (0, 42, 0)
    1: _min_llvm_version = (14, 0, 0)
       
    1: def _ensure_llvm():
           """
           Make sure llvmlite is operational.
           """
    1:     import warnings
    1:     import llvmlite
       
           # Only look at the the major, minor and bugfix version numbers.
           # Ignore other stuffs
    1:     regex = re.compile(r'(\d+)\.(\d+).(\d+)')
    1:     m = regex.match(llvmlite.__version__)
    1:     if m:
    1:         ver = tuple(map(int, m.groups()))
    1:         if ver < _min_llvmlite_version:
                   msg = ("Numba requires at least version %d.%d.%d of llvmlite.\n"
                          "Installed version is %s.\n"
                          "Please update llvmlite." %
                          (_min_llvmlite_version + (llvmlite.__version__,)))
                   raise ImportError(msg)
           else:
               # Not matching?
               warnings.warn("llvmlite version format not recognized!")
       
    1:     from llvmlite.binding import llvm_version_info, check_jit_execution
       
    1:     if llvm_version_info < _min_llvm_version:
               msg = ("Numba requires at least version %d.%d.%d of LLVM.\n"
                      "Installed llvmlite is built against version %d.%d.%d.\n"
                      "Please update llvmlite." %
                      (_min_llvm_version + llvm_version_info))
               raise ImportError(msg)
       
    1:     check_jit_execution()
       
       
    1: def _try_enable_svml():
           """
           Tries to enable SVML if configuration permits use and the library is found.
           """
    1:     if not config.DISABLE_INTEL_SVML:
    1:         try:
    1:             if sys.platform.startswith('linux'):
                       llvmlite.binding.load_library_permanently("libsvml.so")
    1:             elif sys.platform.startswith('darwin'):
    1:                 llvmlite.binding.load_library_permanently("libsvml.dylib")
                   elif sys.platform.startswith('win'):
                       llvmlite.binding.load_library_permanently("svml_dispmd")
                   else:
                       return False
                   # The SVML library is loaded, therefore SVML *could* be supported.
                   # Now see if LLVM has been compiled with the SVML support patch.
                   # If llvmlite has the checking function `has_svml` and it returns
                   # True, then LLVM was compiled with SVML support and the the setup
                   # for SVML can proceed. We err on the side of caution and if the
                   # checking function is missing, regardless of that being fine for
                   # most 0.23.{0,1} llvmlite instances (i.e. conda or pip installed),
                   # we assume that SVML was not compiled in. llvmlite 0.23.2 is a
                   # bugfix release with the checking function present that will always
                   # produce correct behaviour. For context see: #3006.
                   try:
                       if not getattr(llvmlite.binding.targets, "has_svml")():
                           # has detection function, but no svml compiled in, therefore
                           # disable SVML
                           return False
                   except AttributeError:
                       if platform.machine() == 'x86_64' and config.DEBUG:
                           msg = ("SVML was found but llvmlite >= 0.23.2 is "
                                  "needed to support it.")
                           warnings.warn(msg)
                       # does not have detection function, cannot detect reliably,
                       # disable SVML.
                       return False
       
                   # All is well, detection function present and reports SVML is
                   # compiled in, set the vector library to SVML.
                   llvmlite.binding.set_option('SVML', '-vector-library=SVML')
                   return True
    1:         except:
    1:             if platform.machine() == 'x86_64' and config.DEBUG:
                       warnings.warn("SVML was not found/could not be loaded.")
    1:     return False
       
    1: _ensure_llvm()
       
       # we know llvmlite is working as the above tests passed, import it now as SVML
       # needs to mutate runtime options (sets the `-vector-library`).
    1: import llvmlite
       
    1: """
       Is set to True if Intel SVML is in use.
       """
    1: config.USING_SVML = _try_enable_svml()
       
       
       # ---------------------- WARNING WARNING WARNING ----------------------------
       # The following imports occur below here (SVML init) because somewhere in their
       # import sequence they have a `@njit` wrapped function. This triggers too early
       # a bind to the underlying LLVM libraries which then irretrievably sets the LLVM
       # SVML state to "no SVML". See https://github.com/numba/numba/issues/4689 for
       # context.
       # ---------------------- WARNING WARNING WARNING ----------------------------
