    1: from collections import namedtuple
    1: from weakref import finalize as _finalize
       
    1: from numba.core.runtime import nrtdynmod
    1: from llvmlite import binding as ll
       
    1: from numba.core.compiler_lock import global_compiler_lock
    1: from numba.core.typing.typeof import typeof_impl
    1: from numba.core import types, config
    1: from numba.core.runtime import _nrt_python as _nrt
       
    1: _nrt_mstats = namedtuple("nrt_mstats", ["alloc", "free", "mi_alloc", "mi_free"])
       
       
    2: class _Runtime(object):
    1:     def __init__(self):
    1:         self._init = False
       
    2:     @global_compiler_lock
    2:     def initialize(self, ctx):
               """Initializes the NRT
       
               Must be called before any actual call to the NRT API.
               Safe to be called multiple times.
               """
  356:         if self._init:
                   # Already initialized
  355:             return
       
               # Switch stats on if the config requests them.
    1:         if config.NRT_STATS:
                   _nrt.memsys_enable_stats()
       
               # Register globals into the system
   26:         for py_name in _nrt.c_helpers:
   25:             if py_name.startswith("_"):
                       # internal API
    1:                 c_name = py_name
                   else:
   24:                 c_name = "NRT_" + py_name
   25:             c_address = _nrt.c_helpers[py_name]
   25:             ll.add_symbol(c_name, c_address)
       
               # Compile atomic operations
    1:         self._library = nrtdynmod.compile_nrt_functions(ctx)
    1:         self._init = True
       
    1:     def _init_guard(self):
   24:         if not self._init:
                   msg = "Runtime must be initialized before use."
                   raise RuntimeError(msg)
       
    2:     @staticmethod
    2:     def shutdown():
               """
               Shutdown the NRT
               Safe to be called without calling Runtime.initialize first
               """
               _nrt.memsys_shutdown()
       
    2:     @property
    2:     def library(self):
               """
               Return the Library object containing the various NRT functions.
               """
   24:         self._init_guard()
   24:         return self._library
       
    1:     def meminfo_new(self, data, pyobj):
               """
               Returns a MemInfo object that tracks memory at `data` owned by `pyobj`.
               MemInfo will acquire a reference on `pyobj`.
               The release of MemInfo will release a reference on `pyobj`.
               """
               self._init_guard()
               mi = _nrt.meminfo_new(data, pyobj)
               return MemInfo(mi)
       
    1:     def meminfo_alloc(self, size, safe=False):
               """
               Allocate a new memory of `size` bytes and returns a MemInfo object
               that tracks the allocation.  When there is no more reference to the
               MemInfo object, the underlying memory will be deallocated.
       
               If `safe` flag is True, the memory is allocated using the `safe` scheme.
               This is used for debugging and testing purposes.
               See `NRT_MemInfo_alloc_safe()` in "nrt.h" for details.
               """
               self._init_guard()
               if size < 0:
                   msg = f"Cannot allocate a negative number of bytes: {size}."
                   raise ValueError(msg)
               if safe:
                   mi = _nrt.meminfo_alloc_safe(size)
               else:
                   mi = _nrt.meminfo_alloc(size)
               if mi == 0: # alloc failed or size was 0 and alloc returned NULL.
                   msg = f"Requested allocation of {size} bytes failed."
                   raise MemoryError(msg)
               return MemInfo(mi)
       
    1:     def get_allocation_stats(self):
               """
               Returns a namedtuple of (alloc, free, mi_alloc, mi_free) for count of
               each memory operations.
               """
               # No init guard needed to access stats members
               return _nrt_mstats(alloc=_nrt.memsys_get_stats_alloc(),
                                  free=_nrt.memsys_get_stats_free(),
                                  mi_alloc=_nrt.memsys_get_stats_mi_alloc(),
                                  mi_free=_nrt.memsys_get_stats_mi_free())
       
       
       # Alias to _nrt_python._MemInfo
    1: MemInfo = _nrt._MemInfo
       
       
    2: @typeof_impl.register(MemInfo)
    2: def typeof_meminfo(val, c):
           return types.MemInfoPointer(types.voidptr)
       
       
       # Create runtime
    1: _nrt.memsys_use_cpython_allocator()
    1: rtsys = _Runtime()
       
       # Install finalizer
    1: _finalize(rtsys, _Runtime.shutdown)
       
       # Avoid future use of the class
    1: del _Runtime
