    1: from __future__ import annotations
       
    1: import os
    1: from typing import Any, NoReturn
       
    1: from ._typing import StrOrBytesPath, TypeGuard
       
       
    1: def is_path(f: Any) -> TypeGuard[StrOrBytesPath]:
    4:     return isinstance(f, (bytes, str, os.PathLike))
       
       
    1: def is_directory(f: Any) -> TypeGuard[StrOrBytesPath]:
           """Checks if an object is a string, and that it points to a directory."""
           return is_path(f) and os.path.isdir(f)
       
       
    2: class DeferredError:
    1:     def __init__(self, ex: BaseException):
               self.ex = ex
       
    1:     def __getattr__(self, elt: str) -> NoReturn:
               raise self.ex
       
    2:     @staticmethod
    2:     def new(ex: BaseException) -> Any:
               """
               Creates an object that raises the wrapped exception ``ex`` when used,
               and casts it to :py:obj:`~typing.Any` type.
               """
               return DeferredError(ex)
