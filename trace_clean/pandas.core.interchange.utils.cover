    1: """
       Utility functions and objects for implementing the interchange API.
       """
       
    1: from __future__ import annotations
       
    1: import typing
       
    1: import numpy as np
       
    1: from pandas._libs import lib
       
    1: from pandas.core.dtypes.dtypes import (
           ArrowDtype,
           CategoricalDtype,
           DatetimeTZDtype,
       )
       
    1: import pandas as pd
       
    1: if typing.TYPE_CHECKING:
           from pandas._typing import DtypeObj
       
       
       # Maps str(pyarrow.DataType) = C type format string
       # Currently, no pyarrow API for this
   19: PYARROW_CTYPES = {
    1:     "null": "n",
    1:     "bool": "b",
    1:     "uint8": "C",
    1:     "uint16": "S",
    1:     "uint32": "I",
    1:     "uint64": "L",
    1:     "int8": "c",
    1:     "int16": "S",
    1:     "int32": "i",
    1:     "int64": "l",
    1:     "halffloat": "e",  # float16
    1:     "float": "f",  # float32
    1:     "double": "g",  # float64
    1:     "string": "u",
    1:     "large_string": "U",
    1:     "binary": "z",
    1:     "time32[s]": "tts",
    1:     "time32[ms]": "ttm",
    1:     "time64[us]": "ttu",
    1:     "time64[ns]": "ttn",
    1:     "date32[day]": "tdD",
    1:     "date64[ms]": "tdm",
    1:     "timestamp[s]": "tss:",
    1:     "timestamp[ms]": "tsm:",
    1:     "timestamp[us]": "tsu:",
    1:     "timestamp[ns]": "tsn:",
    1:     "duration[s]": "tDs",
    1:     "duration[ms]": "tDm",
    1:     "duration[us]": "tDu",
    1:     "duration[ns]": "tDn",
       }
       
       
    2: class ArrowCTypes:
    1:     """
           Enum for Apache Arrow C type format strings.
       
           The Arrow C data interface:
           https://arrow.apache.org/docs/format/CDataInterface.html#data-type-description-format-strings
           """
       
    1:     NULL = "n"
    1:     BOOL = "b"
    1:     INT8 = "c"
    1:     UINT8 = "C"
    1:     INT16 = "s"
    1:     UINT16 = "S"
    1:     INT32 = "i"
    1:     UINT32 = "I"
    1:     INT64 = "l"
    1:     UINT64 = "L"
    1:     FLOAT16 = "e"
    1:     FLOAT32 = "f"
    1:     FLOAT64 = "g"
    1:     STRING = "u"  # utf-8
    1:     LARGE_STRING = "U"  # utf-8
    1:     DATE32 = "tdD"
    1:     DATE64 = "tdm"
           # Resoulution:
           #   - seconds -> 's'
           #   - milliseconds -> 'm'
           #   - microseconds -> 'u'
           #   - nanoseconds -> 'n'
    1:     TIMESTAMP = "ts{resolution}:{tz}"
    1:     TIME = "tt{resolution}"
       
       
    2: class Endianness:
    1:     """Enum indicating the byte-order of a data-type."""
       
    1:     LITTLE = "<"
    1:     BIG = ">"
    1:     NATIVE = "="
    1:     NA = "|"
       
       
    1: def dtype_to_arrow_c_fmt(dtype: DtypeObj) -> str:
           """
           Represent pandas `dtype` as a format string in Apache Arrow C notation.
       
           Parameters
           ----------
           dtype : np.dtype
               Datatype of pandas DataFrame to represent.
       
           Returns
           -------
           str
               Format string in Apache Arrow C notation of the given `dtype`.
           """
           if isinstance(dtype, CategoricalDtype):
               return ArrowCTypes.INT64
           elif dtype == np.dtype("O"):
               return ArrowCTypes.STRING
           elif isinstance(dtype, ArrowDtype):
               import pyarrow as pa
       
               pa_type = dtype.pyarrow_dtype
               if pa.types.is_decimal(pa_type):
                   return f"d:{pa_type.precision},{pa_type.scale}"
               elif pa.types.is_timestamp(pa_type) and pa_type.tz is not None:
                   return f"ts{pa_type.unit[0]}:{pa_type.tz}"
               format_str = PYARROW_CTYPES.get(str(pa_type), None)
               if format_str is not None:
                   return format_str
       
           format_str = getattr(ArrowCTypes, dtype.name.upper(), None)
           if format_str is not None:
               return format_str
       
           if lib.is_np_dtype(dtype, "M"):
               # Selecting the first char of resolution string:
               # dtype.str -> '<M8[ns]' -> 'n'
               resolution = np.datetime_data(dtype)[0][0]
               return ArrowCTypes.TIMESTAMP.format(resolution=resolution, tz="")
       
           elif isinstance(dtype, DatetimeTZDtype):
               return ArrowCTypes.TIMESTAMP.format(resolution=dtype.unit[0], tz=dtype.tz)
       
           elif isinstance(dtype, pd.BooleanDtype):
               return ArrowCTypes.BOOL
       
           raise NotImplementedError(
               f"Conversion of {dtype} to Arrow C format string is not implemented."
           )
       
       
    1: def maybe_rechunk(series: pd.Series, *, allow_copy: bool) -> pd.Series | None:
           """
           Rechunk a multi-chunk pyarrow array into a single-chunk array, if necessary.
       
           - Returns `None` if the input series is not backed by a multi-chunk pyarrow array
             (and so doesn't need rechunking)
           - Returns a single-chunk-backed-Series if the input is backed by a multi-chunk
             pyarrow array and `allow_copy` is `True`.
           - Raises a `RuntimeError` if `allow_copy` is `False` and input is a
             based by a multi-chunk pyarrow array.
           """
           if not isinstance(series.dtype, pd.ArrowDtype):
               return None
           chunked_array = series.array._pa_array  # type: ignore[attr-defined]
           if len(chunked_array.chunks) == 1:
               return None
           if not allow_copy:
               raise RuntimeError(
                   "Found multi-chunk pyarrow array, but `allow_copy` is False. "
                   "Please rechunk the array before calling this function, or set "
                   "`allow_copy=True`."
               )
           arr = chunked_array.combine_chunks()
           return pd.Series(arr, dtype=series.dtype, name=series.name, index=series.index)
