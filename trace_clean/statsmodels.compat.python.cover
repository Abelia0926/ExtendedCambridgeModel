    1: """
       Compatibility tools for differences between Python 2 and 3
       """
    1: import sys
    1: from typing import TYPE_CHECKING
       
    1: PY37 = sys.version_info[:2] == (3, 7)
       
    1: asunicode = lambda x, _: str(x)  # noqa:E731
       
       
    1: __all__ = [
           "asunicode",
           "asstr",
           "asbytes",
           "Literal",
           "lmap",
           "lzip",
           "lrange",
           "lfilter",
           "with_metaclass",
       ]
       
       
    1: def asbytes(s):
           if isinstance(s, bytes):
               return s
           return s.encode("latin1")
       
       
    1: def asstr(s):
           if isinstance(s, str):
               return s
           return s.decode("latin1")
       
       
       # list-producing versions of the major Python iterating functions
    1: def lrange(*args, **kwargs):
           return list(range(*args, **kwargs))
       
       
    1: def lzip(*args, **kwargs):
           return list(zip(*args, **kwargs))
       
       
    1: def lmap(*args, **kwargs):
           return list(map(*args, **kwargs))
       
       
    1: def lfilter(*args, **kwargs):
           return list(filter(*args, **kwargs))
       
       
    1: def with_metaclass(meta, *bases):
           """Create a base class with a metaclass."""
           # This requires a bit of explanation: the basic idea is to make a dummy
           # metaclass for one level of class instantiation that replaces itself with
           # the actual metaclass.
           class metaclass(meta):
               def __new__(cls, name, this_bases, d):
                   return meta(name, bases, d)
       
           return type.__new__(metaclass, "temporary_class", (), {})
       
       
    1: if sys.version_info >= (3, 8):
    1:     from typing import Literal
       elif TYPE_CHECKING:
           from typing_extensions import Literal
       else:
           from typing import Any as Literal
