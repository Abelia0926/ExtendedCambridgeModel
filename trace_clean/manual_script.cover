    1: import subprocess
    1: from pymgipsim.Utilities.paths import results_path
    1: from pymgipsim.Utilities import simulation_folder
       
    1: from pymgipsim.Interface.parser import generate_parser_cli
    1: from pymgipsim.InputGeneration.activity_settings import activity_args_to_scenario
       
    1: from pymgipsim.generate_settings import generate_simulation_settings_main
    1: from pymgipsim.generate_inputs import generate_inputs_main
    1: from pymgipsim.generate_subjects import generate_virtual_subjects_main
    1: from pymgipsim.generate_plots import generate_plots_main
    1: from pymgipsim.generate_results import generate_results_main
       
    1: if __name__ == '__main__':
    1:     """ Parse Arguments  """
    1:     args = generate_parser_cli().parse_args()
       
    1:     """ Initialization """
    1:     subprocess.run(['python', 'initialization.py'])
       
    1:     """ Define Results Path """
    1:     _, _, _, results_folder_path = simulation_folder.create_simulation_results_folder(results_path)
       
    1:     """ Load Scenario """
    1:     settings_file = simulation_folder.load_settings_file(args, results_folder_path)
       
           # Programatically define scenario
    1:     args.controller_name = "OpenLoop" # Select controller folder in pymgipsim/Controller/...
    1:     args.model_name = "T1DM.ExtHovorka" # Select Hovorka model
    1:     args.patient_names = ["Patient_1"] # Select Patient in pymgipsim/VirtualPatient/Models/T1DM/ExtHovorka/Patients
    1:     args.running_speed = 0.0 # Turn off physical activity
    1:     args.plot_patient = 0 # Plots patient glucose, intakes, heartrate #change original 0 to 3
    1:     args.breakfast_carb_range = [80, 120]
    1:     args.am_snack_carb_range = [10, 20]
    1:     args.lunch_carb_range = [80, 120]
    1:     args.pm_snack_carb_range = [10, 20]
    1:     args.dinner_carb_range = [80, 120]
    1:     args.random_seed = 100
       
    1:     activity_args_to_scenario(settings_file, args)
    1:     if not args.scenario_name:
       
    1:         settings_file = generate_simulation_settings_main(scenario_instance=settings_file, args=args, results_folder_path=results_folder_path)
       
    1:         settings_file = generate_virtual_subjects_main(scenario_instance=settings_file, args=args, results_folder_path=results_folder_path)
       
    1:         settings_file = generate_inputs_main(scenario_instance = settings_file, args = args, results_folder_path=results_folder_path)
       
       
    1:     model,_ = generate_results_main(scenario_instance = settings_file, args = vars(args), results_folder_path = results_folder_path)
       
    1:     figures = generate_plots_main(results_folder_path, args)
