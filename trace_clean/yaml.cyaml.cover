       
    1: __all__ = [
           'CBaseLoader', 'CSafeLoader', 'CFullLoader', 'CUnsafeLoader', 'CLoader',
           'CBaseDumper', 'CSafeDumper', 'CDumper'
       ]
       
    1: from yaml._yaml import CParser, CEmitter
       
    1: from .constructor import *
       
    1: from .serializer import *
    1: from .representer import *
       
    1: from .resolver import *
       
    2: class CBaseLoader(CParser, BaseConstructor, BaseResolver):
       
    1:     def __init__(self, stream):
               CParser.__init__(self, stream)
               BaseConstructor.__init__(self)
               BaseResolver.__init__(self)
       
    2: class CSafeLoader(CParser, SafeConstructor, Resolver):
       
    1:     def __init__(self, stream):
               CParser.__init__(self, stream)
               SafeConstructor.__init__(self)
               Resolver.__init__(self)
       
    2: class CFullLoader(CParser, FullConstructor, Resolver):
       
    1:     def __init__(self, stream):
               CParser.__init__(self, stream)
               FullConstructor.__init__(self)
               Resolver.__init__(self)
       
    2: class CUnsafeLoader(CParser, UnsafeConstructor, Resolver):
       
    1:     def __init__(self, stream):
               CParser.__init__(self, stream)
               UnsafeConstructor.__init__(self)
               Resolver.__init__(self)
       
    2: class CLoader(CParser, Constructor, Resolver):
       
    1:     def __init__(self, stream):
               CParser.__init__(self, stream)
               Constructor.__init__(self)
               Resolver.__init__(self)
       
    2: class CBaseDumper(CEmitter, BaseRepresenter, BaseResolver):
       
    1:     def __init__(self, stream,
    1:             default_style=None, default_flow_style=False,
    1:             canonical=None, indent=None, width=None,
    1:             allow_unicode=None, line_break=None,
    1:             encoding=None, explicit_start=None, explicit_end=None,
    1:             version=None, tags=None, sort_keys=True):
               CEmitter.__init__(self, stream, canonical=canonical,
                       indent=indent, width=width, encoding=encoding,
                       allow_unicode=allow_unicode, line_break=line_break,
                       explicit_start=explicit_start, explicit_end=explicit_end,
                       version=version, tags=tags)
               Representer.__init__(self, default_style=default_style,
                       default_flow_style=default_flow_style, sort_keys=sort_keys)
               Resolver.__init__(self)
       
    2: class CSafeDumper(CEmitter, SafeRepresenter, Resolver):
       
    1:     def __init__(self, stream,
    1:             default_style=None, default_flow_style=False,
    1:             canonical=None, indent=None, width=None,
    1:             allow_unicode=None, line_break=None,
    1:             encoding=None, explicit_start=None, explicit_end=None,
    1:             version=None, tags=None, sort_keys=True):
               CEmitter.__init__(self, stream, canonical=canonical,
                       indent=indent, width=width, encoding=encoding,
                       allow_unicode=allow_unicode, line_break=line_break,
                       explicit_start=explicit_start, explicit_end=explicit_end,
                       version=version, tags=tags)
               SafeRepresenter.__init__(self, default_style=default_style,
                       default_flow_style=default_flow_style, sort_keys=sort_keys)
               Resolver.__init__(self)
       
    2: class CDumper(CEmitter, Serializer, Representer, Resolver):
       
    1:     def __init__(self, stream,
    1:             default_style=None, default_flow_style=False,
    1:             canonical=None, indent=None, width=None,
    1:             allow_unicode=None, line_break=None,
    1:             encoding=None, explicit_start=None, explicit_end=None,
    1:             version=None, tags=None, sort_keys=True):
               CEmitter.__init__(self, stream, canonical=canonical,
                       indent=indent, width=width, encoding=encoding,
                       allow_unicode=allow_unicode, line_break=line_break,
                       explicit_start=explicit_start, explicit_end=explicit_end,
                       version=version, tags=tags)
               Representer.__init__(self, default_style=default_style,
                       default_flow_style=default_flow_style, sort_keys=sort_keys)
               Resolver.__init__(self)
       
