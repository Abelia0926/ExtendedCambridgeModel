       #
       # The Python Imaging Library
       # $Id$
       #
       # map CSS3-style colour description strings to RGB
       #
       # History:
       # 2002-10-24 fl   Added support for CSS-style color strings
       # 2002-12-15 fl   Added RGBA support
       # 2004-03-27 fl   Fixed remaining int() problems for Python 1.5.2
       # 2004-07-19 fl   Fixed gray/grey spelling issues
       # 2009-03-05 fl   Fixed rounding error in grayscale calculation
       #
       # Copyright (c) 2002-2004 by Secret Labs AB
       # Copyright (c) 2002-2004 by Fredrik Lundh
       #
       # See the README file for information on usage and redistribution.
       #
    1: from __future__ import annotations
       
    1: import re
    1: from functools import lru_cache
       
    1: from . import Image
       
       
    2: @lru_cache
    2: def getrgb(color: str) -> tuple[int, int, int] | tuple[int, int, int, int]:
           """
            Convert a color string to an RGB or RGBA tuple. If the string cannot be
            parsed, this function raises a :py:exc:`ValueError` exception.
       
           .. versionadded:: 1.1.4
       
           :param color: A color string
           :return: ``(red, green, blue[, alpha])``
           """
           if len(color) > 100:
               msg = "color specifier is too long"
               raise ValueError(msg)
           color = color.lower()
       
           rgb = colormap.get(color, None)
           if rgb:
               if isinstance(rgb, tuple):
                   return rgb
               rgb_tuple = getrgb(rgb)
               assert len(rgb_tuple) == 3
               colormap[color] = rgb_tuple
               return rgb_tuple
       
           # check for known string formats
           if re.match("#[a-f0-9]{3}$", color):
               return int(color[1] * 2, 16), int(color[2] * 2, 16), int(color[3] * 2, 16)
       
           if re.match("#[a-f0-9]{4}$", color):
               return (
                   int(color[1] * 2, 16),
                   int(color[2] * 2, 16),
                   int(color[3] * 2, 16),
                   int(color[4] * 2, 16),
               )
       
           if re.match("#[a-f0-9]{6}$", color):
               return int(color[1:3], 16), int(color[3:5], 16), int(color[5:7], 16)
       
           if re.match("#[a-f0-9]{8}$", color):
               return (
                   int(color[1:3], 16),
                   int(color[3:5], 16),
                   int(color[5:7], 16),
                   int(color[7:9], 16),
               )
       
           m = re.match(r"rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$", color)
           if m:
               return int(m.group(1)), int(m.group(2)), int(m.group(3))
       
           m = re.match(r"rgb\(\s*(\d+)%\s*,\s*(\d+)%\s*,\s*(\d+)%\s*\)$", color)
           if m:
               return (
                   int((int(m.group(1)) * 255) / 100.0 + 0.5),
                   int((int(m.group(2)) * 255) / 100.0 + 0.5),
                   int((int(m.group(3)) * 255) / 100.0 + 0.5),
               )
       
           m = re.match(
               r"hsl\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$", color
           )
           if m:
               from colorsys import hls_to_rgb
       
               rgb_floats = hls_to_rgb(
                   float(m.group(1)) / 360.0,
                   float(m.group(3)) / 100.0,
                   float(m.group(2)) / 100.0,
               )
               return (
                   int(rgb_floats[0] * 255 + 0.5),
                   int(rgb_floats[1] * 255 + 0.5),
                   int(rgb_floats[2] * 255 + 0.5),
               )
       
           m = re.match(
               r"hs[bv]\(\s*(\d+\.?\d*)\s*,\s*(\d+\.?\d*)%\s*,\s*(\d+\.?\d*)%\s*\)$", color
           )
           if m:
               from colorsys import hsv_to_rgb
       
               rgb_floats = hsv_to_rgb(
                   float(m.group(1)) / 360.0,
                   float(m.group(2)) / 100.0,
                   float(m.group(3)) / 100.0,
               )
               return (
                   int(rgb_floats[0] * 255 + 0.5),
                   int(rgb_floats[1] * 255 + 0.5),
                   int(rgb_floats[2] * 255 + 0.5),
               )
       
           m = re.match(r"rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$", color)
           if m:
               return int(m.group(1)), int(m.group(2)), int(m.group(3)), int(m.group(4))
           msg = f"unknown color specifier: {repr(color)}"
           raise ValueError(msg)
       
       
    2: @lru_cache
    2: def getcolor(color: str, mode: str) -> int | tuple[int, ...]:
           """
           Same as :py:func:`~PIL.ImageColor.getrgb` for most modes. However, if
           ``mode`` is HSV, converts the RGB value to a HSV value, or if ``mode`` is
           not color or a palette image, converts the RGB value to a grayscale value.
           If the string cannot be parsed, this function raises a :py:exc:`ValueError`
           exception.
       
           .. versionadded:: 1.1.4
       
           :param color: A color string
           :param mode: Convert result to this mode
           :return: ``graylevel, (graylevel, alpha) or (red, green, blue[, alpha])``
           """
           # same as getrgb, but converts the result to the given mode
           rgb, alpha = getrgb(color), 255
           if len(rgb) == 4:
               alpha = rgb[3]
               rgb = rgb[:3]
       
           if mode == "HSV":
               from colorsys import rgb_to_hsv
       
               r, g, b = rgb
               h, s, v = rgb_to_hsv(r / 255, g / 255, b / 255)
               return int(h * 255), int(s * 255), int(v * 255)
           elif Image.getmodebase(mode) == "L":
               r, g, b = rgb
               # ITU-R Recommendation 601-2 for nonlinear RGB
               # scaled to 24 bits to match the convert's implementation.
               graylevel = (r * 19595 + g * 38470 + b * 7471 + 0x8000) >> 16
               if mode[-1] == "A":
                   return graylevel, alpha
               return graylevel
           elif mode[-1] == "A":
               return rgb + (alpha,)
           return rgb
       
       
  138: colormap: dict[str, str | tuple[int, int, int]] = {
           # X11 colour table from https://drafts.csswg.org/css-color-4/, with
           # gray/grey spelling issues fixed.  This is a superset of HTML 4.0
           # colour names used in CSS 1.
    1:     "aliceblue": "#f0f8ff",
    1:     "antiquewhite": "#faebd7",
    1:     "aqua": "#00ffff",
    1:     "aquamarine": "#7fffd4",
    1:     "azure": "#f0ffff",
    1:     "beige": "#f5f5dc",
    1:     "bisque": "#ffe4c4",
    1:     "black": "#000000",
    1:     "blanchedalmond": "#ffebcd",
    1:     "blue": "#0000ff",
    1:     "blueviolet": "#8a2be2",
    1:     "brown": "#a52a2a",
    1:     "burlywood": "#deb887",
    1:     "cadetblue": "#5f9ea0",
    1:     "chartreuse": "#7fff00",
    1:     "chocolate": "#d2691e",
    1:     "coral": "#ff7f50",
    1:     "cornflowerblue": "#6495ed",
    1:     "cornsilk": "#fff8dc",
    1:     "crimson": "#dc143c",
    1:     "cyan": "#00ffff",
    1:     "darkblue": "#00008b",
    1:     "darkcyan": "#008b8b",
    1:     "darkgoldenrod": "#b8860b",
    1:     "darkgray": "#a9a9a9",
    1:     "darkgrey": "#a9a9a9",
    1:     "darkgreen": "#006400",
    1:     "darkkhaki": "#bdb76b",
    1:     "darkmagenta": "#8b008b",
    1:     "darkolivegreen": "#556b2f",
    1:     "darkorange": "#ff8c00",
    1:     "darkorchid": "#9932cc",
    1:     "darkred": "#8b0000",
    1:     "darksalmon": "#e9967a",
    1:     "darkseagreen": "#8fbc8f",
    1:     "darkslateblue": "#483d8b",
    1:     "darkslategray": "#2f4f4f",
    1:     "darkslategrey": "#2f4f4f",
    1:     "darkturquoise": "#00ced1",
    1:     "darkviolet": "#9400d3",
    1:     "deeppink": "#ff1493",
    1:     "deepskyblue": "#00bfff",
    1:     "dimgray": "#696969",
    1:     "dimgrey": "#696969",
    1:     "dodgerblue": "#1e90ff",
    1:     "firebrick": "#b22222",
    1:     "floralwhite": "#fffaf0",
    1:     "forestgreen": "#228b22",
    1:     "fuchsia": "#ff00ff",
    1:     "gainsboro": "#dcdcdc",
    1:     "ghostwhite": "#f8f8ff",
    1:     "gold": "#ffd700",
    1:     "goldenrod": "#daa520",
    1:     "gray": "#808080",
    1:     "grey": "#808080",
    1:     "green": "#008000",
    1:     "greenyellow": "#adff2f",
    1:     "honeydew": "#f0fff0",
    1:     "hotpink": "#ff69b4",
    1:     "indianred": "#cd5c5c",
    1:     "indigo": "#4b0082",
    1:     "ivory": "#fffff0",
    1:     "khaki": "#f0e68c",
    1:     "lavender": "#e6e6fa",
    1:     "lavenderblush": "#fff0f5",
    1:     "lawngreen": "#7cfc00",
    1:     "lemonchiffon": "#fffacd",
    1:     "lightblue": "#add8e6",
    1:     "lightcoral": "#f08080",
    1:     "lightcyan": "#e0ffff",
    1:     "lightgoldenrodyellow": "#fafad2",
    1:     "lightgreen": "#90ee90",
    1:     "lightgray": "#d3d3d3",
    1:     "lightgrey": "#d3d3d3",
    1:     "lightpink": "#ffb6c1",
    1:     "lightsalmon": "#ffa07a",
    1:     "lightseagreen": "#20b2aa",
    1:     "lightskyblue": "#87cefa",
    1:     "lightslategray": "#778899",
    1:     "lightslategrey": "#778899",
    1:     "lightsteelblue": "#b0c4de",
    1:     "lightyellow": "#ffffe0",
    1:     "lime": "#00ff00",
    1:     "limegreen": "#32cd32",
    1:     "linen": "#faf0e6",
    1:     "magenta": "#ff00ff",
    1:     "maroon": "#800000",
    1:     "mediumaquamarine": "#66cdaa",
    1:     "mediumblue": "#0000cd",
    1:     "mediumorchid": "#ba55d3",
    1:     "mediumpurple": "#9370db",
    1:     "mediumseagreen": "#3cb371",
    1:     "mediumslateblue": "#7b68ee",
    1:     "mediumspringgreen": "#00fa9a",
    1:     "mediumturquoise": "#48d1cc",
    1:     "mediumvioletred": "#c71585",
    1:     "midnightblue": "#191970",
    1:     "mintcream": "#f5fffa",
    1:     "mistyrose": "#ffe4e1",
    1:     "moccasin": "#ffe4b5",
    1:     "navajowhite": "#ffdead",
    1:     "navy": "#000080",
    1:     "oldlace": "#fdf5e6",
    1:     "olive": "#808000",
    1:     "olivedrab": "#6b8e23",
    1:     "orange": "#ffa500",
    1:     "orangered": "#ff4500",
    1:     "orchid": "#da70d6",
    1:     "palegoldenrod": "#eee8aa",
    1:     "palegreen": "#98fb98",
    1:     "paleturquoise": "#afeeee",
    1:     "palevioletred": "#db7093",
    1:     "papayawhip": "#ffefd5",
    1:     "peachpuff": "#ffdab9",
    1:     "peru": "#cd853f",
    1:     "pink": "#ffc0cb",
    1:     "plum": "#dda0dd",
    1:     "powderblue": "#b0e0e6",
    1:     "purple": "#800080",
    1:     "rebeccapurple": "#663399",
    1:     "red": "#ff0000",
    1:     "rosybrown": "#bc8f8f",
    1:     "royalblue": "#4169e1",
    1:     "saddlebrown": "#8b4513",
    1:     "salmon": "#fa8072",
    1:     "sandybrown": "#f4a460",
    1:     "seagreen": "#2e8b57",
    1:     "seashell": "#fff5ee",
    1:     "sienna": "#a0522d",
    1:     "silver": "#c0c0c0",
    1:     "skyblue": "#87ceeb",
    1:     "slateblue": "#6a5acd",
    1:     "slategray": "#708090",
    1:     "slategrey": "#708090",
    1:     "snow": "#fffafa",
    1:     "springgreen": "#00ff7f",
    1:     "steelblue": "#4682b4",
    1:     "tan": "#d2b48c",
    1:     "teal": "#008080",
    1:     "thistle": "#d8bfd8",
    1:     "tomato": "#ff6347",
    1:     "turquoise": "#40e0d0",
    1:     "violet": "#ee82ee",
    1:     "wheat": "#f5deb3",
    1:     "white": "#ffffff",
    1:     "whitesmoke": "#f5f5f5",
    1:     "yellow": "#ffff00",
    1:     "yellowgreen": "#9acd32",
       }
