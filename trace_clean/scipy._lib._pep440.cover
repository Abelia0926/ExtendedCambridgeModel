    1: """Utility to compare pep440 compatible version strings.
       
       The LooseVersion and StrictVersion classes that distutils provides don't
       work; they don't recognize anything like alpha/beta/rc/dev versions.
       """
       
       # Copyright (c) Donald Stufft and individual contributors.
       # All rights reserved.
       
       # Redistribution and use in source and binary forms, with or without
       # modification, are permitted provided that the following conditions are met:
       
       #     1. Redistributions of source code must retain the above copyright notice,
       #        this list of conditions and the following disclaimer.
       
       #     2. Redistributions in binary form must reproduce the above copyright
       #        notice, this list of conditions and the following disclaimer in the
       #        documentation and/or other materials provided with the distribution.
       
       # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
       # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
       # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
       # ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
       # LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
       # CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
       # SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
       # INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
       # CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
       # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
       # POSSIBILITY OF SUCH DAMAGE.
       
    1: import collections
    1: import itertools
    1: import re
       
       
    1: __all__ = [
           "parse", "Version", "LegacyVersion", "InvalidVersion", "VERSION_PATTERN",
       ]
       
       
       # BEGIN packaging/_structures.py
       
       
    2: class Infinity:
    1:     def __repr__(self):
               return "Infinity"
       
    1:     def __hash__(self):
               return hash(repr(self))
       
    1:     def __lt__(self, other):
               return False
       
    1:     def __le__(self, other):
               return False
       
    1:     def __eq__(self, other):
               return isinstance(other, self.__class__)
       
    1:     def __ne__(self, other):
               return not isinstance(other, self.__class__)
       
    1:     def __gt__(self, other):
               return True
       
    1:     def __ge__(self, other):
               return True
       
    1:     def __neg__(self):
    8:         return NegativeInfinity
       
       
    1: Infinity = Infinity()
       
       
    2: class NegativeInfinity:
    1:     def __repr__(self):
               return "-Infinity"
       
    1:     def __hash__(self):
               return hash(repr(self))
       
    1:     def __lt__(self, other):
               return True
       
    1:     def __le__(self, other):
               return True
       
    1:     def __eq__(self, other):
               return isinstance(other, self.__class__)
       
    1:     def __ne__(self, other):
               return not isinstance(other, self.__class__)
       
    1:     def __gt__(self, other):
               return False
       
    1:     def __ge__(self, other):
               return False
       
    1:     def __neg__(self):
               return Infinity
       
       
       # BEGIN packaging/version.py
       
       
    1: NegativeInfinity = NegativeInfinity()
       
    2: _Version = collections.namedtuple(
    1:     "_Version",
    1:     ["epoch", "release", "dev", "pre", "post", "local"],
       )
       
       
    1: def parse(version):
           """
           Parse the given version string and return either a :class:`Version` object
           or a :class:`LegacyVersion` object depending on if the given version is
           a valid PEP 440 version or a legacy version.
           """
    2:     try:
    2:         return Version(version)
           except InvalidVersion:
               return LegacyVersion(version)
       
       
    2: class InvalidVersion(ValueError):
    1:     """
           An invalid version was found, users should refer to PEP 440.
           """
       
       
    2: class _BaseVersion:
       
    1:     def __hash__(self):
               return hash(self._key)
       
    1:     def __lt__(self, other):
    2:         return self._compare(other, lambda s, o: s < o)
       
    1:     def __le__(self, other):
               return self._compare(other, lambda s, o: s <= o)
       
    1:     def __eq__(self, other):
               return self._compare(other, lambda s, o: s == o)
       
    1:     def __ge__(self, other):
    2:         return self._compare(other, lambda s, o: s >= o)
       
    1:     def __gt__(self, other):
               return self._compare(other, lambda s, o: s > o)
       
    1:     def __ne__(self, other):
               return self._compare(other, lambda s, o: s != o)
       
    1:     def _compare(self, other, method):
    2:         if not isinstance(other, _BaseVersion):
                   return NotImplemented
       
    2:         return method(self._key, other._key)
       
       
    2: class LegacyVersion(_BaseVersion):
       
    1:     def __init__(self, version):
               self._version = str(version)
               self._key = _legacy_cmpkey(self._version)
       
    1:     def __str__(self):
               return self._version
       
    1:     def __repr__(self):
               return f"<LegacyVersion({repr(str(self))})>"
       
    2:     @property
    2:     def public(self):
               return self._version
       
    2:     @property
    2:     def base_version(self):
               return self._version
       
    2:     @property
    2:     def local(self):
               return None
       
    2:     @property
    2:     def is_prerelease(self):
               return False
       
    2:     @property
    2:     def is_postrelease(self):
               return False
       
       
    2: _legacy_version_component_re = re.compile(
    1:     r"(\d+ | [a-z]+ | \.| -)", re.VERBOSE,
       )
       
    1: _legacy_version_replacement_map = {
    1:     "pre": "c", "preview": "c", "-": "final-", "rc": "c", "dev": "@",
       }
       
       
    1: def _parse_version_parts(s):
           for part in _legacy_version_component_re.split(s):
               part = _legacy_version_replacement_map.get(part, part)
       
               if not part or part == ".":
                   continue
       
               if part[:1] in "0123456789":
                   # pad for numeric comparison
                   yield part.zfill(8)
               else:
                   yield "*" + part
       
           # ensure that alpha/beta/candidate are before final
           yield "*final"
       
       
    1: def _legacy_cmpkey(version):
           # We hardcode an epoch of -1 here. A PEP 440 version can only have an epoch
           # greater than or equal to 0. This will effectively put the LegacyVersion,
           # which uses the defacto standard originally implemented by setuptools,
           # as before all PEP 440 versions.
           epoch = -1
       
           # This scheme is taken from pkg_resources.parse_version setuptools prior to
           # its adoption of the packaging library.
           parts = []
           for part in _parse_version_parts(version.lower()):
               if part.startswith("*"):
                   # remove "-" before a prerelease tag
                   if part < "*final":
                       while parts and parts[-1] == "*final-":
                           parts.pop()
       
                   # remove trailing zeros from each series of numeric parts
                   while parts and parts[-1] == "00000000":
                       parts.pop()
       
               parts.append(part)
           parts = tuple(parts)
       
           return epoch, parts
       
       
       # Deliberately not anchored to the start and end of the string, to make it
       # easier for 3rd party code to reuse
    1: VERSION_PATTERN = r"""
           v?
           (?:
               (?:(?P<epoch>[0-9]+)!)?                           # epoch
               (?P<release>[0-9]+(?:\.[0-9]+)*)                  # release segment
               (?P<pre>                                          # pre-release
                   [-_\.]?
                   (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))
                   [-_\.]?
                   (?P<pre_n>[0-9]+)?
               )?
               (?P<post>                                         # post release
                   (?:-(?P<post_n1>[0-9]+))
                   |
                   (?:
                       [-_\.]?
                       (?P<post_l>post|rev|r)
                       [-_\.]?
                       (?P<post_n2>[0-9]+)?
                   )
               )?
               (?P<dev>                                          # dev release
                   [-_\.]?
                   (?P<dev_l>dev)
                   [-_\.]?
                   (?P<dev_n>[0-9]+)?
               )?
           )
           (?:\+(?P<local>[a-z0-9]+(?:[-_\.][a-z0-9]+)*))?       # local version
       """
       
       
    2: class Version(_BaseVersion):
       
    2:     _regex = re.compile(
    1:         r"^\s*" + VERSION_PATTERN + r"\s*$",
    1:         re.VERBOSE | re.IGNORECASE,
           )
       
    1:     def __init__(self, version):
               # Validate the version and parse it into pieces
    4:         match = self._regex.search(version)
    4:         if not match:
                   raise InvalidVersion(f"Invalid version: '{version}'")
       
               # Store the parsed out pieces of the version
    8:         self._version = _Version(
    4:             epoch=int(match.group("epoch")) if match.group("epoch") else 0,
   20:             release=tuple(int(i) for i in match.group("release").split(".")),
    8:             pre=_parse_letter_version(
    4:                 match.group("pre_l"),
    4:                 match.group("pre_n"),
                   ),
    8:             post=_parse_letter_version(
    4:                 match.group("post_l"),
    4:                 match.group("post_n1") or match.group("post_n2"),
                   ),
    8:             dev=_parse_letter_version(
    4:                 match.group("dev_l"),
    4:                 match.group("dev_n"),
                   ),
    4:             local=_parse_local_version(match.group("local")),
               )
       
               # Generate a key which will be used for sorting
    8:         self._key = _cmpkey(
    4:             self._version.epoch,
    4:             self._version.release,
    4:             self._version.pre,
    4:             self._version.post,
    4:             self._version.dev,
    4:             self._version.local,
               )
       
    1:     def __repr__(self):
               return f"<Version({repr(str(self))})>"
       
    1:     def __str__(self):
               parts = []
       
               # Epoch
               if self._version.epoch != 0:
                   parts.append(f"{self._version.epoch}!")
       
               # Release segment
               parts.append(".".join(str(x) for x in self._version.release))
       
               # Pre-release
               if self._version.pre is not None:
                   parts.append("".join(str(x) for x in self._version.pre))
       
               # Post-release
               if self._version.post is not None:
                   parts.append(f".post{self._version.post[1]}")
       
               # Development release
               if self._version.dev is not None:
                   parts.append(f".dev{self._version.dev[1]}")
       
               # Local version segment
               if self._version.local is not None:
                   parts.append(
                       "+{}".format(".".join(str(x) for x in self._version.local))
                   )
       
               return "".join(parts)
       
    2:     @property
    2:     def public(self):
               return str(self).split("+", 1)[0]
       
    2:     @property
    2:     def base_version(self):
               parts = []
       
               # Epoch
               if self._version.epoch != 0:
                   parts.append(f"{self._version.epoch}!")
       
               # Release segment
               parts.append(".".join(str(x) for x in self._version.release))
       
               return "".join(parts)
       
    2:     @property
    2:     def local(self):
               version_string = str(self)
               if "+" in version_string:
                   return version_string.split("+", 1)[1]
       
    2:     @property
    2:     def is_prerelease(self):
               return bool(self._version.dev or self._version.pre)
       
    2:     @property
    2:     def is_postrelease(self):
               return bool(self._version.post)
       
       
    1: def _parse_letter_version(letter, number):
   12:     if letter:
               # We assume there is an implicit 0 in a pre-release if there is
               # no numeral associated with it.
               if number is None:
                   number = 0
       
               # We normalize any letters to their lower-case form
               letter = letter.lower()
       
               # We consider some words to be alternate spellings of other words and
               # in those cases we want to normalize the spellings to our preferred
               # spelling.
               if letter == "alpha":
                   letter = "a"
               elif letter == "beta":
                   letter = "b"
               elif letter in ["c", "pre", "preview"]:
                   letter = "rc"
               elif letter in ["rev", "r"]:
                   letter = "post"
       
               return letter, int(number)
   12:     if not letter and number:
               # We assume that if we are given a number but not given a letter,
               # then this is using the implicit post release syntax (e.g., 1.0-1)
               letter = "post"
       
               return letter, int(number)
       
       
    1: _local_version_seperators = re.compile(r"[\._-]")
       
       
    1: def _parse_local_version(local):
           """
           Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").
           """
    4:     if local is not None:
               return tuple(
                   part.lower() if not part.isdigit() else int(part)
                   for part in _local_version_seperators.split(local)
               )
       
       
    1: def _cmpkey(epoch, release, pre, post, dev, local):
           # When we compare a release version, we want to compare it with all of the
           # trailing zeros removed. So we'll use a reverse the list, drop all the now
           # leading zeros until we come to something non-zero, then take the rest,
           # re-reverse it back into the correct order, and make it a tuple and use
           # that for our sorting key.
    8:     release = tuple(
    8:         reversed(list(
    8:             itertools.dropwhile(
    9:                 lambda x: x == 0,
    4:                 reversed(release),
                   )
               ))
           )
       
           # We need to "trick" the sorting algorithm to put 1.0.dev0 before 1.0a0.
           # We'll do this by abusing the pre-segment, but we _only_ want to do this
           # if there is no pre- or a post-segment. If we have one of those, then
           # the normal sorting rules will handle this case correctly.
    4:     if pre is None and post is None and dev is not None:
               pre = -Infinity
           # Versions without a pre-release (except as noted above) should sort after
           # those with one.
    4:     elif pre is None:
    4:         pre = Infinity
       
           # Versions without a post-segment should sort before those with one.
    4:     if post is None:
    4:         post = -Infinity
       
           # Versions without a development segment should sort after those with one.
    4:     if dev is None:
    4:         dev = Infinity
       
    4:     if local is None:
               # Versions without a local segment should sort before those with one.
    4:         local = -Infinity
           else:
               # Versions with a local segment need that segment parsed to implement
               # the sorting rules in PEP440.
               # - Alphanumeric segments sort before numeric segments
               # - Alphanumeric segments sort lexicographically
               # - Numeric segments sort numerically
               # - Shorter versions sort before longer versions when the prefixes
               #   match exactly
               local = tuple(
                   (i, "") if isinstance(i, int) else (-Infinity, i)
                   for i in local
               )
       
    4:     return epoch, release, pre, post, dev, local
