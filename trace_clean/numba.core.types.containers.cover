    1: from collections.abc import Iterable
    1: from collections.abc import Sequence as pySequence
    1: from types import MappingProxyType
       
    1: from .abstract import (
           ConstSized,
           Container,
           Hashable,
           MutableSequence,
           Sequence,
           Type,
           TypeRef,
           Literal,
           InitialValue,
           Poison,
       )
    1: from .common import (
           Buffer,
           IterableType,
           SimpleIterableType,
           SimpleIteratorType,
       )
    1: from .misc import Undefined, unliteral, Optional, NoneType
    1: from ..typeconv import Conversion
    1: from ..errors import TypingError
    1: from .. import utils
       
       
    2: class Pair(Type):
    1:     """
           A heterogeneous pair.
           """
       
    1:     def __init__(self, first_type, second_type):
   10:         self.first_type = first_type
   10:         self.second_type = second_type
   10:         name = "pair<%s, %s>" % (first_type, second_type)
   10:         super(Pair, self).__init__(name=name)
       
    2:     @property
    2:     def key(self):
  148:         return self.first_type, self.second_type
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, Pair):
                   first = typingctx.unify_pairs(self.first_type, other.first_type)
                   second = typingctx.unify_pairs(self.second_type, other.second_type)
                   if first is not None and second is not None:
                       return Pair(first, second)
       
       
    2: class BaseContainerIterator(SimpleIteratorType):
    1:     """
           Convenience base class for some container iterators.
       
           Derived classes must implement the *container_class* attribute.
           """
       
    1:     def __init__(self, container):
               assert isinstance(container, self.container_class), container
               self.container = container
               yield_type = container.dtype
               name = "iter(%s)" % container
               super(BaseContainerIterator, self).__init__(name, yield_type)
       
    1:     def unify(self, typingctx, other):
               cls = type(self)
               if isinstance(other, cls):
                   container = typingctx.unify_pairs(self.container, other.container)
                   if container is not None:
                       return cls(container)
       
    2:     @property
    2:     def key(self):
               return self.container
       
       
    2: class BaseContainerPayload(Type):
    1:     """
           Convenience base class for some container payloads.
       
           Derived classes must implement the *container_class* attribute.
           """
       
    1:     def __init__(self, container):
               assert isinstance(container, self.container_class)
               self.container = container
               name = "payload(%s)" % container
               super(BaseContainerPayload, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.container
       
       
    2: class Bytes(Buffer):
    1:     """
           Type class for Python 3.x bytes objects.
           """
       
    1:     mutable = False
           # Actually true but doesn't matter since bytes is immutable
    1:     slice_is_copy = False
       
       
    2: class ByteArray(Buffer):
    1:     """
           Type class for bytearray objects.
           """
       
    1:     slice_is_copy = True
       
       
    2: class PyArray(Buffer):
    1:     """
           Type class for array.array objects.
           """
       
    1:     slice_is_copy = True
       
       
    2: class MemoryView(Buffer):
    1:     """
           Type class for memoryview objects.
           """
       
       
    1: def is_homogeneous(*tys):
           """Are the types homogeneous?
           """
  190:     if tys:
  190:         first, tys = tys[0], tys[1:]
  408:         return not any(t != first for t in tys)
           else:
               # *tys* is empty.
               return False
       
       
    2: class BaseTuple(ConstSized, Hashable):
    1:     """
           The base class for all tuple types (with a known size).
           """
       
    2:     @classmethod
    2:     def from_types(cls, tys, pyclass=None):
               """
               Instantiate the right tuple type for the given element types.
               """
  190:         if pyclass is not None and pyclass is not tuple:
                   # A subclass => is it a namedtuple?
    2:             assert issubclass(pyclass, tuple)
    2:             if hasattr(pyclass, "_asdict"):
    2:                 tys = tuple(map(unliteral, tys))
    2:                 homogeneous = is_homogeneous(*tys)
    2:                 if homogeneous:
                           return NamedUniTuple(tys[0], len(tys), pyclass)
                       else:
    2:                     return NamedTuple(tys, pyclass)
               else:
  188:             dtype = utils.unified_function_type(tys)
  188:             if dtype is not None:
                       return UniTuple(dtype, len(tys))
                   # non-named tuple
  188:             homogeneous = is_homogeneous(*tys)
  188:             if homogeneous:
   24:                 return cls._make_homogeneous_tuple(tys[0], len(tys))
                   else:
  164:                 return cls._make_heterogeneous_tuple(tys)
       
    2:     @classmethod
    2:     def _make_homogeneous_tuple(cls, dtype, count):
   24:         return UniTuple(dtype, count)
       
    2:     @classmethod
    2:     def _make_heterogeneous_tuple(cls, tys):
  164:         return Tuple(tys)
       
       
    2: class BaseAnonymousTuple(BaseTuple):
    1:     """
           Mixin for non-named tuples.
           """
       
    1:     def can_convert_to(self, typingctx, other):
               """
               Convert this tuple to another one.  Note named tuples are rejected.
               """
               if not isinstance(other, BaseAnonymousTuple):
                   return
               if len(self) != len(other):
                   return
               if len(self) == 0:
                   return Conversion.safe
               if isinstance(other, BaseTuple):
                   kinds = [
                       typingctx.can_convert(ta, tb) for ta, tb in zip(self, other)
                   ]
                   if any(kind is None for kind in kinds):
                       return
                   return max(kinds)
       
    1:     def __unliteral__(self):
  576:         return type(self).from_types([unliteral(t) for t in self])
       
       
    2: class _HomogeneousTuple(Sequence, BaseTuple):
    2:     @property
    2:     def iterator_type(self):
               return UniTupleIter(self)
       
    1:     def __getitem__(self, i):
               """
               Return element at position i
               """
               return self.dtype
       
    1:     def __iter__(self):
   35:         return iter([self.dtype] * self.count)
       
    1:     def __len__(self):
   17:         return self.count
       
    2:     @property
    2:     def types(self):
   20:         return (self.dtype,) * self.count
       
       
    2: class UniTuple(BaseAnonymousTuple, _HomogeneousTuple, Sequence):
    1:     """
           Type class for homogeneous tuples.
           """
       
    1:     def __init__(self, dtype, count):
  338:         self.dtype = dtype
  338:         self.count = count
  338:         name = "%s(%s x %d)" % (self.__class__.__name__, dtype, count,)
  338:         super(UniTuple, self).__init__(name)
       
    2:     @property
    2:     def mangling_args(self):
    4:         return self.__class__.__name__, (self.dtype, self.count)
       
    2:     @property
    2:     def key(self):
 2451:         return self.dtype, self.count
       
    1:     def unify(self, typingctx, other):
               """
               Unify UniTuples with their dtype
               """
               if isinstance(other, UniTuple) and len(self) == len(other):
                   dtype = typingctx.unify_pairs(self.dtype, other.dtype)
                   if dtype is not None:
                       return UniTuple(dtype=dtype, count=self.count)
       
    1:     def __unliteral__(self):
  260:         return type(self)(dtype=unliteral(self.dtype), count=self.count)
       
    1:     def __repr__(self):
   58:         return f"UniTuple({repr(self.dtype)}, {self.count})"
       
       
    2: class UniTupleIter(BaseContainerIterator):
    1:     """
           Type class for homogeneous tuple iterators.
           """
       
    1:     container_class = _HomogeneousTuple
       
       
    2: class _HeterogeneousTuple(BaseTuple):
    1:     def __getitem__(self, i):
               """
               Return element at position i
               """
   40:         return self.types[i]
       
    1:     def __len__(self):
               # Beware: this makes Tuple(()) false-ish
    7:         return len(self.types)
       
    1:     def __iter__(self):
  171:         return iter(self.types)
       
    2:     @staticmethod
    2:     def is_types_iterable(types):
               # issue 4463 - check if argument 'types' is iterable
  180:         if not isinstance(types, Iterable):
                   raise TypingError("Argument 'types' is not iterable")
       
       
    2: class UnionType(Type):
    1:     def __init__(self, types):
  534:         self.types = tuple(sorted(set(types), key=lambda x: x.name))
  178:         name = "Union[{}]".format(",".join(map(str, self.types)))
  178:         super(UnionType, self).__init__(name=name)
       
    1:     def get_type_tag(self, typ):
               return self.types.index(typ)
       
       
    2: class Tuple(BaseAnonymousTuple, _HeterogeneousTuple):
    1:     def __new__(cls, types):
       
  178:         t = utils.unified_function_type(types, require_precise=True)
  178:         if t is not None:
                   return UniTuple(dtype=t, count=len(types))
       
  178:         _HeterogeneousTuple.is_types_iterable(types)
       
  358:         if types and all(t == types[0] for t in types[1:]):
                   return UniTuple(dtype=types[0], count=len(types))
               else:
  178:             return object.__new__(Tuple)
       
    1:     def __init__(self, types):
  178:         self.types = tuple(types)
  178:         self.count = len(self.types)
  178:         self.dtype = UnionType(types)
  178:         name = "%s(%s)" % (
  178:             self.__class__.__name__,
  738:             ", ".join(str(i) for i in self.types),
               )
  178:         super(Tuple, self).__init__(name)
       
    2:     @property
    2:     def mangling_args(self):
               return self.__class__.__name__, tuple(t for t in self.types)
       
    2:     @property
    2:     def key(self):
  867:         return self.types
       
    1:     def unify(self, typingctx, other):
               """
               Unify elements of Tuples/UniTuples
               """
               # Other is UniTuple or Tuple
               if isinstance(other, BaseTuple) and len(self) == len(other):
                   unified = [
                       typingctx.unify_pairs(ta, tb) for ta, tb in zip(self, other)
                   ]
       
                   if all(t is not None for t in unified):
                       return Tuple(unified)
       
    1:     def __repr__(self):
               return f"Tuple({tuple(ty for ty in self.types)})"
       
       
    2: class _StarArgTupleMixin:
    2:     @classmethod
    2:     def _make_homogeneous_tuple(cls, dtype, count):
               return StarArgUniTuple(dtype, count)
       
    2:     @classmethod
    2:     def _make_heterogeneous_tuple(cls, tys):
               return StarArgTuple(tys)
       
       
    2: class StarArgTuple(_StarArgTupleMixin, Tuple):
    1:     """To distinguish from Tuple() used as argument to a `*args`.
           """
       
    1:     def __new__(cls, types):
               _HeterogeneousTuple.is_types_iterable(types)
       
               if types and all(t == types[0] for t in types[1:]):
                   return StarArgUniTuple(dtype=types[0], count=len(types))
               else:
                   return object.__new__(StarArgTuple)
       
       
    2: class StarArgUniTuple(_StarArgTupleMixin, UniTuple):
    1:     """To distinguish from UniTuple() used as argument to a `*args`.
           """
       
       
    2: class BaseNamedTuple(BaseTuple):
    1:     pass
       
       
    2: class NamedUniTuple(_HomogeneousTuple, BaseNamedTuple):
    1:     def __init__(self, dtype, count, cls):
               self.dtype = dtype
               self.count = count
               self.fields = tuple(cls._fields)
               self.instance_class = cls
               name = "%s(%s x %d)" % (cls.__name__, dtype, count)
               super(NamedUniTuple, self).__init__(name)
       
    2:     @property
    2:     def iterator_type(self):
               return UniTupleIter(self)
       
    2:     @property
    2:     def key(self):
               return self.instance_class, self.dtype, self.count
       
       
    2: class NamedTuple(_HeterogeneousTuple, BaseNamedTuple):
    1:     def __init__(self, types, cls):
    2:         _HeterogeneousTuple.is_types_iterable(types)
       
    2:         self.types = tuple(types)
    2:         self.count = len(self.types)
    2:         self.fields = tuple(cls._fields)
    2:         self.instance_class = cls
   34:         name = "%s(%s)" % (cls.__name__, ", ".join(str(i) for i in self.types))
    2:         super(NamedTuple, self).__init__(name)
       
    2:     @property
    2:     def key(self):
  177:         return self.instance_class, self.types
       
       
    2: class List(MutableSequence, InitialValue):
    1:     """
           Type class for (arbitrary-sized) homogeneous lists.
           """
       
    1:     mutable = True
       
    1:     def __init__(self, dtype, reflected=False, initial_value=None):
               dtype = unliteral(dtype)
               self.dtype = dtype
               self.reflected = reflected
               cls_name = "reflected list" if reflected else "list"
               name = "%s(%s)<iv=%s>" % (cls_name, self.dtype, initial_value)
               super(List, self).__init__(name=name)
               InitialValue.__init__(self, initial_value)
       
    1:     def copy(self, dtype=None, reflected=None):
               if dtype is None:
                   dtype = self.dtype
               if reflected is None:
                   reflected = self.reflected
               return List(dtype, reflected, self.initial_value)
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, List):
                   dtype = typingctx.unify_pairs(self.dtype, other.dtype)
                   reflected = self.reflected or other.reflected
                   if dtype is not None:
                       siv = self.initial_value
                       oiv = other.initial_value
                       if siv is not None and oiv is not None:
                           use = siv
                           if siv is None:
                               use = oiv
                           return List(dtype, reflected, use)
                       else:
                           return List(dtype, reflected)
       
    2:     @property
    2:     def key(self):
               return self.dtype, self.reflected, str(self.initial_value)
       
    2:     @property
    2:     def iterator_type(self):
               return ListIter(self)
       
    1:     def is_precise(self):
               return self.dtype.is_precise()
       
    1:     def __getitem__(self, args):
               """
               Overrides the default __getitem__ from Type.
               """
               return self.dtype
       
    1:     def __unliteral__(self):
               return List(self.dtype, reflected=self.reflected,
                           initial_value=None)
       
    1:     def __repr__(self):
               return f"List({self.dtype}, {self.reflected})"
       
       
    2: class LiteralList(Literal, ConstSized, Hashable):
    1:     """A heterogeneous immutable list (basically a tuple with list semantics).
           """
       
    1:     mutable = False
       
    1:     def __init__(self, literal_value):
               self.is_types_iterable(literal_value)
               self._literal_init(list(literal_value))
               self.types = tuple(literal_value)
               self.count = len(self.types)
               self.name = "LiteralList({})".format(literal_value)
       
    1:     def __getitem__(self, i):
               """
               Return element at position i
               """
               return self.types[i]
       
    1:     def __len__(self):
               return len(self.types)
       
    1:     def __iter__(self):
               return iter(self.types)
       
    2:     @classmethod
    2:     def from_types(cls, tys):
               return LiteralList(tys)
       
    2:     @staticmethod
    2:     def is_types_iterable(types):
               if not isinstance(types, Iterable):
                   raise TypingError("Argument 'types' is not iterable")
       
    2:     @property
    2:     def iterator_type(self):
               return ListIter(self)
       
    1:     def __unliteral__(self):
               return Poison(self)
       
    1:     def unify(self, typingctx, other):
               """
               Unify this with the *other* one.
               """
               if isinstance(other, LiteralList) and self.count == other.count:
                   tys = []
                   for i1, i2 in zip(self.types, other.types):
                       tys.append(typingctx.unify_pairs(i1, i2))
                   if all(tys):
                       return LiteralList(tys)
       
       
    2: class ListIter(BaseContainerIterator):
    1:     """
           Type class for list iterators.
           """
       
    1:     container_class = List
       
       
    2: class ListPayload(BaseContainerPayload):
    1:     """
           Internal type class for the dynamically-allocated payload of a list.
           """
       
    1:     container_class = List
       
       
    2: class Set(Container):
    1:     """
           Type class for homogeneous sets.
           """
       
    1:     mutable = True
       
    1:     def __init__(self, dtype, reflected=False):
               assert isinstance(dtype, (Hashable, Undefined))
               self.dtype = dtype
               self.reflected = reflected
               cls_name = "reflected set" if reflected else "set"
               name = "%s(%s)" % (cls_name, self.dtype)
               super(Set, self).__init__(name=name)
       
    2:     @property
    2:     def key(self):
               return self.dtype, self.reflected
       
    2:     @property
    2:     def iterator_type(self):
               return SetIter(self)
       
    1:     def is_precise(self):
               return self.dtype.is_precise()
       
    1:     def copy(self, dtype=None, reflected=None):
               if dtype is None:
                   dtype = self.dtype
               if reflected is None:
                   reflected = self.reflected
               return Set(dtype, reflected)
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, Set):
                   dtype = typingctx.unify_pairs(self.dtype, other.dtype)
                   reflected = self.reflected or other.reflected
                   if dtype is not None:
                       return Set(dtype, reflected)
       
    1:     def __repr__(self):
               return f"Set({self.dtype}, {self.reflected})"
       
       
    2: class SetIter(BaseContainerIterator):
    1:     """
           Type class for set iterators.
           """
       
    1:     container_class = Set
       
       
    2: class SetPayload(BaseContainerPayload):
    1:     """
           Internal type class for the dynamically-allocated payload of a set.
           """
       
    1:     container_class = Set
       
       
    2: class SetEntry(Type):
    1:     """
           Internal type class for the entries of a Set's hash table.
           """
       
    1:     def __init__(self, set_type):
               self.set_type = set_type
               name = "entry(%s)" % set_type
               super(SetEntry, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.set_type
       
       
    2: class ListType(IterableType):
    1:     """List type
           """
       
    1:     mutable = True
       
    1:     def __init__(self, itemty):
               assert not isinstance(itemty, TypeRef)
               itemty = unliteral(itemty)
               if isinstance(itemty, Optional):
                   fmt = "List.item_type cannot be of type {}"
                   raise TypingError(fmt.format(itemty))
               # FIXME: _sentry_forbidden_types(itemty)
               self.item_type = itemty
               self.dtype = itemty
               name = "{}[{}]".format(self.__class__.__name__, itemty,)
               super(ListType, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.item_type
       
    1:     def is_precise(self):
               return not isinstance(self.item_type, Undefined)
       
    2:     @property
    2:     def iterator_type(self):
               return ListTypeIterableType(self).iterator_type
       
    2:     @classmethod
    2:     def refine(cls, itemty):
               """Refine to a precise list type
               """
               res = cls(itemty)
               assert res.is_precise()
               return res
       
    1:     def unify(self, typingctx, other):
               """
               Unify this with the *other* list.
               """
               # If other is list
               if isinstance(other, ListType):
                   if not other.is_precise():
                       return self
       
    1:     def __repr__(self):
               return f"ListType({self.item_type})"
       
       
    2: class ListTypeIterableType(SimpleIterableType):
    1:     """List iterable type
           """
       
    1:     def __init__(self, parent):
               assert isinstance(parent, ListType)
               self.parent = parent
               self.yield_type = self.parent.item_type
               name = "list[{}]".format(self.parent.name)
               iterator_type = ListTypeIteratorType(self)
               super(ListTypeIterableType, self).__init__(name, iterator_type)
       
       
    2: class ListTypeIteratorType(SimpleIteratorType):
    1:     def __init__(self, iterable):
               self.parent = iterable.parent
               self.iterable = iterable
               yield_type = iterable.yield_type
               name = "iter[{}->{}]".format(iterable.parent, yield_type)
               super(ListTypeIteratorType, self).__init__(name, yield_type)
       
       
    1: def _sentry_forbidden_types(key, value):
           # Forbids List and Set for now
           if isinstance(key, (Set, List)):
               raise TypingError("{} as key is forbidden".format(key))
           if isinstance(value, (Set, List)):
               raise TypingError("{} as value is forbidden".format(value))
       
       
    2: class DictType(IterableType, InitialValue):
    1:     """Dictionary type
           """
       
    1:     def __init__(self, keyty, valty, initial_value=None):
               assert not isinstance(keyty, TypeRef)
               assert not isinstance(valty, TypeRef)
               keyty = unliteral(keyty)
               valty = unliteral(valty)
               if isinstance(keyty, (Optional, NoneType)):
                   fmt = "Dict.key_type cannot be of type {}"
                   raise TypingError(fmt.format(keyty))
               if isinstance(valty, (Optional, NoneType)):
                   fmt = "Dict.value_type cannot be of type {}"
                   raise TypingError(fmt.format(valty))
               _sentry_forbidden_types(keyty, valty)
               self.key_type = keyty
               self.value_type = valty
               self.keyvalue_type = Tuple([keyty, valty])
               name = "{}[{},{}]<iv={}>".format(
                   self.__class__.__name__, keyty, valty, initial_value
               )
               super(DictType, self).__init__(name)
               InitialValue.__init__(self, initial_value)
       
    1:     def is_precise(self):
               return not any(
                   (
                       isinstance(self.key_type, Undefined),
                       isinstance(self.value_type, Undefined),
                   )
               )
       
    2:     @property
    2:     def iterator_type(self):
               return DictKeysIterableType(self).iterator_type
       
    2:     @classmethod
    2:     def refine(cls, keyty, valty):
               """Refine to a precise dictionary type
               """
               res = cls(keyty, valty)
               assert res.is_precise()
               return res
       
    1:     def unify(self, typingctx, other):
               """
               Unify this with the *other* dictionary.
               """
               # If other is dict
               if isinstance(other, DictType):
                   if not other.is_precise():
                       return self
                   else:
                       ukey_type = self.key_type == other.key_type
                       uvalue_type = self.value_type == other.value_type
                       if ukey_type and uvalue_type:
                           siv = self.initial_value
                           oiv = other.initial_value
                           siv_none = siv is None
                           oiv_none = oiv is None
                           if not siv_none and not oiv_none:
                               if siv == oiv:
                                   return DictType(self.key_type, other.value_type,
                                                   siv)
                           return DictType(self.key_type, other.value_type)
       
    2:     @property
    2:     def key(self):
               return self.key_type, self.value_type, str(self.initial_value)
       
    1:     def __unliteral__(self):
               return DictType(self.key_type, self.value_type)
       
    1:     def __repr__(self):
               return f"DictType({self.key_type}, {self.value_type})"
       
       
    2: class LiteralStrKeyDict(Literal, ConstSized, Hashable):
    1:     """A Dictionary of string keys to heterogeneous values (basically a
           namedtuple with dict semantics).
           """
       
    2:     class FakeNamedTuple(pySequence):
               # This is namedtuple-like and is a workaround for #6518 and #7416.
               # This has the couple of namedtuple properties that are used by Numba's
               # internals but avoids use of an actual namedtuple as it cannot have
               # numeric field names, i.e. `namedtuple('foo', '0 1')` is invalid.
    1:         def __init__(self, name, keys):
                   self.__name__ = name
                   self._fields = tuple(keys)
                   super(LiteralStrKeyDict.FakeNamedTuple, self).__init__()
       
    1:         def __len__(self):
                   return len(self._fields)
       
    1:         def __getitem__(self, key):
                   return self._fields[key]
       
    1:     mutable = False
       
    1:     def __init__(self, literal_value, value_index=None):
               self._literal_init(literal_value)
               self.value_index = value_index
               strkeys = [x.literal_value for x in literal_value.keys()]
               self.tuple_ty = self.FakeNamedTuple("_ntclazz", strkeys)
               tys = [x for x in literal_value.values()]
               self.types = tuple(tys)
               self.count = len(self.types)
               self.fields = tuple(self.tuple_ty._fields)
               self.instance_class = self.tuple_ty
               self.name = "LiteralStrKey[Dict]({})".format(literal_value)
       
    1:     def __unliteral__(self):
               return Poison(self)
       
    1:     def unify(self, typingctx, other):
               """
               Unify this with the *other* one.
               """
               if isinstance(other, LiteralStrKeyDict):
                   tys = []
                   for (k1, v1), (k2, v2) in zip(
                       self.literal_value.items(), other.literal_value.items()
                   ):
                       if k1 != k2:  # keys must be same
                           break
                       tys.append(typingctx.unify_pairs(v1, v2))
                   else:
                       if all(tys):
                           d = {k: v for k, v in zip(self.literal_value.keys(), tys)}
                           return LiteralStrKeyDict(d)
       
    1:     def __len__(self):
               return len(self.types)
       
    1:     def __iter__(self):
               return iter(self.types)
       
    2:     @property
    2:     def key(self):
               # use the namedtuple fields not the namedtuple itself as it's created
               # locally in the ctor and comparison would always be False.
               return self.tuple_ty._fields, self.types, str(self.literal_value)
       
       
    2: class DictItemsIterableType(SimpleIterableType):
    1:     """Dictionary iterable type for .items()
           """
       
    1:     def __init__(self, parent):
               assert isinstance(parent, DictType)
               self.parent = parent
               self.yield_type = self.parent.keyvalue_type
               name = "items[{}]".format(self.parent.name)
               self.name = name
               iterator_type = DictIteratorType(self)
               super(DictItemsIterableType, self).__init__(name, iterator_type)
       
       
    2: class DictKeysIterableType(SimpleIterableType):
    1:     """Dictionary iterable type for .keys()
           """
       
    1:     def __init__(self, parent):
               assert isinstance(parent, DictType)
               self.parent = parent
               self.yield_type = self.parent.key_type
               name = "keys[{}]".format(self.parent.name)
               self.name = name
               iterator_type = DictIteratorType(self)
               super(DictKeysIterableType, self).__init__(name, iterator_type)
       
       
    2: class DictValuesIterableType(SimpleIterableType):
    1:     """Dictionary iterable type for .values()
           """
       
    1:     def __init__(self, parent):
               assert isinstance(parent, DictType)
               self.parent = parent
               self.yield_type = self.parent.value_type
               name = "values[{}]".format(self.parent.name)
               self.name = name
               iterator_type = DictIteratorType(self)
               super(DictValuesIterableType, self).__init__(name, iterator_type)
       
       
    2: class DictIteratorType(SimpleIteratorType):
    1:     def __init__(self, iterable):
               self.parent = iterable.parent
               self.iterable = iterable
               yield_type = iterable.yield_type
               name = "iter[{}->{}],{}".format(
                   iterable.parent, yield_type, iterable.name
               )
               super(DictIteratorType, self).__init__(name, yield_type)
       
       
    2: class StructRef(Type):
    1:     """A mutable struct.
           """
       
    1:     def __init__(self, fields):
               """
               Parameters
               ----------
               fields : Sequence
                   A sequence of field descriptions, which is a 2-tuple-like object
                   containing `(name, type)`, where `name` is a `str` for the field
                   name, and `type` is a numba type for the field type.
               """
       
               def check_field_pair(fieldpair):
                   name, typ = fieldpair
                   if not isinstance(name, str):
                       msg = "expecting a str for field name"
                       raise ValueError(msg)
                   if not isinstance(typ, Type):
                       msg = "expecting a Numba Type for field type"
                       raise ValueError(msg)
                   return name, typ
       
               fields = tuple(map(check_field_pair, fields))
               self._fields = tuple(map(check_field_pair,
                                        self.preprocess_fields(fields)))
               self._typename = self.__class__.__qualname__
               name = f"numba.{self._typename}{self._fields}"
               super().__init__(name=name)
       
    1:     def preprocess_fields(self, fields):
               """Subclasses can override this to do additional clean up on fields.
       
               The default is an identity function.
       
               Parameters:
               -----------
               fields : Sequence[Tuple[str, Type]]
               """
               return fields
       
    2:     @property
    2:     def field_dict(self):
               """Return an immutable mapping for the field names and their
               corresponding types.
               """
               return MappingProxyType(dict(self._fields))
       
    1:     def get_data_type(self):
               """Get the payload type for the actual underlying structure referred
               to by this struct reference.
       
               See also: `ClassInstanceType.get_data_type`
               """
               return StructRefPayload(
                   typename=self.__class__.__name__, fields=self._fields,
               )
       
       
    2: class StructRefPayload(Type):
    1:     """The type of the payload of a mutable struct.
           """
       
    1:     mutable = True
       
    1:     def __init__(self, typename, fields):
               self._typename = typename
               self._fields = tuple(fields)
               super().__init__(name=f"numba.{typename}{self._fields}.payload")
       
    2:     @property
    2:     def field_dict(self):
               return MappingProxyType(dict(self._fields))
