    1: from pymgipsim.Plotting.plotting import *
    1: import pickle
    1: import json
    1: from pymgipsim.Utilities.Scenario import scenario
    1: from pymgipsim.Utilities.units_conversions_constants import UnitConversion
    1: import pymgipsim.VirtualPatient.Models as Models
    1: import os
       
    1: """ 
       #######################################################################################################################
       Model States
       #######################################################################################################################
       """
    1: def _generate_plot_subject(results_directory, **kwargs):
           """
           Generate and save a detailed input-output plot for a single subject.
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - fig
           """
       
    2:     with open(os.path.join(results_directory, "model.pkl"), 'rb') as f:
    1:         loaded_model = pickle.load(f)
       
    2:     with open(os.path.join(results_directory, "simulation_settings.json"), "r") as f:  #
    1:         loaded_scenario = scenario(**json.load(f))
    1:     f.close()
       
    1:     patient = kwargs['plot_patient']
       
    1:     fig = plot_subject_response(loaded_model, loaded_scenario, patient)
    1:     fig.savefig(os.path.join(results_directory, "figures", "subject_" + fig.axes[0].get_title() + ".png"), bbox_inches='tight')
       
    1:     return fig
       
    1: def _generate_plot_bgc(results_directory, **kwargs):
           """
           Generate and save a blood glucose (BGC) plot for the simulation.
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - None
           """
       
    2:     with open(os.path.join(results_directory, "model.pkl"), 'rb') as f:
    1:         loaded_model = pickle.load(f)
       
    1:     if 'figsize' in kwargs:
    1:         figsize=tuple(kwargs['figsize'])
           else:
               figsize=(12,12)
       
    1:     if 'color' in kwargs:
    1:         figcolor = kwargs['color']
           else:
               figcolor = 'C0'
       
    1:     glucose = np.zeros_like(loaded_model.states.as_array[:, loaded_model.glucose_state, :])
       
       
    1:     match loaded_model.name:
    1:         case Models.T1DM.ExtHovorka.Model.name:
    1:             volume = loaded_model.parameters.VG
       
    2:             for i in range(glucose.shape[0]):
    1:                 glucose[i] = UnitConversion.glucose.concentration_mmolL_to_mgdL(loaded_model.states.as_array[i, loaded_model.glucose_state, :] / volume[i])
                       
               case Models.T1DM.IVP.Model.name:
                   glucose = loaded_model.states.as_array[:, loaded_model.glucose_state, :]
       
    1:     fig = plot_bgc(loaded_model.time.as_unix, glucose, figsize, figcolor)
    1:     fig.tight_layout()
    1:     fig.savefig(os.path.join(results_directory, "figures", "bgc_plot.png"), bbox_inches='tight')
       
    1:     return fig
       
    1: def _generate_plot_all_states(results_directory, **kwargs):
           """
           Generate and save a plot for all states in the simulation.
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - None
           """
       
    1:     if 'figsize' in kwargs:
    1:         figsize=tuple(kwargs['figsize'])
           else:
               figsize=(12,12)
       
    1:     if 'color' in kwargs:
    1:         figcolor = kwargs['color']
           else:
               figcolor = 'C0'
       
       
    2:     with open(os.path.join(results_directory, "model.pkl"), 'rb') as f:
    1:         loaded_model = pickle.load(f)
       
    1:     fig = plot_all_states(loaded_model.time.as_unix, loaded_model.states.as_array, loaded_model.states.state_units, loaded_model.states.state_names, figsize, figcolor)
    1:     fig.tight_layout()
    1:     fig.savefig(os.path.join(results_directory, "figures", "all_states.png"), bbox_inches='tight')
       
    1:     return fig
       
       
    1: def _generate_bw(results_directory, **kwargs):
           """
           Generate and save a plot for body weight in a multiscale simulation
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - None
           """
       
           if 'figsize' in kwargs:
               figsize=tuple(kwargs['figsize'])
           else:
               figsize=(12,12)
       
           if 'color' in kwargs:
               figcolor = kwargs['color']
           else:
               figcolor = 'C0'
       
       
           with open(os.path.join(results_directory, "multiscale_model.pkl"), 'rb') as f:
               loaded_model = pickle.load(f)
       
           fig = plot_bw(loaded_model.time.as_unix, loaded_model.states.as_array, loaded_model.states.state_units, loaded_model.states.state_names, figsize, figcolor)
           fig.tight_layout()
           fig.savefig(os.path.join(results_directory, "figures", "bodyweight.png"), bbox_inches='tight')
       
           return fig
       
    1: """ 
       #######################################################################################################################
       Multiscale-Specific
       #######################################################################################################################
       """
       
       
    1: def _generate_bw(results_directory, **kwargs):
           """
           Generate and save a plot for body weight in a multiscale simulation
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - None
           """
       
           if 'figsize' in kwargs:
               figsize=tuple(kwargs['figsize'])
           else:
               figsize=(12,12)
       
           if 'color' in kwargs:
               figcolor = kwargs['color']
           else:
               figcolor = 'C0'
       
       
           with open(os.path.join(results_directory, "multiscale_model.pkl"), 'rb') as f:
               loaded_model = pickle.load(f)
       
           fig = plot_bw(loaded_model.time.as_unix, loaded_model.states.as_array, loaded_model.states.state_units, loaded_model.states.state_names, figsize, figcolor)
           fig.tight_layout()
           fig.savefig(os.path.join(results_directory, "figures", "bodyweight.png"), bbox_inches='tight')
       
           return fig
       
       
    1: """ 
       #######################################################################################################################
       Signals
       #######################################################################################################################
       """
       
    1: def _generate_input_signals(results_directory, **kwargs):
           """
           Generate and save a plot for body weight in a multiscale simulation
       
           Parameters:
           - simulation_folder: str
               Path to the simulation folder.
       
           Returns:
           - None
           """
       
    1:     if 'figsize' in kwargs:
    1:         figsize=tuple(kwargs['figsize'])
           else:
               figsize=(12,12)
       
    1:     if 'color' in kwargs:
    1:         figcolor = kwargs['color']
           else:
               figcolor = 'C0'
       
       
    2:     with open(os.path.join(results_directory, "model.pkl"), 'rb') as f:
    1:         loaded_model = pickle.load(f)
       
    8:     fig = plot_input_signals(loaded_model.time.as_unix, loaded_model.inputs.as_array, [i for i in list(vars(loaded_model.inputs).keys()) if 'array' not in i])
    1:     fig.tight_layout()
    1:     fig.savefig(os.path.join(results_directory, "figures", "input_singals.png"), bbox_inches='tight')
       
    1:     return fig
       
       
       
       
       
       
    1: """ 
       #######################################################################################################################
       Main
       #######################################################################################################################
       """
       
    1: def generate_plots_main(results_folder_path, args):
       
    1:     if not args.no_print:
    1:         print(f">>>>> Generating Plots")
       
        
    1:     plot_list = []
       
    1:     bgc_fig = _generate_plot_bgc(results_folder_path, **vars(args))
       
    1:     all_states_fig = _generate_plot_all_states(results_folder_path, **vars(args))
       
    1:     input_signals_fig = _generate_input_signals(results_folder_path, **vars(args))
       
    1:     plot_list = [bgc_fig, all_states_fig, input_signals_fig]
       
    1:     if args.multi_scale:
               """ Body Weight Figure """
               bw_fig = _generate_bw(results_folder_path, **vars(args))
               plot_list.append(bw_fig)
       
               if not args.plot_body_weight and not args.plot_all:
                   plt.close(bw_fig)
                   plot_list.remove(bw_fig)
       
    1:     if args.plot_patient is not None:
    1:         subject_fig = _generate_plot_subject(results_folder_path, **vars(args))
    1:         plot_list.append(subject_fig)
       
    1:     if not args.plot_blood_glucose and not args.plot_all:
    1:         plt.close(bgc_fig)
    1:         plot_list.remove(bgc_fig)
       
    1:     if not args.plot_all_states and not args.plot_all:
    1:         plt.close(all_states_fig)
    1:         plot_list.remove(all_states_fig)
       
    1:     if not args.plot_input_signals and not args.plot_all:
    1:         plt.close(input_signals_fig)
    1:         plot_list.remove(input_signals_fig)
                   
    1:     return plot_list
       
    1: if __name__ == '__main__':
           pass
