       # Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
    1: from __future__ import annotations
       
    1: from typing import TYPE_CHECKING, cast
       
    1: from streamlit.proto.Text_pb2 import Text as TextProto
    1: from streamlit.runtime.metrics_util import gather_metrics
    1: from streamlit.string_util import clean_text
       
    1: if TYPE_CHECKING:
           from streamlit.delta_generator import DeltaGenerator
           from streamlit.type_util import SupportsStr
       
       
    2: class TextMixin:
    2:     @gather_metrics("text")
    2:     def text(
               self,
               body: SupportsStr,
               *,  # keyword-only arguments:
    1:         help: str | None = None,
           ) -> DeltaGenerator:
               """Write fixed-width and preformatted text.
       
               Parameters
               ----------
               body : str
                   The string to display.
       
               help : str
                   An optional tooltip that gets displayed next to the text.
       
               Example
               -------
               >>> import streamlit as st
               >>>
               >>> st.text("This is some text.")
       
               """
               text_proto = TextProto()
               text_proto.body = clean_text(body)
               if help:
                   text_proto.help = help
               return self.dg._enqueue("text", text_proto)
       
    2:     @property
    2:     def dg(self) -> DeltaGenerator:
               """Get our DeltaGenerator."""
               return cast("DeltaGenerator", self)
