    1: import collections
    1: import functools
    1: import sys
       
    1: from numba.core.ir import Loc
    1: from numba.core.errors import UnsupportedError
    1: from numba.core.utils import PYVERSION
       
       # List of bytecodes creating a new block in the control flow graph
       # (in addition to explicit jump labels).
    1: NEW_BLOCKERS = frozenset([
           'SETUP_LOOP', 'FOR_ITER', 'SETUP_WITH', 'BEFORE_WITH'
       ])
       
       
    2: class CFBlock(object):
       
    1:     def __init__(self, offset):
               self.offset = offset
               self.body = []
               # A map of jumps to outgoing blocks (successors):
               #   { offset of outgoing block -> number of stack pops }
               self.outgoing_jumps = {}
               # A map of jumps to incoming blocks (predecessors):
               #   { offset of incoming block -> number of stack pops }
               self.incoming_jumps = {}
               self.terminating = False
       
    1:     def __repr__(self):
               args = (self.offset,
                       sorted(self.outgoing_jumps),
                       sorted(self.incoming_jumps))
               return "block(offset:%d, outgoing: %s, incoming: %s)" % args
       
    1:     def __iter__(self):
               return iter(self.body)
       
       
    3: class Loop(collections.namedtuple("Loop",
    1:                                   ("entries", "exits", "header", "body"))):
    1:     """
           A control flow loop, as detected by a CFGraph object.
           """
       
    1:     __slots__ = ()
       
           # The loop header is enough to detect that two loops are really
           # the same, assuming they belong to the same graph.
           # (note: in practice, only one loop instance is created per graph
           #  loop, so identity would be fine)
       
    1:     def __eq__(self, other):
               return isinstance(other, Loop) and other.header == self.header
       
    1:     def __hash__(self):
               return hash(self.header)
       
       
    2: class _DictOfContainers(collections.defaultdict):
    1:     """A defaultdict with customized equality checks that ignore empty values.
       
           Non-empty value is checked by: `bool(value_item) == True`.
           """
       
    1:     def __eq__(self, other):
   48:         if isinstance(other, _DictOfContainers):
   48:             mine = self._non_empty_items()
   48:             theirs = other._non_empty_items()
   48:             return mine == theirs
       
               return NotImplemented
       
    1:     def __ne__(self, other):
   48:         ret = self.__eq__(other)
   48:         if ret is NotImplemented:
                   return ret
               else:
   48:             return not ret
       
    1:     def _non_empty_items(self):
  548:         return [(k, vs) for k, vs in sorted(self.items()) if vs]
       
       
    2: class CFGraph(object):
    1:     """
           Generic (almost) implementation of a Control Flow Graph.
           """
       
    1:     def __init__(self):
  600:         self._nodes = set()
  600:         self._preds = _DictOfContainers(set)
  600:         self._succs = _DictOfContainers(set)
  600:         self._edge_data = {}
  600:         self._entry_point = None
       
    1:     def add_node(self, node):
               """
               Add *node* to the graph.  This is necessary before adding any
               edges from/to the node.  *node* can be any hashable object.
               """
 2441:         self._nodes.add(node)
       
    1:     def add_edge(self, src, dest, data=None):
               """
               Add an edge from node *src* to node *dest*, with optional
               per-edge *data*.
               If such an edge already exists, it is replaced (duplicate edges
               are not possible).
               """
 2384:         if src not in self._nodes:
                   raise ValueError("Cannot add edge as src node %s not in nodes %s" %
                                    (src, self._nodes))
 2384:         if dest not in self._nodes:
                   raise ValueError("Cannot add edge as dest node %s not in nodes %s" %
                                    (dest, self._nodes))
 2384:         self._add_edge(src, dest, data)
       
    1:     def successors(self, src):
               """
               Yield (node, data) pairs representing the successors of node *src*.
               (*data* will be None if no data was specified when adding the edge)
               """
10431:         for dest in self._succs[src]:
 5258:             yield dest, self._edge_data[src, dest]
       
    1:     def predecessors(self, dest):
               """
               Yield (node, data) pairs representing the predecessors of node *dest*.
               (*data* will be None if no data was specified when adding the edge)
               """
 8083:         for src in self._preds[dest]:
 4354:             yield src, self._edge_data[src, dest]
       
    1:     def set_entry_point(self, node):
               """
               Set the entry point of the graph to *node*.
               """
  600:         assert node in self._nodes
  600:         self._entry_point = node
       
    1:     def process(self):
               """
               Compute essential properties of the control flow graph.  The graph
               must have been fully populated, and its entry point specified. Other
               graph properties are computed on-demand.
               """
  600:         if self._entry_point is None:
                   raise RuntimeError("no entry point defined!")
  600:         self._eliminate_dead_blocks()
       
    1:     def dominators(self):
               """
               Return a dictionary of {node -> set(nodes)} mapping each node to
               the nodes dominating it.
       
               A node D dominates a node N when any path leading to N must go through D
               """
   24:         return self._doms
       
    1:     def post_dominators(self):
               """
               Return a dictionary of {node -> set(nodes)} mapping each node to
               the nodes post-dominating it.
       
               A node P post-dominates a node N when any path starting from N must go
               through P.
               """
               return self._post_doms
       
    1:     def immediate_dominators(self):
               """
               Return a dictionary of {node -> node} mapping each node to its
               immediate dominator (idom).
       
               The idom(B) is the closest strict dominator of V
               """
   52:         return self._idom
       
    1:     def dominance_frontier(self):
               """
               Return a dictionary of {node -> set(nodes)} mapping each node to
               the nodes in its dominance frontier.
       
               The dominance frontier _df(N) is the set of all nodes that are
               immediate successors to blocks dominated by N but which aren't
               strictly dominated by N
               """
   24:         return self._df
       
    1:     def dominator_tree(self):
               """
               return a dictionary of {node -> set(nodes)} mapping each node to
               the set of nodes it immediately dominates
       
               The domtree(B) is the closest strict set of nodes that B dominates
               """
               return self._domtree
       
    2:     @functools.cached_property
    2:     def _exit_points(self):
   24:         return self._find_exit_points()
       
    2:     @functools.cached_property
    2:     def _doms(self):
   24:         return self._find_dominators()
       
    2:     @functools.cached_property
    2:     def _back_edges(self):
  312:         return self._find_back_edges()
       
    2:     @functools.cached_property
    2:     def _topo_order(self):
   24:         return self._find_topo_order()
       
    2:     @functools.cached_property
    2:     def _descs(self):
               return self._find_descendents()
       
    2:     @functools.cached_property
    2:     def _loops(self):
  264:         return self._find_loops()
       
    2:     @functools.cached_property
    2:     def _in_loops(self):
   24:         return self._find_in_loops()
       
    2:     @functools.cached_property
    2:     def _post_doms(self):
   24:         return self._find_post_dominators()
       
    2:     @functools.cached_property
    2:     def _idom(self):
   24:         return self._find_immediate_dominators()
       
    2:     @functools.cached_property
    2:     def _df(self):
   24:         return self._find_dominance_frontier()
       
    2:     @functools.cached_property
    2:     def _domtree(self):
               return self._find_dominator_tree()
       
    1:     def descendents(self, node):
               """
               Return the set of descendents of the given *node*, in topological
               order (ignoring back edges).
               """
               return self._descs[node]
       
    1:     def entry_point(self):
               """
               Return the entry point node.
               """
  312:         assert self._entry_point is not None
  312:         return self._entry_point
       
    1:     def exit_points(self):
               """
               Return the computed set of exit nodes (may be empty).
               """
               return self._exit_points
       
    1:     def backbone(self):
               """
               Return the set of nodes constituting the graph's backbone.
               (i.e. the nodes that every path starting from the entry point
                must go through).  By construction, it is non-empty: it contains
                at least the entry point.
               """
   48:         return self._post_doms[self._entry_point]
       
    1:     def loops(self):
               """
               Return a dictionary of {node -> loop} mapping each loop header
               to the loop (a Loop instance) starting with it.
               """
  240:         return self._loops
       
    1:     def in_loops(self, node):
               """
               Return the list of Loop objects the *node* belongs to,
               from innermost to outermost.
               """
  236:         return [self._loops[x] for x in self._in_loops.get(node, ())]
       
    1:     def dead_nodes(self):
               """
               Return the set of dead nodes (eliminated from the graph).
               """
   48:         return self._dead_nodes
       
    1:     def nodes(self):
               """
               Return the set of live nodes.
               """
               return self._nodes
       
    1:     def topo_order(self):
               """
               Return the sequence of nodes in topological order (ignoring back
               edges).
               """
               return self._topo_order
       
    1:     def topo_sort(self, nodes, reverse=False):
               """
               Iterate over the *nodes* in topological order (ignoring back edges).
               The sort isn't guaranteed to be stable.
               """
   24:         nodes = set(nodes)
   24:         it = self._topo_order
   24:         if reverse:
   24:             it = reversed(it)
  126:         for n in it:
  102:             if n in nodes:
                       yield n
       
    1:     def dump(self, file=None):
               """
               Dump extensive debug information.
               """
               import pprint
               file = file or sys.stdout
               if 1:
                   print("CFG adjacency lists:", file=file)
                   self._dump_adj_lists(file)
               print("CFG dominators:", file=file)
               pprint.pprint(self._doms, stream=file)
               print("CFG post-dominators:", file=file)
               pprint.pprint(self._post_doms, stream=file)
               print("CFG back edges:", sorted(self._back_edges), file=file)
               print("CFG loops:", file=file)
               pprint.pprint(self._loops, stream=file)
               print("CFG node-to-loops:", file=file)
               pprint.pprint(self._in_loops, stream=file)
               print("CFG backbone:", file=file)
               pprint.pprint(self.backbone(), stream=file)
       
    1:     def render_dot(self, filename="numba_cfg.dot"):
               """Render the controlflow graph with GraphViz DOT via the
               ``graphviz`` python binding.
       
               Returns
               -------
               g : graphviz.Digraph
                   Use `g.view()` to open the graph in the default PDF application.
               """
       
               try:
                   import graphviz as gv
               except ImportError:
                   raise ImportError(
                       "The feature requires `graphviz` but it is not available. "
                       "Please install with `pip install graphviz`"
                   )
               g = gv.Digraph(filename=filename)
               # Populate the nodes
               for n in self._nodes:
                   g.node(str(n))
               # Populate the edges
               for n in self._nodes:
                   for edge in self._succs[n]:
                       g.edge(str(n), str(edge))
               return g
       
           # Internal APIs
       
    1:     def _add_edge(self, from_, to, data=None):
               # This internal version allows adding edges to/from unregistered
               # (ghost) nodes.
 2384:         self._preds[to].add(from_)
 2384:         self._succs[from_].add(to)
 2384:         self._edge_data[from_, to] = data
       
    1:     def _remove_node_edges(self, node):
   37:         for succ in self._succs.pop(node, ()):
    6:             self._preds[succ].remove(node)
    6:             del self._edge_data[node, succ]
   32:         for pred in self._preds.pop(node, ()):
    1:             self._succs[pred].remove(node)
    1:             del self._edge_data[pred, node]
       
    1:     def _dfs(self, entries=None):
  600:         if entries is None:
  600:             entries = (self._entry_point,)
  600:         seen = set()
  600:         stack = list(entries)
 3577:         while stack:
 2977:             node = stack.pop()
 2977:             if node not in seen:
 2434:                 yield node
 2434:                 seen.add(node)
 4811:                 for succ in self._succs[node]:
 2377:                     stack.append(succ)
       
    1:     def _eliminate_dead_blocks(self):
               """
               Eliminate all blocks not reachable from the entry point, and
               stash them into self._dead_nodes.
               """
  600:         live = set()
 3034:         for node in self._dfs():
 2434:             live.add(node)
  600:         self._dead_nodes = self._nodes - live
  600:         self._nodes = live
               # Remove all edges leading from dead nodes
  607:         for dead in self._dead_nodes:
    7:             self._remove_node_edges(dead)
       
    1:     def _find_exit_points(self):
               """
               Compute the graph's exit points.
               """
   24:         exit_points = set()
  124:         for n in self._nodes:
  100:             if not self._succs.get(n):
   38:                 exit_points.add(n)
   24:         return exit_points
       
    1:     def _find_postorder(self):
   24:         succs = self._succs
   24:         back_edges = self._back_edges
   24:         post_order = []
   24:         seen = set()
       
   24:         post_order = []
       
               # DFS
   24:         def dfs_rec(node):
  109:             if node not in seen:
   95:                 seen.add(node)
   95:                 stack.append((post_order.append, node))
  187:                 for dest in succs[node]:
   92:                     if (node, dest) not in back_edges:
   85:                         stack.append((dfs_rec, dest))
       
   24:         stack = [(dfs_rec, self._entry_point)]
  228:         while stack:
  204:             cb, data = stack.pop()
  204:             cb(data)
       
   24:         return post_order
       
    1:     def _find_immediate_dominators(self):
               # The algorithm implemented computes the immediate dominator
               # for each node in the CFG which is equivalent to build a dominator tree
               # Based on the implementation from NetworkX
               # library - nx.immediate_dominators
               # https://github.com/networkx/networkx/blob/858e7cb183541a78969fed0cbcd02346f5866c02/networkx/algorithms/dominance.py    # noqa: E501
               # References:
               #   Keith D. Cooper, Timothy J. Harvey, and Ken Kennedy
               #   A Simple, Fast Dominance Algorithm
               #   https://www.cs.rice.edu/~keith/EMBED/dom.pdf
   24:         def intersect(u, v):
   80:             while u != v:
   67:                 while idx[u] < idx[v]:
   22:                     u = idom[u]
   95:                 while idx[u] > idx[v]:
   50:                     v = idom[v]
   35:             return u
       
   24:         entry = self._entry_point
   24:         preds_table = self._preds
       
   24:         order = self._find_postorder()
  143:         idx = {e: i for i, e in enumerate(order)} # index of each node
   24:         idom = {entry : entry}
   24:         order.pop()
   24:         order.reverse()
       
   24:         changed = True
   56:         while changed:
   32:             changed = False
  174:             for u in order:
  284:                 new_idom = functools.reduce(intersect,
  645:                                             (v for v in preds_table[u]
  361:                                              if v in idom))
  142:                 if u not in idom or idom[u] != new_idom:
   71:                     idom[u] = new_idom
   71:                     changed = True
       
   24:         return idom
       
    1:     def _find_dominator_tree(self):
               idom = self._idom
               domtree = _DictOfContainers(set)
       
               for u, v in idom.items():
                   # v dominates u
                   if u not in domtree:
                       domtree[u] = set()
                   if u != v:
                       domtree[v].add(u)
       
               return domtree
       
    1:     def _find_dominance_frontier(self):
   24:         idom = self._idom
   24:         preds_table = self._preds
  143:         df = {u: set() for u in idom}
       
  119:         for u in idom:
   95:             if len(preds_table[u]) < 2:
   75:                 continue
   61:             for v in preds_table[u]:
   89:                 while v != idom[u]:
   48:                     df[v].add(u)
   48:                     v = idom[v]
       
   24:         return df
       
    1:     def _find_dominators_internal(self, post=False):
               # See theoretical description in
               # http://en.wikipedia.org/wiki/Dominator_%28graph_theory%29
               # The algorithm implemented here uses a todo-list as described
               # in http://pages.cs.wisc.edu/~fischer/cs701.f08/finding.loops.html
   48:         if post:
   24:             entries = set(self._exit_points)
   24:             preds_table = self._succs
   24:             succs_table = self._preds
               else:
   24:             entries = set([self._entry_point])
   24:             preds_table = self._preds
   24:             succs_table = self._succs
       
   48:         if not entries:
                   raise RuntimeError("no entry points: dominator algorithm "
                                      "cannot be seeded")
       
   48:         doms = {}
  134:         for e in entries:
   86:             doms[e] = set([e])
       
   48:         todo = []
  243:         for n in self._nodes:
  195:             if n not in entries:
  133:                 doms[n] = set(self._nodes)
  133:                 todo.append(n)
       
  373:         while todo:
  325:             n = todo.pop()
  325:             if n in entries:
                       continue
  325:             new_doms = set([n])
  325:             preds = preds_table[n]
  325:             if preds:
  650:                 new_doms |= functools.reduce(set.intersection,
 1155:                                              [doms[p] for p in preds])
  325:             if new_doms != doms[n]:
  166:                 assert len(new_doms) < len(doms[n])
  166:                 doms[n] = new_doms
  166:                 todo.extend(succs_table[n])
   48:         return doms
       
    1:     def _find_dominators(self):
   24:         return self._find_dominators_internal(post=False)
       
    1:     def _find_post_dominators(self):
               # To handle infinite loops correctly, we need to add a dummy
               # exit point, and link members of infinite loops to it.
   24:         dummy_exit = object()
   24:         self._exit_points.add(dummy_exit)
   31:         for loop in self._loops.values():
    7:             if not loop.exits:
                       for b in loop.body:
                           self._add_edge(b, dummy_exit)
   24:         pdoms = self._find_dominators_internal(post=True)
               # Fix the _post_doms table to make no reference to the dummy exit
   24:         del pdoms[dummy_exit]
  124:         for doms in pdoms.values():
  100:             doms.discard(dummy_exit)
   24:         self._remove_node_edges(dummy_exit)
   24:         self._exit_points.remove(dummy_exit)
   24:         return pdoms
       
           # Finding loops and back edges: see
           # http://pages.cs.wisc.edu/~fischer/cs701.f08/finding.loops.html
       
    1:     def _find_back_edges(self, stats=None):
               """
               Find back edges.  An edge (src, dest) is a back edge if and
               only if *dest* dominates *src*.
               """
               # Prepare stats to capture execution information
  312:         if stats is not None:
                   if not isinstance(stats, dict):
                       raise TypeError(f"*stats* must be a dict; got {type(stats)}")
                   stats.setdefault('iteration_count', 0)
       
               # Uses a simple DFS to find back-edges.
               # The new algorithm is faster than the the previous dominator based
               # algorithm.
  312:         back_edges = set()
               # stack: keeps track of the traversal path
  312:         stack = []
               # succs_state: keep track of unvisited successors of a node
  312:         succs_state = {}
  312:         entry_point = self.entry_point()
       
  312:         checked = set()
       
  312:         def push_state(node):
 1273:             stack.append(node)
 3792:             succs_state[node] = [dest for dest in self._succs[node]]
       
  312:         push_state(entry_point)
       
               # Keep track for iteration count for debugging
  312:         iter_ct = 0
 2831:         while stack:
 2519:             iter_ct += 1
 2519:             tos = stack[-1]
 2519:             tos_succs = succs_state[tos]
                   # Are there successors not checked?
 2519:             if tos_succs:
                       # Check the next successor
 1246:                 cur_node = tos_succs.pop()
                       # Is it in our traversal path?
 1246:                 if cur_node in stack:
                           # Yes, it's a backedge
   95:                     back_edges.add((tos, cur_node))
 1151:                 elif cur_node not in checked:
                           # Push
  961:                     push_state(cur_node)
                   else:
                       # Checked all successors. Pop
 1273:                 stack.pop()
 1273:                 checked.add(tos)
       
  312:         if stats is not None:
                   stats['iteration_count'] += iter_ct
  312:         return back_edges
       
    1:     def _find_topo_order(self):
   24:         succs = self._succs
   24:         back_edges = self._back_edges
   24:         post_order = []
   24:         seen = set()
       
   24:         def _dfs_rec(node):
  118:             if node not in seen:
  102:                 seen.add(node)
  203:                 for dest in succs[node]:
  101:                     if (node, dest) not in back_edges:
   94:                         _dfs_rec(dest)
  102:                 post_order.append(node)
       
   24:         _dfs_rec(self._entry_point)
   24:         post_order.reverse()
   24:         return post_order
       
    1:     def _find_descendents(self):
               descs = {}
               for node in reversed(self._topo_order):
                   descs[node] = node_descs = set()
                   for succ in self._succs[node]:
                       if (node, succ) not in self._back_edges:
                           node_descs.add(succ)
                           node_descs.update(descs[succ])
               return descs
       
    1:     def _find_loops(self):
               """
               Find the loops defined by the graph's back edges.
               """
  264:         bodies = {}
  345:         for src, dest in self._back_edges:
                   # The destination of the back edge is the loop header
   81:             header = dest
                   # Build up the loop body from the back edge's source node,
                   # up to the source header.
   81:             body = set([header])
   81:             queue = [src]
  627:             while queue:
  546:                 n = queue.pop()
  546:                 if n not in body:
  359:                     body.add(n)
  359:                     queue.extend(self._preds[n])
                   # There can be several back edges to a given loop header;
                   # if so, merge the resulting body fragments.
   81:             if header in bodies:
    4:                 bodies[header].update(body)
                   else:
   77:                 bodies[header] = body
       
               # Create a Loop object for each header.
  264:         loops = {}
  341:         for header, body in bodies.items():
   77:             entries = set()
   77:             exits = set()
  509:             for n in body:
  432:                 entries.update(self._preds[n] - body)
  432:                 exits.update(self._succs[n] - body)
   77:             loop = Loop(header=header, body=body, entries=entries, exits=exits)
   77:             loops[header] = loop
  264:         return loops
       
    1:     def _find_in_loops(self):
   24:         loops = self._loops
               # Compute the loops to which each node belongs.
  148:         in_loops = dict((n, []) for n in self._nodes)
               # Sort loops from longest to shortest
               # This ensures that outer loops will come before inner loops
   38:         for loop in sorted(loops.values(), key=lambda loop: len(loop.body)):
   43:             for n in loop.body:
   36:                 in_loops[n].append(loop.header)
   24:         return in_loops
       
    1:     def _dump_adj_lists(self, file):
               adj_lists = dict((src, sorted(list(dests)))
                                for src, dests in self._succs.items())
               import pprint
               pprint.pprint(adj_lists, stream=file)
       
    1:     def __eq__(self, other):
   24:         if not isinstance(other, CFGraph):
                   return NotImplemented
       
  144:         for x in ['_nodes', '_edge_data', '_entry_point', '_preds', '_succs']:
  120:             this = getattr(self, x, None)
  120:             that = getattr(other, x, None)
  120:             if this != that:
                       return False
   24:         return True
       
    1:     def __ne__(self, other):
   24:         return not self.__eq__(other)
       
       
    2: class ControlFlowAnalysis(object):
    1:     """
           Attributes
           ----------
           - bytecode
       
           - blocks
       
           - blockseq
       
           - doms: dict of set
               Dominators
       
           - backbone: set of block offsets
               The set of block that is common to all possible code path.
       
           """
    1:     def __init__(self, bytecode):
               self.bytecode = bytecode
               self.blocks = {}
               self.liveblocks = {}
               self.blockseq = []
               self.doms = None
               self.backbone = None
               # Internal temp states
               self._force_new_block = True
               self._curblock = None
               self._blockstack = []
               self._loops = []
               self._withs = []
       
    1:     def iterblocks(self):
               """
               Return all blocks in sequence of occurrence
               """
               for i in self.blockseq:
                   yield self.blocks[i]
       
    1:     def iterliveblocks(self):
               """
               Return all live blocks in sequence of occurrence
               """
               for i in self.blockseq:
                   if i in self.liveblocks:
                       yield self.blocks[i]
       
    1:     def incoming_blocks(self, block):
               """
               Yield (incoming block, number of stack pops) pairs for *block*.
               """
               for i, pops in block.incoming_jumps.items():
                   if i in self.liveblocks:
                       yield self.blocks[i], pops
       
    1:     def dump(self, file=None):
               self.graph.dump(file=None)
       
    1:     def run(self):
               for inst in self._iter_inst():
                   fname = "op_%s" % inst.opname
                   fn = getattr(self, fname, None)
                   if fn is not None:
                       fn(inst)
                   elif inst.is_jump:
                       # this catches e.g. try... except
                       l = Loc(self.bytecode.func_id.filename, inst.lineno)
                       if inst.opname in {"SETUP_FINALLY"}:
                           msg = "'try' block not supported until python3.7 or later"
                       else:
                           msg = "Use of unsupported opcode (%s) found" % inst.opname
                       raise UnsupportedError(msg, loc=l)
                   else:
                       # Non-jump instructions are ignored
                       pass  # intentionally
       
               # Close all blocks
               for cur, nxt in zip(self.blockseq, self.blockseq[1:]):
                   blk = self.blocks[cur]
                   if not blk.outgoing_jumps and not blk.terminating:
                       blk.outgoing_jumps[nxt] = 0
       
               graph = CFGraph()
               for b in self.blocks:
                   graph.add_node(b)
               for b in self.blocks.values():
                   for out, pops in b.outgoing_jumps.items():
                       graph.add_edge(b.offset, out, pops)
               graph.set_entry_point(min(self.blocks))
               graph.process()
               self.graph = graph
       
               # Fill incoming
               for b in self.blocks.values():
                   for out, pops in b.outgoing_jumps.items():
                       self.blocks[out].incoming_jumps[b.offset] = pops
       
               # Find liveblocks
               self.liveblocks = dict((i, self.blocks[i])
                                      for i in self.graph.nodes())
       
               for lastblk in reversed(self.blockseq):
                   if lastblk in self.liveblocks:
                       break
               else:
                   raise AssertionError("No live block that exits!?")
       
               # Find backbone
               backbone = self.graph.backbone()
               # Filter out in loop blocks (Assuming no other cyclic control blocks)
               # This is to unavoid variable defined in loops to be considered as
               # function scope.
               inloopblocks = set()
       
               for b in self.blocks.keys():
                   if self.graph.in_loops(b):
                       inloopblocks.add(b)
       
               self.backbone = backbone - inloopblocks
       
    1:     def jump(self, target, pops=0):
               """
               Register a jump (conditional or not) to *target* offset.
               *pops* is the number of stack pops implied by the jump (default 0).
               """
               self._curblock.outgoing_jumps[target] = pops
       
    1:     def _iter_inst(self):
               for inst in self.bytecode:
                   if self._use_new_block(inst):
                       self._guard_with_as(inst)
                       self._start_new_block(inst)
                   self._curblock.body.append(inst.offset)
                   yield inst
       
    1:     def _use_new_block(self, inst):
               if inst.offset in self.bytecode.labels:
                   res = True
               elif inst.opname in NEW_BLOCKERS:
                   res = True
               else:
                   res = self._force_new_block
       
               self._force_new_block = False
               return res
       
    1:     def _start_new_block(self, inst):
               self._curblock = CFBlock(inst.offset)
               self.blocks[inst.offset] = self._curblock
               self.blockseq.append(inst.offset)
       
    1:     def _guard_with_as(self, current_inst):
               """Checks if the next instruction after a SETUP_WITH is something other
               than a POP_TOP, if it is something else it'll be some sort of store
               which is not supported (this corresponds to `with CTXMGR as VAR(S)`)."""
               if current_inst.opname == "SETUP_WITH":
                   next_op = self.bytecode[current_inst.next].opname
                   if next_op != "POP_TOP":
                       msg = ("The 'with (context manager) as "
                              "(variable):' construct is not "
                              "supported.")
                       raise UnsupportedError(msg)
       
    1:     def op_SETUP_LOOP(self, inst):
               end = inst.get_jump_target()
               self._blockstack.append(end)
               self._loops.append((inst.offset, end))
               # TODO: Looplifting requires the loop entry be its own block.
               #       Forcing a new block here is the simplest solution for now.
               #       But, we should consider other less ad-hoc ways.
               self.jump(inst.next)
               self._force_new_block = True
       
    1:     def op_SETUP_WITH(self, inst):
               end = inst.get_jump_target()
               self._blockstack.append(end)
               self._withs.append((inst.offset, end))
               # TODO: WithLifting requires the loop entry be its own block.
               #       Forcing a new block here is the simplest solution for now.
               #       But, we should consider other less ad-hoc ways.
               self.jump(inst.next)
               self._force_new_block = True
       
    1:     def op_POP_BLOCK(self, inst):
               self._blockstack.pop()
       
    1:     def op_FOR_ITER(self, inst):
               self.jump(inst.get_jump_target())
               self.jump(inst.next)
               self._force_new_block = True
       
    1:     def _op_ABSOLUTE_JUMP_IF(self, inst):
               self.jump(inst.get_jump_target())
               self.jump(inst.next)
               self._force_new_block = True
       
    1:     op_POP_JUMP_IF_FALSE = _op_ABSOLUTE_JUMP_IF
    1:     op_POP_JUMP_IF_TRUE = _op_ABSOLUTE_JUMP_IF
    1:     op_JUMP_IF_FALSE = _op_ABSOLUTE_JUMP_IF
    1:     op_JUMP_IF_TRUE = _op_ABSOLUTE_JUMP_IF
       
    1:     op_POP_JUMP_FORWARD_IF_FALSE = _op_ABSOLUTE_JUMP_IF
    1:     op_POP_JUMP_BACKWARD_IF_FALSE = _op_ABSOLUTE_JUMP_IF
    1:     op_POP_JUMP_FORWARD_IF_TRUE = _op_ABSOLUTE_JUMP_IF
    1:     op_POP_JUMP_BACKWARD_IF_TRUE = _op_ABSOLUTE_JUMP_IF
       
    1:     def _op_ABSOLUTE_JUMP_OR_POP(self, inst):
               self.jump(inst.get_jump_target())
               self.jump(inst.next, pops=1)
               self._force_new_block = True
       
    1:     op_JUMP_IF_FALSE_OR_POP = _op_ABSOLUTE_JUMP_OR_POP
    1:     op_JUMP_IF_TRUE_OR_POP = _op_ABSOLUTE_JUMP_OR_POP
       
    1:     def op_JUMP_ABSOLUTE(self, inst):
               self.jump(inst.get_jump_target())
               self._force_new_block = True
       
    1:     def op_JUMP_FORWARD(self, inst):
               self.jump(inst.get_jump_target())
               self._force_new_block = True
       
    1:     op_JUMP_BACKWARD = op_JUMP_FORWARD
       
    1:     def op_RETURN_VALUE(self, inst):
               self._curblock.terminating = True
               self._force_new_block = True
       
    1:     if PYVERSION in ((3, 12), ):
               def op_RETURN_CONST(self, inst):
                   self._curblock.terminating = True
                   self._force_new_block = True
    1:     elif PYVERSION in ((3, 9), (3, 10), (3, 11)):
    1:         pass
           else:
               raise NotImplementedError(PYVERSION)
       
    1:     def op_RAISE_VARARGS(self, inst):
               self._curblock.terminating = True
               self._force_new_block = True
       
    1:     def op_BREAK_LOOP(self, inst):
               self.jump(self._blockstack[-1])
               self._force_new_block = True
