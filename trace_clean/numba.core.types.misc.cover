    1: from numba.core.types.abstract import Callable, Literal, Type, Hashable
    1: from numba.core.types.common import (Dummy, IterableType, Opaque,
                                            SimpleIteratorType)
    1: from numba.core.typeconv import Conversion
    1: from numba.core.errors import TypingError, LiteralTypingError
    1: from numba.core.ir import UndefinedType
    1: from numba.core.utils import get_hashable_key
       
       
    2: class PyObject(Dummy):
    1:     """
           A generic CPython object.
           """
       
    1:     def is_precise(self):
               return False
       
       
    2: class Phantom(Dummy):
    1:     """
           A type that cannot be materialized.  A Phantom cannot be used as
           argument or return type.
           """
       
       
    2: class Undefined(Dummy):
    1:     """
           A type that is left imprecise.  This is used as a temporaray placeholder
           during type inference in the hope that the type can be later refined.
           """
       
    1:     def is_precise(self):
               return False
       
       
    2: class UndefVar(Dummy):
    1:     """
           A type that is created by Expr.undef to represent an undefined variable.
           This type can be promoted to any other type.
           This is introduced to handle Python 3.12 LOAD_FAST_AND_CLEAR.
           """
       
    1:     def can_convert_to(self, typingctx, other):
               return Conversion.promote
       
       
    2: class RawPointer(Opaque):
    1:     """
           A raw pointer without any specific meaning.
           """
       
       
    2: class StringLiteral(Literal, Dummy):
       
    1:     def can_convert_to(self, typingctx, other):
               if isinstance(other, UnicodeType):
                   return Conversion.safe
       
       
    1: Literal.ctor_map[str] = StringLiteral
       
       
    1: def unliteral(lit_type):
           """
           Get base type from Literal type.
           """
 4952:     if hasattr(lit_type, '__unliteral__'):
  404:         return lit_type.__unliteral__()
 4548:     return getattr(lit_type, 'literal_type', lit_type)
       
       
    1: def literal(value):
           """Returns a Literal instance or raise LiteralTypingError
           """
  405:     ty = type(value)
  405:     if isinstance(value, Literal):
               msg = "the function does not accept a Literal type; got {} ({})"
               raise ValueError(msg.format(value, ty))
  405:     try:
  405:         ctor = Literal.ctor_map[ty]
  339:     except KeyError:
  339:         raise LiteralTypingError("{} cannot be used as a literal".format(ty))
           else:
   66:         return ctor(value)
       
       
    1: def maybe_literal(value):
           """Get a Literal type for the value or None.
           """
  189:     try:
  189:         return literal(value)
  131:     except LiteralTypingError:
  131:         return
       
       
    2: class Omitted(Opaque):
    1:     """
           An omitted function argument with a default value.
           """
       
    1:     def __init__(self, value):
  243:         self._value = value
               # Use helper function to support both hashable and non-hashable
               # values. See discussion in gh #6957.
  243:         self._value_key = get_hashable_key(value)
  243:         super(Omitted, self).__init__("omitted(default=%r)" % (value,))
       
    2:     @property
    2:     def key(self):
 1200:         return type(self._value), self._value_key
       
    2:     @property
    2:     def value(self):
   23:         return self._value
       
       
    2: class VarArg(Type):
    1:     """
           Special type representing a variable number of arguments at the
           end of a function's signature.  Only used for signature matching,
           not for actual values.
           """
       
    1:     def __init__(self, dtype):
  252:         self.dtype = dtype
  252:         super(VarArg, self).__init__("*%s" % dtype)
       
    2:     @property
    2:     def key(self):
  772:         return self.dtype
       
       
    2: class Module(Dummy):
    1:     def __init__(self, pymod):
   33:         self.pymod = pymod
   33:         super(Module, self).__init__("Module(%s)" % pymod)
       
    2:     @property
    2:     def key(self):
  557:         return self.pymod
       
       
    2: class MemInfoPointer(Type):
    1:     """
           Pointer to a Numba "meminfo" (i.e. the information for a managed
           piece of memory).
           """
    1:     mutable = True
       
    1:     def __init__(self, dtype):
   12:         self.dtype = dtype
   12:         name = "memory-managed *%s" % dtype
   12:         super(MemInfoPointer, self).__init__(name)
       
    2:     @property
    2:     def key(self):
  483:         return self.dtype
       
       
    2: class CPointer(Type):
    1:     """
           Type class for pointers to other types.
       
           Attributes
           ----------
               dtype : The pointee type
               addrspace : int
                   The address space pointee belongs to.
           """
    1:     mutable = True
       
    1:     def __init__(self, dtype, addrspace=None):
    8:         self.dtype = dtype
    8:         self.addrspace = addrspace
    8:         if addrspace is not None:
                   name = "%s_%s*" % (dtype, addrspace)
               else:
    8:             name = "%s*" % dtype
    8:         super(CPointer, self).__init__(name)
       
    2:     @property
    2:     def key(self):
  745:         return self.dtype, self.addrspace
       
       
    2: class EphemeralPointer(CPointer):
    1:     """
           Type class for pointers which aren't guaranteed to last long - e.g.
           stack-allocated slots.  The data model serializes such pointers
           by copying the data pointed to.
           """
       
       
    2: class EphemeralArray(Type):
    1:     """
           Similar to EphemeralPointer, but pointing to an array of elements,
           rather than a single one.  The array size must be known at compile-time.
           """
       
    1:     def __init__(self, dtype, count):
               self.dtype = dtype
               self.count = count
               name = "*%s[%d]" % (dtype, count)
               super(EphemeralArray, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.dtype, self.count
       
       
    2: class Object(Type):
           # XXX unused?
    1:     mutable = True
       
    1:     def __init__(self, clsobj):
               self.cls = clsobj
               name = "Object(%s)" % clsobj.__name__
               super(Object, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.cls
       
       
    2: class Optional(Type):
    1:     """
           Type class for optional types, i.e. union { some type, None }
           """
       
    1:     def __init__(self, typ):
               assert not isinstance(typ, (Optional, NoneType))
               typ = unliteral(typ)
               self.type = typ
               name = "OptionalType(%s)" % self.type
               super(Optional, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.type
       
    1:     def can_convert_to(self, typingctx, other):
               if isinstance(other, Optional):
                   return typingctx.can_convert(self.type, other.type)
               else:
                   conv = typingctx.can_convert(self.type, other)
                   if conv is not None:
                       return max(conv, Conversion.safe)
       
    1:     def can_convert_from(self, typingctx, other):
               if isinstance(other, NoneType):
                   return Conversion.promote
               elif isinstance(other, Optional):
                   return typingctx.can_convert(other.type, self.type)
               else:
                   conv = typingctx.can_convert(other, self.type)
                   if conv is not None:
                       return max(conv, Conversion.promote)
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, Optional):
                   unified = typingctx.unify_pairs(self.type, other.type)
               else:
                   unified = typingctx.unify_pairs(self.type, other)
       
               if unified is not None:
                   if isinstance(unified, Optional):
                       return unified
                   else:
                       return Optional(unified)
       
       
    2: class NoneType(Opaque):
    1:     """
           The type for None.
           """
       
    1:     def unify(self, typingctx, other):
               """
               Turn anything to a Optional type;
               """
               if isinstance(other, (Optional, NoneType)):
                   return other
               return Optional(other)
       
       
    2: class EllipsisType(Opaque):
    1:     """
           The type for the Ellipsis singleton.
           """
       
       
    2: class ExceptionClass(Callable, Phantom):
    1:     """
           The type of exception classes (not instances).
           """
       
    1:     def __init__(self, exc_class):
    1:         assert issubclass(exc_class, BaseException)
    1:         name = "%s" % (exc_class.__name__)
    1:         self.exc_class = exc_class
    1:         super(ExceptionClass, self).__init__(name)
       
    1:     def get_call_type(self, context, args, kws):
               return self.get_call_signatures()[0][0]
       
    1:     def get_call_signatures(self):
               from numba.core import typing
               return_type = ExceptionInstance(self.exc_class)
               return [typing.signature(return_type)], False
       
    1:     def get_impl_key(self, sig):
               return type(self)
       
    2:     @property
    2:     def key(self):
    8:         return self.exc_class
       
       
    2: class ExceptionInstance(Phantom):
    1:     """
           The type of exception instances.  *exc_class* should be the
           exception class.
           """
       
    1:     def __init__(self, exc_class):
               assert issubclass(exc_class, BaseException)
               name = "%s(...)" % (exc_class.__name__,)
               self.exc_class = exc_class
               super(ExceptionInstance, self).__init__(name)
       
    2:     @property
    2:     def key(self):
               return self.exc_class
       
       
    2: class SliceType(Type):
       
    1:     def __init__(self, name, members):
    2:         assert members in (2, 3)
    2:         self.members = members
    2:         self.has_step = members >= 3
    2:         super(SliceType, self).__init__(name)
       
    2:     @property
    2:     def key(self):
  780:         return self.members
       
       
    2: class SliceLiteral(Literal, SliceType):
    1:     def __init__(self, value):
               self._literal_init(value)
               name = 'Literal[slice]({})'.format(value)
               members = 2 if value.step is None else 3
               SliceType.__init__(self, name=name, members=members)
       
    2:     @property
    2:     def key(self):
               sl = self.literal_value
               return sl.start, sl.stop, sl.step
       
       
    1: Literal.ctor_map[slice] = SliceLiteral
       
       
    2: class ClassInstanceType(Type):
    1:     """
           The type of a jitted class *instance*.  It will be the return-type
           of the constructor of the class.
           """
    1:     mutable = True
    1:     name_prefix = "instance"
       
    1:     def __init__(self, class_type):
               self.class_type = class_type
               name = "{0}.{1}".format(self.name_prefix, self.class_type.name)
               super(ClassInstanceType, self).__init__(name)
       
    1:     def get_data_type(self):
               return ClassDataType(self)
       
    1:     def get_reference_type(self):
               return self
       
    2:     @property
    2:     def key(self):
               return self.class_type.key
       
    2:     @property
    2:     def classname(self):
               return self.class_type.class_name
       
    2:     @property
    2:     def jit_props(self):
               return self.class_type.jit_props
       
    2:     @property
    2:     def jit_static_methods(self):
               return self.class_type.jit_static_methods
       
    2:     @property
    2:     def jit_methods(self):
               return self.class_type.jit_methods
       
    2:     @property
    2:     def struct(self):
               return self.class_type.struct
       
    2:     @property
    2:     def methods(self):
               return self.class_type.methods
       
    2:     @property
    2:     def static_methods(self):
               return self.class_type.static_methods
       
       
    2: class ClassType(Callable, Opaque):
    1:     """
           The type of the jitted class (not instance).  When the type of a class
           is called, its constructor is invoked.
           """
    1:     mutable = True
    1:     name_prefix = "jitclass"
    1:     instance_type_class = ClassInstanceType
       
    1:     def __init__(self, class_def, ctor_template_cls, struct, jit_methods,
                        jit_props, jit_static_methods):
               self.class_name = class_def.__name__
               self.class_doc = class_def.__doc__
               self._ctor_template_class = ctor_template_cls
               self.jit_methods = jit_methods
               self.jit_props = jit_props
               self.jit_static_methods = jit_static_methods
               self.struct = struct
               fielddesc = ','.join("{0}:{1}".format(k, v) for k, v in struct.items())
               name = "{0}.{1}#{2:x}<{3}>".format(self.name_prefix, self.class_name,
                                                  id(self), fielddesc)
               super(ClassType, self).__init__(name)
       
    1:     def get_call_type(self, context, args, kws):
               return self.ctor_template(context).apply(args, kws)
       
    1:     def get_call_signatures(self):
               return (), True
       
    1:     def get_impl_key(self, sig):
               return type(self)
       
    2:     @property
    2:     def methods(self):
               return {k: v.py_func for k, v in self.jit_methods.items()}
       
    2:     @property
    2:     def static_methods(self):
               return {k: v.py_func for k, v in self.jit_static_methods.items()}
       
    2:     @property
    2:     def instance_type(self):
               return ClassInstanceType(self)
       
    2:     @property
    2:     def ctor_template(self):
               return self._specialize_template(self._ctor_template_class)
       
    1:     def _specialize_template(self, basecls):
               return type(basecls.__name__, (basecls,), dict(key=self))
       
       
    2: class DeferredType(Type):
    1:     """
           Represents a type that will be defined later.  It must be defined
           before it is materialized (used in the compiler).  Once defined, it
           behaves exactly as the type it is defining.
           """
       
    1:     def __init__(self):
               self._define = None
               name = "{0}#{1}".format(type(self).__name__, id(self))
               super(DeferredType, self).__init__(name)
       
    1:     def get(self):
               if self._define is None:
                   raise RuntimeError("deferred type not defined")
               return self._define
       
    1:     def define(self, typ):
               if self._define is not None:
                   raise TypeError("deferred type already defined")
               if not isinstance(typ, Type):
                   raise TypeError("arg is not a Type; got: {0}".format(type(typ)))
               self._define = typ
       
    1:     def unify(self, typingctx, other):
               return typingctx.unify_pairs(self.get(), other)
       
       
    2: class ClassDataType(Type):
    1:     """
           Internal only.
           Represents the data of the instance.  The representation of
           ClassInstanceType contains a pointer to a ClassDataType which represents
           a C structure that contains all the data fields of the class instance.
           """
       
    1:     def __init__(self, classtyp):
               self.class_type = classtyp
               name = "data.{0}".format(self.class_type.name)
               super(ClassDataType, self).__init__(name)
       
       
    2: class ContextManager(Callable, Phantom):
    1:     """
           An overly-simple ContextManager type that cannot be materialized.
           """
       
    1:     def __init__(self, cm):
               self.cm = cm
               super(ContextManager, self).__init__("ContextManager({})".format(cm))
       
    1:     def get_call_signatures(self):
               if not self.cm.is_callable:
                   msg = "contextmanager {} is not callable".format(self.cm)
                   raise TypingError(msg)
       
               return (), False
       
    1:     def get_call_type(self, context, args, kws):
               from numba.core import typing
       
               if not self.cm.is_callable:
                   msg = "contextmanager {} is not callable".format(self.cm)
                   raise TypingError(msg)
       
               posargs = list(args) + [v for k, v in sorted(kws.items())]
               return typing.signature(self, *posargs)
       
    1:     def get_impl_key(self, sig):
               return type(self)
       
       
    2: class UnicodeType(IterableType, Hashable):
       
    1:     def __init__(self, name):
    1:         super(UnicodeType, self).__init__(name)
       
    2:     @property
    2:     def iterator_type(self):
               return UnicodeIteratorType(self)
       
       
    2: class UnicodeIteratorType(SimpleIteratorType):
       
    1:     def __init__(self, dtype):
               name = "iter_unicode"
               self.data = dtype
               super(UnicodeIteratorType, self).__init__(name, dtype)
