    1: import abc
    1: import io
    1: import os
    1: from typing import Any, BinaryIO, Iterable, Iterator, NoReturn, Text, Optional
    1: from typing import runtime_checkable, Protocol
    1: from typing import Union
       
       
    1: StrPath = Union[str, os.PathLike[str]]
       
    1: __all__ = ["ResourceReader", "Traversable", "TraversableResources"]
       
       
    2: class ResourceReader(metaclass=abc.ABCMeta):
    1:     """Abstract base class for loaders to provide resource reading support."""
       
    2:     @abc.abstractmethod
    2:     def open_resource(self, resource: Text) -> BinaryIO:
               """Return an opened, file-like object for binary reading.
       
               The 'resource' argument is expected to represent only a file name.
               If the resource cannot be found, FileNotFoundError is raised.
               """
               # This deliberately raises FileNotFoundError instead of
               # NotImplementedError so that if this method is accidentally called,
               # it'll still do the right thing.
               raise FileNotFoundError
       
    2:     @abc.abstractmethod
    2:     def resource_path(self, resource: Text) -> Text:
               """Return the file system path to the specified resource.
       
               The 'resource' argument is expected to represent only a file name.
               If the resource does not exist on the file system, raise
               FileNotFoundError.
               """
               # This deliberately raises FileNotFoundError instead of
               # NotImplementedError so that if this method is accidentally called,
               # it'll still do the right thing.
               raise FileNotFoundError
       
    2:     @abc.abstractmethod
    2:     def is_resource(self, path: Text) -> bool:
               """Return True if the named 'path' is a resource.
       
               Files are resources, directories are not.
               """
               raise FileNotFoundError
       
    2:     @abc.abstractmethod
    2:     def contents(self) -> Iterable[str]:
               """Return an iterable of entries in `package`."""
               raise FileNotFoundError
       
       
    3: @runtime_checkable
    2: class Traversable(Protocol):
    1:     """
           An object with a subset of pathlib.Path methods suitable for
           traversing directories and opening files.
       
           Any exceptions that occur when accessing the backing resource
           may propagate unaltered.
           """
       
    2:     @abc.abstractmethod
    2:     def iterdir(self) -> Iterator["Traversable"]:
               """
               Yield Traversable objects in self
               """
       
    1:     def read_bytes(self) -> bytes:
               """
               Read contents of self as bytes
               """
               with self.open('rb') as strm:
                   return strm.read()
       
    1:     def read_text(self, encoding: Optional[str] = None) -> str:
               """
               Read contents of self as text
               """
               with self.open(encoding=encoding) as strm:
                   return strm.read()
       
    2:     @abc.abstractmethod
    2:     def is_dir(self) -> bool:
               """
               Return True if self is a directory
               """
       
    2:     @abc.abstractmethod
    2:     def is_file(self) -> bool:
               """
               Return True if self is a file
               """
       
    2:     @abc.abstractmethod
    2:     def joinpath(self, *descendants: StrPath) -> "Traversable":
               """
               Return Traversable resolved with any descendants applied.
       
               Each descendant should be a path segment relative to self
               and each may contain multiple levels separated by
               ``posixpath.sep`` (``/``).
               """
       
    1:     def __truediv__(self, child: StrPath) -> "Traversable":
               """
               Return Traversable child in self
               """
               return self.joinpath(child)
       
    2:     @abc.abstractmethod
    2:     def open(self, mode='r', *args, **kwargs):
               """
               mode may be 'r' or 'rb' to open as text or binary. Return a handle
               suitable for reading (same as pathlib.Path.open).
       
               When opening as text, accepts encoding parameters such as those
               accepted by io.TextIOWrapper.
               """
       
    2:     @abc.abstractproperty
    2:     def name(self) -> str:
               """
               The base name of this object without any parent references.
               """
       
       
    2: class TraversableResources(ResourceReader):
    1:     """
           The required interface for providing traversable
           resources.
           """
       
    2:     @abc.abstractmethod
    2:     def files(self) -> "Traversable":
               """Return a Traversable object for the loaded package."""
       
    1:     def open_resource(self, resource: StrPath) -> io.BufferedReader:
               return self.files().joinpath(resource).open('rb')
       
    1:     def resource_path(self, resource: Any) -> NoReturn:
               raise FileNotFoundError(resource)
       
    1:     def is_resource(self, path: StrPath) -> bool:
               return self.files().joinpath(path).is_file()
       
    1:     def contents(self) -> Iterator[str]:
               return (item.name for item in self.files().iterdir())
