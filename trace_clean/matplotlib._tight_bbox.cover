    1: """
       Helper module for the *bbox_inches* parameter in `.Figure.savefig`.
       """
       
    1: from matplotlib.transforms import Bbox, TransformedBbox, Affine2D
       
       
    1: def adjust_bbox(fig, bbox_inches, fixed_dpi=None):
           """
           Temporarily adjust the figure so that only the specified area
           (bbox_inches) is saved.
       
           It modifies fig.bbox, fig.bbox_inches,
           fig.transFigure._boxout, and fig.patch.  While the figure size
           changes, the scale of the original figure is conserved.  A
           function which restores the original values are returned.
           """
    4:     origBbox = fig.bbox
    4:     origBboxInches = fig.bbox_inches
    4:     _boxout = fig.transFigure._boxout
       
    4:     old_aspect = []
    4:     locator_list = []
    4:     sentinel = object()
   31:     for ax in fig.axes:
   27:         locator = ax.get_axes_locator()
   27:         if locator is not None:
                   ax.apply_aspect(locator(ax, None))
   27:         locator_list.append(locator)
   27:         current_pos = ax.get_position(original=False).frozen()
   81:         ax.set_axes_locator(lambda a, r, _pos=current_pos: _pos)
               # override the method that enforces the aspect ratio on the Axes
   27:         if 'apply_aspect' in ax.__dict__:
                   old_aspect.append(ax.apply_aspect)
               else:
   27:             old_aspect.append(sentinel)
   81:         ax.apply_aspect = lambda pos=None: None
       
    4:     def restore_bbox():
   31:         for ax, loc, aspect in zip(fig.axes, locator_list, old_aspect):
   27:             ax.set_axes_locator(loc)
   27:             if aspect is sentinel:
                       # delete our no-op function which un-hides the original method
   27:                 del ax.apply_aspect
                   else:
                       ax.apply_aspect = aspect
       
    4:         fig.bbox = origBbox
    4:         fig.bbox_inches = origBboxInches
    4:         fig.transFigure._boxout = _boxout
    4:         fig.transFigure.invalidate()
    4:         fig.patch.set_bounds(0, 0, 1, 1)
       
    4:     if fixed_dpi is None:
    4:         fixed_dpi = fig.dpi
    4:     tr = Affine2D().scale(fixed_dpi)
    4:     dpi_scale = fixed_dpi / fig.dpi
       
    4:     fig.bbox_inches = Bbox.from_bounds(0, 0, *bbox_inches.size)
    4:     x0, y0 = tr.transform(bbox_inches.p0)
    4:     w1, h1 = fig.bbox.size * dpi_scale
    4:     fig.transFigure._boxout = Bbox.from_bounds(-x0, -y0, w1, h1)
    4:     fig.transFigure.invalidate()
       
    4:     fig.bbox = TransformedBbox(fig.bbox_inches, tr)
       
    8:     fig.patch.set_bounds(x0 / w1, y0 / h1,
    4:                          fig.bbox.width / w1, fig.bbox.height / h1)
       
    4:     return restore_bbox
       
       
    1: def process_figure_for_rasterizing(fig, bbox_inches_restore, fixed_dpi=None):
           """
           A function that needs to be called when figure dpi changes during the
           drawing (e.g., rasterizing).  It recovers the bbox and re-adjust it with
           the new dpi.
           """
       
           bbox_inches, restore_bbox = bbox_inches_restore
           restore_bbox()
           r = adjust_bbox(fig, bbox_inches, fixed_dpi)
       
           return bbox_inches, r
