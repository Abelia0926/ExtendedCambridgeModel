    1: """
       Array methods which are called by both the C-code for the method
       and the Python code for the NumPy-namespace function
       
       """
    1: import warnings
    1: from contextlib import nullcontext
       
    1: from numpy.core import multiarray as mu
    1: from numpy.core import umath as um
    1: from numpy.core.multiarray import asanyarray
    1: from numpy.core import numerictypes as nt
    1: from numpy.core import _exceptions
    1: from numpy.core._ufunc_config import _no_nep50_warning
    1: from numpy._globals import _NoValue
    1: from numpy.compat import pickle, os_fspath
       
       # save those O(100) nanoseconds!
    1: umr_maximum = um.maximum.reduce
    1: umr_minimum = um.minimum.reduce
    1: umr_sum = um.add.reduce
    1: umr_prod = um.multiply.reduce
    1: umr_any = um.logical_or.reduce
    1: umr_all = um.logical_and.reduce
       
       # Complex types to -> (2,)float view for fast-path computation in _var()
    1: _complex_to_float = {
    1:     nt.dtype(nt.csingle) : nt.dtype(nt.single),
    1:     nt.dtype(nt.cdouble) : nt.dtype(nt.double),
       }
       # Special case for windows: ensure double takes precedence
    1: if nt.dtype(nt.longdouble) != nt.dtype(nt.double):
           _complex_to_float.update({
               nt.dtype(nt.clongdouble) : nt.dtype(nt.longdouble),
           })
       
       # avoid keyword arguments to speed up parsing, saves about 15%-20% for very
       # small reductions
    2: def _amax(a, axis=None, out=None, keepdims=False,
    1:           initial=_NoValue, where=True):
13824:     return umr_maximum(a, axis, None, out, keepdims, initial, where)
       
    2: def _amin(a, axis=None, out=None, keepdims=False,
    1:           initial=_NoValue, where=True):
 8798:     return umr_minimum(a, axis, None, out, keepdims, initial, where)
       
    2: def _sum(a, axis=None, dtype=None, out=None, keepdims=False,
    1:          initial=_NoValue, where=True):
 3542:     return umr_sum(a, axis, dtype, out, keepdims, initial, where)
       
    2: def _prod(a, axis=None, dtype=None, out=None, keepdims=False,
    1:           initial=_NoValue, where=True):
           return umr_prod(a, axis, dtype, out, keepdims, initial, where)
       
    1: def _any(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
           # Parsing keyword arguments is currently fairly slow, so avoid it for now
 1569:     if where is True:
 1569:         return umr_any(a, axis, dtype, out, keepdims)
           return umr_any(a, axis, dtype, out, keepdims, where=where)
       
    1: def _all(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
           # Parsing keyword arguments is currently fairly slow, so avoid it for now
 6344:     if where is True:
 6344:         return umr_all(a, axis, dtype, out, keepdims)
           return umr_all(a, axis, dtype, out, keepdims, where=where)
       
    1: def _count_reduce_items(arr, axis, keepdims=False, where=True):
           # fast-path for the default case
   46:     if where is True:
               # no boolean mask given, calculate items according to axis
   46:         if axis is None:
    2:             axis = tuple(range(arr.ndim))
   44:         elif not isinstance(axis, tuple):
   44:             axis = (axis,)
   46:         items = 1
   94:         for ax in axis:
   48:             items *= arr.shape[mu.normalize_axis_index(ax, arr.ndim)]
   46:         items = nt.intp(items)
           else:
               # TODO: Optimize case when `where` is broadcast along a non-reduction
               # axis and full sum is more excessive than needed.
       
               # guarded to protect circular imports
               from numpy.lib.stride_tricks import broadcast_to
               # count True values in (potentially broadcasted) boolean mask
               items = umr_sum(broadcast_to(where, arr.shape), axis, nt.intp, None,
                               keepdims)
   46:     return items
       
    1: def _clip(a, min=None, max=None, out=None, **kwargs):
 2880:     if min is None and max is None:
               raise ValueError("One of max or min must be given")
       
 2880:     if min is None:
               return um.minimum(a, max, out=out, **kwargs)
 2880:     elif max is None:
               return um.maximum(a, min, out=out, **kwargs)
           else:
 2880:         return um.clip(a, min, max, out=out, **kwargs)
       
    1: def _mean(a, axis=None, dtype=None, out=None, keepdims=False, *, where=True):
   24:     arr = asanyarray(a)
       
   24:     is_float16_result = False
       
   24:     rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)
   24:     if rcount == 0 if where is True else umr_any(rcount == 0, axis=None):
               warnings.warn("Mean of empty slice.", RuntimeWarning, stacklevel=2)
       
           # Cast bool, unsigned int, and int to float64 by default
   24:     if dtype is None:
   24:         if issubclass(arr.dtype.type, (nt.integer, nt.bool_)):
                   dtype = mu.dtype('f8')
   24:         elif issubclass(arr.dtype.type, nt.float16):
                   dtype = mu.dtype('f4')
                   is_float16_result = True
       
   24:     ret = umr_sum(arr, axis, dtype, out, keepdims, where=where)
   24:     if isinstance(ret, mu.ndarray):
   44:         with _no_nep50_warning():
   44:             ret = um.true_divide(
   22:                     ret, rcount, out=ret, casting='unsafe', subok=False)
   22:         if is_float16_result and out is None:
                   ret = arr.dtype.type(ret)
    2:     elif hasattr(ret, 'dtype'):
    2:         if is_float16_result:
                   ret = arr.dtype.type(ret / rcount)
               else:
    2:             ret = ret.dtype.type(ret / rcount)
           else:
               ret = ret / rcount
       
   24:     return ret
       
    2: def _var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *,
    1:          where=True):
   22:     arr = asanyarray(a)
       
   22:     rcount = _count_reduce_items(arr, axis, keepdims=keepdims, where=where)
           # Make this warning show up on top.
   22:     if ddof >= rcount if where is True else umr_any(ddof >= rcount, axis=None):
               warnings.warn("Degrees of freedom <= 0 for slice", RuntimeWarning,
                             stacklevel=2)
       
           # Cast bool, unsigned int, and int to float64 by default
   22:     if dtype is None and issubclass(arr.dtype.type, (nt.integer, nt.bool_)):
               dtype = mu.dtype('f8')
       
           # Compute the mean.
           # Note that if dtype is not of inexact type then arraymean will
           # not be either.
   22:     arrmean = umr_sum(arr, axis, dtype, keepdims=True, where=where)
           # The shape of rcount has to match arrmean to not change the shape of out
           # in broadcasting. Otherwise, it cannot be stored back to arrmean.
   22:     if rcount.ndim == 0:
               # fast-path for default case when where is True
   22:         div = rcount
           else:
               # matching rcount to arrmean when where is specified as array
               div = rcount.reshape(arrmean.shape)
   22:     if isinstance(arrmean, mu.ndarray):
   44:         with _no_nep50_warning():
   44:             arrmean = um.true_divide(arrmean, div, out=arrmean,
   22:                                      casting='unsafe', subok=False)
           elif hasattr(arrmean, "dtype"):
               arrmean = arrmean.dtype.type(arrmean / rcount)
           else:
               arrmean = arrmean / rcount
       
           # Compute sum of squared deviations from mean
           # Note that x may not be inexact and that we need it to be an array,
           # not a scalar.
   22:     x = asanyarray(arr - arrmean)
       
   22:     if issubclass(arr.dtype.type, (nt.floating, nt.integer)):
   22:         x = um.multiply(x, x, out=x)
           # Fast-paths for built-in complex types
           elif x.dtype in _complex_to_float:
               xv = x.view(dtype=(_complex_to_float[x.dtype], (2,)))
               um.multiply(xv, xv, out=xv)
               x = um.add(xv[..., 0], xv[..., 1], out=x.real).real
           # Most general case; includes handling object arrays containing imaginary
           # numbers and complex types with non-native byteorder
           else:
               x = um.multiply(x, um.conjugate(x), out=x).real
       
   22:     ret = umr_sum(x, axis, dtype, out, keepdims=keepdims, where=where)
       
           # Compute degrees of freedom and make sure it is not negative.
   22:     rcount = um.maximum(rcount - ddof, 0)
       
           # divide by degrees of freedom
   22:     if isinstance(ret, mu.ndarray):
   44:         with _no_nep50_warning():
   44:             ret = um.true_divide(
   22:                     ret, rcount, out=ret, casting='unsafe', subok=False)
           elif hasattr(ret, 'dtype'):
               ret = ret.dtype.type(ret / rcount)
           else:
               ret = ret / rcount
       
   22:     return ret
       
    2: def _std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False, *,
    1:          where=True):
   44:     ret = _var(a, axis=axis, dtype=dtype, out=out, ddof=ddof,
   22:                keepdims=keepdims, where=where)
       
   22:     if isinstance(ret, mu.ndarray):
   22:         ret = um.sqrt(ret, out=ret)
           elif hasattr(ret, 'dtype'):
               ret = ret.dtype.type(um.sqrt(ret))
           else:
               ret = um.sqrt(ret)
       
   22:     return ret
       
    1: def _ptp(a, axis=None, out=None, keepdims=False):
 2880:     return um.subtract(
 1440:         umr_maximum(a, axis, None, out, keepdims),
 1440:         umr_minimum(a, axis, None, None, keepdims),
 1440:         out
           )
       
    1: def _dump(self, file, protocol=2):
           if hasattr(file, 'write'):
               ctx = nullcontext(file)
           else:
               ctx = open(os_fspath(file), "wb")
           with ctx as f:
               pickle.dump(self, f, protocol=protocol)
       
    1: def _dumps(self, protocol=2):
           return pickle.dumps(self, protocol=protocol)
