       """Filename matching with shell patterns.
       
       fnmatch(FILENAME, PATTERN) matches according to the local convention.
       fnmatchcase(FILENAME, PATTERN) always takes case in account.
       
       The functions operate by translating the pattern into a regular
       expression.  They cache the compiled regular expressions for speed.
       
       The function translate(PATTERN) returns a regular expression
       corresponding to PATTERN.  (It does not compile it.)
       """
       import os
       import posixpath
       import re
       import functools
       
       __all__ = ["filter", "fnmatch", "fnmatchcase", "translate"]
       
       def fnmatch(name, pat):
           """Test whether FILENAME matches PATTERN.
       
           Patterns are Unix shell style:
       
           *       matches everything
           ?       matches any single character
           [seq]   matches any character in seq
           [!seq]  matches any char not in seq
       
           An initial period in FILENAME is not special.
           Both FILENAME and PATTERN are first case-normalized
           if the operating system requires it.
           If you don't want this, use fnmatchcase(FILENAME, PATTERN).
           """
           name = os.path.normcase(name)
           pat = os.path.normcase(pat)
           return fnmatchcase(name, pat)
       
       @functools.lru_cache(maxsize=32768, typed=True)
       def _compile_pattern(pat):
    1:     if isinstance(pat, bytes):
               pat_str = str(pat, 'ISO-8859-1')
               res_str = translate(pat_str)
               res = bytes(res_str, 'ISO-8859-1')
           else:
    1:         res = translate(pat)
    1:     return re.compile(res).match
       
       def filter(names, pat):
           """Construct a list from those elements of the iterable NAMES that match PAT."""
    6:     result = []
    6:     pat = os.path.normcase(pat)
    6:     match = _compile_pattern(pat)
    6:     if os.path is posixpath:
               # normcase on posix is NOP. Optimize it away from the loop.
   23:         for name in names:
   17:             if match(name):
   17:                 result.append(name)
           else:
               for name in names:
                   if match(os.path.normcase(name)):
                       result.append(name)
    6:     return result
       
       def fnmatchcase(name, pat):
           """Test whether FILENAME matches PATTERN, including case.
       
           This is a version of fnmatch() which doesn't case-normalize
           its arguments.
           """
           match = _compile_pattern(pat)
           return match(name) is not None
       
       
       def translate(pat):
           """Translate a shell PATTERN to a regular expression.
       
           There is no way to quote meta-characters.
           """
       
    2:     STAR = object()
    2:     res = []
    2:     add = res.append
    2:     i, n = 0, len(pat)
   13:     while i < n:
   11:         c = pat[i]
   11:         i = i+1
   11:         if c == '*':
                   # compress consecutive `*` into one
    2:             if (not res) or res[-1] is not STAR:
    2:                 add(STAR)
    9:         elif c == '?':
                   add('.')
    9:         elif c == '[':
                   j = i
                   if j < n and pat[j] == '!':
                       j = j+1
                   if j < n and pat[j] == ']':
                       j = j+1
                   while j < n and pat[j] != ']':
                       j = j+1
                   if j >= n:
                       add('\\[')
                   else:
                       stuff = pat[i:j]
                       if '-' not in stuff:
                           stuff = stuff.replace('\\', r'\\')
                       else:
                           chunks = []
                           k = i+2 if pat[i] == '!' else i+1
                           while True:
                               k = pat.find('-', k, j)
                               if k < 0:
                                   break
                               chunks.append(pat[i:k])
                               i = k+1
                               k = k+3
                           chunk = pat[i:j]
                           if chunk:
                               chunks.append(chunk)
                           else:
                               chunks[-1] += '-'
                           # Remove empty ranges -- invalid in RE.
                           for k in range(len(chunks)-1, 0, -1):
                               if chunks[k-1][-1] > chunks[k][0]:
                                   chunks[k-1] = chunks[k-1][:-1] + chunks[k][1:]
                                   del chunks[k]
                           # Escape backslashes and hyphens for set difference (--).
                           # Hyphens that create ranges shouldn't be escaped.
                           stuff = '-'.join(s.replace('\\', r'\\').replace('-', r'\-')
                                            for s in chunks)
                       # Escape set operations (&&, ~~ and ||).
                       stuff = re.sub(r'([&~|])', r'\\\1', stuff)
                       i = j+1
                       if not stuff:
                           # Empty range: never match.
                           add('(?!)')
                       elif stuff == '!':
                           # Negated empty range: match any character.
                           add('.')
                       else:
                           if stuff[0] == '!':
                               stuff = '^' + stuff[1:]
                           elif stuff[0] in ('^', '['):
                               stuff = '\\' + stuff
                           add(f'[{stuff}]')
               else:
    9:             add(re.escape(c))
    2:     assert i == n
       
           # Deal with STARs.
    2:     inp = res
    2:     res = []
    2:     add = res.append
    2:     i, n = 0, len(inp)
           # Fixed pieces at the start?
    2:     while i < n and inp[i] is not STAR:
               add(inp[i])
               i += 1
           # Now deal with STAR fixed STAR fixed ...
           # For an interior `STAR fixed` pairing, we want to do a minimal
           # .*? match followed by `fixed`, with no possibility of backtracking.
           # Atomic groups ("(?>...)") allow us to spell that directly.
           # Note: people rely on the undocumented ability to join multiple
           # translate() results together via "|" to build large regexps matching
           # "one of many" shell patterns.
    3:     while i < n:
    2:         assert inp[i] is STAR
    2:         i += 1
    2:         if i == n:
    1:             add(".*")
    1:             break
    1:         assert inp[i] is not STAR
    1:         fixed = []
   10:         while i < n and inp[i] is not STAR:
    9:             fixed.append(inp[i])
    9:             i += 1
    1:         fixed = "".join(fixed)
    1:         if i == n:
    1:             add(".*")
    1:             add(fixed)
               else:
                   add(f"(?>.*?{fixed})")
    2:     assert i == n
    2:     res = "".join(res)
    2:     return fr'(?s:{res})\Z'
