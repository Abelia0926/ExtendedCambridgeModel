    1: """
       LLVM pass that converts intrinsic into other math calls
       """
       
    1: from llvmlite import ir
       
       
    2: class _DivmodFixer(ir.Visitor):
    1:     def visit_Instruction(self, instr):
               if instr.type == ir.IntType(64):
                   if instr.opname in ['srem', 'urem', 'sdiv', 'udiv']:
                       name = 'numba_{op}'.format(op=instr.opname)
                       fn = self.module.globals.get(name)
                       # Declare the function if it doesn't already exist
                       if fn is None:
                           opty = instr.type
                           sdivfnty = ir.FunctionType(opty, [opty, opty])
                           fn = ir.Function(self.module, sdivfnty, name=name)
                       # Replace the operation with a call to the builtin
                       repl = ir.CallInstr(parent=instr.parent, func=fn,
                                           args=instr.operands, name=instr.name)
                       instr.parent.replace(instr, repl)
       
       
    1: def fix_divmod(mod):
           """Replace division and reminder instructions to builtins calls
           """
           _DivmodFixer().visit(mod)
       
       
   19: INTR_TO_CMATH = {
    1:     "llvm.pow.f32": "powf",
    1:     "llvm.pow.f64": "pow",
       
    1:     "llvm.sin.f32": "sinf",
    1:     "llvm.sin.f64": "sin",
       
    1:     "llvm.cos.f32": "cosf",
    1:     "llvm.cos.f64": "cos",
       
    1:     "llvm.sqrt.f32": "sqrtf",
    1:     "llvm.sqrt.f64": "sqrt",
       
    1:     "llvm.exp.f32": "expf",
    1:     "llvm.exp.f64": "exp",
       
    1:     "llvm.log.f32": "logf",
    1:     "llvm.log.f64": "log",
       
    1:     "llvm.log10.f32": "log10f",
    1:     "llvm.log10.f64": "log10",
       
    1:     "llvm.fabs.f32": "fabsf",
    1:     "llvm.fabs.f64": "fabs",
       
    1:     "llvm.floor.f32": "floorf",
    1:     "llvm.floor.f64": "floor",
       
    1:     "llvm.ceil.f32": "ceilf",
    1:     "llvm.ceil.f64": "ceil",
       
    1:     "llvm.trunc.f32": "truncf",
    1:     "llvm.trunc.f64": "trunc",
       }
       
    2: OTHER_CMATHS = '''
       tan
       tanf
       sinh
       sinhf
       cosh
       coshf
       tanh
       tanhf
       asin
       asinf
       acos
       acosf
       atan
       atanf
       atan2
       atan2f
       asinh
       asinhf
       acosh
       acoshf
       atanh
       atanhf
       expm1
       expm1f
       log1p
       log1pf
       log10
       log10f
       fmod
       fmodf
       round
       roundf
    1: '''.split()
       
    1: INTR_MATH = frozenset(INTR_TO_CMATH.values()) | frozenset(OTHER_CMATHS)
