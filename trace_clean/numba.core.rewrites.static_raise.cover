    1: from numba.core import errors, ir, consts
    1: from numba.core.rewrites import register_rewrite, Rewrite
       
       
    3: @register_rewrite('before-inference')
    2: class RewriteConstRaises(Rewrite):
    1:     """
           Rewrite IR statements of the kind `raise(value)`
           where `value` is the result of instantiating an exception with
           constant arguments
           into `static_raise(exception_type, constant args)`.
       
           This allows lowering in nopython mode, where one can't instantiate
           exception instances from runtime data.
           """
       
    1:     def _is_exception_type(self, const):
    1:         return isinstance(const, type) and issubclass(const, Exception)
       
    1:     def _break_constant(self, const, loc):
               """
               Break down constant exception.
               """
    1:         if isinstance(const, tuple): # it's a tuple(exception class, args)
                   if not self._is_exception_type(const[0]):
                       msg = "Encountered unsupported exception constant %r"
                       raise errors.UnsupportedError(msg % (const[0],), loc)
                   return const[0], tuple(const[1])
    1:         elif self._is_exception_type(const):
    1:             return const, None
               else:
                   if isinstance(const, str):
                       msg = ("Directly raising a string constant as an exception is "
                              "not supported.")
                   else:
                       msg = "Encountered unsupported constant type used for exception"
                   raise errors.UnsupportedError(msg, loc)
       
    1:     def _try_infer_constant(self, func_ir, inst):
    1:         try:
    1:             return func_ir.infer_constant(inst.exception)
               except consts.ConstantInferenceError:
                   # not a static exception
                   return None
       
    1:     def match(self, func_ir, block, typemap, calltypes):
   96:         self.raises = raises = {}
   96:         self.tryraises = tryraises = {}
   96:         self.block = block
               # Detect all raise statements and find which ones can be
               # rewritten
   97:         for inst in block.find_insts((ir.Raise, ir.TryRaise)):
    1:             if inst.exception is None:
                       # re-reraise
                       exc_type, exc_args = None, None
                   else:
                       # raise <something> => find the definition site for <something>
    1:                 const = self._try_infer_constant(func_ir, inst)
       
                       # failure to infer constant indicates this isn't a static
                       # exception
    1:                 if const is None:
                           continue
       
    1:                 loc = inst.exception.loc
    1:                 exc_type, exc_args = self._break_constant(const, loc)
       
    1:             if isinstance(inst, ir.Raise):
    1:                 raises[inst] = exc_type, exc_args
                   elif isinstance(inst, ir.TryRaise):
                       tryraises[inst] = exc_type, exc_args
                   else:
                       raise ValueError('unexpected: {}'.format(type(inst)))
   96:         return (len(raises) + len(tryraises)) > 0
       
    1:     def apply(self):
               """
               Rewrite all matching setitems as static_setitems.
               """
    1:         new_block = self.block.copy()
    1:         new_block.clear()
    3:         for inst in self.block.body:
    2:             if inst in self.raises:
    1:                 exc_type, exc_args = self.raises[inst]
    1:                 new_inst = ir.StaticRaise(exc_type, exc_args, inst.loc)
    1:                 new_block.append(new_inst)
    1:             elif inst in self.tryraises:
                       exc_type, exc_args = self.tryraises[inst]
                       new_inst = ir.StaticTryRaise(exc_type, exc_args, inst.loc)
                       new_block.append(new_inst)
                   else:
    1:                 new_block.append(inst)
    1:         return new_block
