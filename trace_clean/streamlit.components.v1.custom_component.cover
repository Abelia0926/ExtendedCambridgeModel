       # Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
    1: from __future__ import annotations
       
    1: import json
    1: from typing import TYPE_CHECKING, Any
       
    1: from streamlit.components.types.base_custom_component import BaseCustomComponent
    1: from streamlit.dataframe_util import is_dataframe_like
    1: from streamlit.delta_generator import main_dg
    1: from streamlit.elements.form import current_form_id
    1: from streamlit.elements.lib.policies import check_cache_replay_rules
    1: from streamlit.errors import StreamlitAPIException
    1: from streamlit.proto.Components_pb2 import ArrowTable as ArrowTableProto
    1: from streamlit.proto.Components_pb2 import SpecialArg
    1: from streamlit.proto.Element_pb2 import Element
    1: from streamlit.runtime.metrics_util import gather_metrics
    1: from streamlit.runtime.scriptrunner import get_script_run_ctx
    1: from streamlit.runtime.state import NoValue, register_widget
    1: from streamlit.runtime.state.common import compute_widget_id
    1: from streamlit.type_util import is_bytes_like, to_bytes
       
    1: if TYPE_CHECKING:
           from streamlit.delta_generator import DeltaGenerator
           from streamlit.runtime.state.common import WidgetCallback
       
       
    2: class MarshallComponentException(StreamlitAPIException):
    1:     """Class for exceptions generated during custom component marshalling."""
       
    1:     pass
       
       
    2: class CustomComponent(BaseCustomComponent):
    1:     """A Custom Component declaration."""
       
    1:     def __call__(
               self,
               *args,
    1:         default: Any = None,
    1:         key: str | None = None,
    1:         on_change: WidgetCallback | None = None,
               **kwargs,
           ) -> Any:
               """An alias for create_instance."""
               return self.create_instance(
                   *args,
                   default=default,
                   key=key,
                   on_change=on_change,
                   **kwargs,
               )
       
    2:     @gather_metrics("create_instance")
    2:     def create_instance(
               self,
               *args,
    1:         default: Any = None,
    1:         key: str | None = None,
    1:         on_change: WidgetCallback | None = None,
               **kwargs,
           ) -> Any:
               """Create a new instance of the component.
       
               Parameters
               ----------
               *args
                   Must be empty; all args must be named. (This parameter exists to
                   enforce correct use of the function.)
               default: any or None
                   The default return value for the component. This is returned when
                   the component's frontend hasn't yet specified a value with
                   `setComponentValue`.
               key: str or None
                   If not None, this is the user key we use to generate the
                   component's "widget ID".
               on_change: WidgetCallback or None
                   An optional callback invoked when the widget's value changes. No arguments are passed to it.
               **kwargs
                   Keyword args to pass to the component.
       
               Returns
               -------
               any or None
                   The component's widget value.
       
               """
               if len(args) > 0:
                   raise MarshallComponentException(f"Argument '{args[0]}' needs a label")
       
               try:
                   import pyarrow  # noqa: F401
       
                   from streamlit.components.v1 import component_arrow
               except ImportError:
                   raise StreamlitAPIException(
                       """To use Custom Components in Streamlit, you need to install
       PyArrow. To do so locally:
       
       `pip install pyarrow`
       
       And if you're using Streamlit Cloud, add "pyarrow" to your requirements.txt."""
                   )
       
               check_cache_replay_rules()
               # In addition to the custom kwargs passed to the component, we also
               # send the special 'default' and 'key' params to the component
               # frontend.
               all_args = dict(kwargs, **{"default": default, "key": key})
       
               json_args = {}
               special_args = []
               for arg_name, arg_val in all_args.items():
                   if is_bytes_like(arg_val):
                       bytes_arg = SpecialArg()
                       bytes_arg.key = arg_name
                       bytes_arg.bytes = to_bytes(arg_val)
                       special_args.append(bytes_arg)
                   elif is_dataframe_like(arg_val):
                       dataframe_arg = SpecialArg()
                       dataframe_arg.key = arg_name
                       component_arrow.marshall(dataframe_arg.arrow_dataframe.data, arg_val)
                       special_args.append(dataframe_arg)
                   else:
                       json_args[arg_name] = arg_val
       
               try:
                   serialized_json_args = json.dumps(json_args)
               except Exception as ex:
                   raise MarshallComponentException(
                       "Could not convert component args to JSON", ex
                   )
       
               def marshall_component(
                   dg: DeltaGenerator, element: Element
               ) -> Any | type[NoValue]:
                   element.component_instance.component_name = self.name
                   element.component_instance.form_id = current_form_id(dg)
                   if self.url is not None:
                       element.component_instance.url = self.url
       
                   # Normally, a widget's element_hash (which determines
                   # its identity across multiple runs of an app) is computed
                   # by hashing its arguments. This means that, if any of the arguments
                   # to the widget are changed, Streamlit considers it a new widget
                   # instance and it loses its previous state.
                   #
                   # However! If a *component* has a `key` argument, then the
                   # component's hash identity is determined by entirely by
                   # `component_name + url + key`. This means that, when `key`
                   # exists, the component will maintain its identity even when its
                   # other arguments change, and the component's iframe won't be
                   # remounted on the frontend.
       
                   def marshall_element_args():
                       element.component_instance.json_args = serialized_json_args
                       element.component_instance.special_args.extend(special_args)
       
                   ctx = get_script_run_ctx()
       
                   if key is None:
                       marshall_element_args()
                       computed_id = compute_widget_id(
                           "component_instance",
                           user_key=key,
                           name=self.name,
                           form_id=current_form_id(dg),
                           url=self.url,
                           key=key,
                           json_args=serialized_json_args,
                           special_args=special_args,
                           page=ctx.active_script_hash if ctx else None,
                       )
                   else:
                       computed_id = compute_widget_id(
                           "component_instance",
                           user_key=key,
                           name=self.name,
                           form_id=current_form_id(dg),
                           url=self.url,
                           key=key,
                           page=ctx.active_script_hash if ctx else None,
                       )
                   element.component_instance.id = computed_id
       
                   def deserialize_component(ui_value, widget_id=""):
                       # ui_value is an object from json, an ArrowTable proto, or a bytearray
                       return ui_value
       
                   component_state = register_widget(
                       element_type="component_instance",
                       element_proto=element.component_instance,
                       user_key=key,
                       widget_func_name=self.name,
                       deserializer=deserialize_component,
                       serializer=lambda x: x,
                       ctx=ctx,
                       on_change_handler=on_change,
                   )
                   widget_value = component_state.value
       
                   if key is not None:
                       marshall_element_args()
       
                   if widget_value is None:
                       widget_value = default
                   elif isinstance(widget_value, ArrowTableProto):
                       widget_value = component_arrow.arrow_proto_to_dataframe(widget_value)
                   return widget_value
       
               # We currently only support writing to st._main, but this will change
               # when we settle on an improved API in a post-layout world.
               dg = main_dg
       
               element = Element()
               return_value = marshall_component(dg, element)
       
               dg._enqueue("component_instance", element.component_instance)
               return return_value
       
    1:     def __eq__(self, other) -> bool:
               """Equality operator."""
               return (
                   isinstance(other, CustomComponent)
                   and self.name == other.name
                   and self.path == other.path
                   and self.url == other.url
                   and self.module_name == other.module_name
               )
       
    1:     def __ne__(self, other) -> bool:
               """Inequality operator."""
       
               # we have to use "not X == Y"" here because if we use "X != Y" we call __ne__ again and end up in recursion
               return not self == other
       
    1:     def __str__(self) -> str:
               return f"'{self.name}': {self.path if self.path is not None else self.url}"
