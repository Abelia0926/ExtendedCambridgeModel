    1: """
       Numba-specific errors and warnings.
       """
       
       
    1: import abc
    1: import contextlib
    1: import os
    1: import sys
    1: import warnings
    1: import numba.core.config
    1: import numpy as np
    1: from collections import defaultdict
    1: from functools import wraps
    1: from abc import abstractmethod
       
       # Filled at the end
    1: __all__ = []
       
       
    1: def _is_numba_core_config_loaded():
           """
           To detect if numba.core.config has been initialized due to circular imports.
           """
           try:
               numba.core.config
           except AttributeError:
               return False
           else:
               return True
       
       
    2: class NumbaWarning(Warning):
    1:     """
           Base category for all Numba compiler warnings.
           """
       
    1:     def __init__(self, msg, loc=None, highlighting=True, ):
               self.msg = msg
               self.loc = loc
       
               # If a warning is emitted inside validation of env-vars in
               # numba.core.config. Highlighting will not be available.
               if highlighting and _is_numba_core_config_loaded():
                   highlight = termcolor().errmsg
               else:
                   def highlight(x):
                       return x
               if loc:
                   super(NumbaWarning, self).__init__(
                       highlight("%s\n%s\n" % (msg, loc.strformat())))
               else:
                   super(NumbaWarning, self).__init__(highlight("%s" % (msg,)))
       
       
    2: class NumbaPerformanceWarning(NumbaWarning):
    1:     """
           Warning category for when an operation might not be
           as fast as expected.
           """
       
       
    2: class NumbaDeprecationWarning(NumbaWarning, DeprecationWarning):
    1:     """
           Warning category for use of a deprecated feature.
           """
       
       
    2: class NumbaPendingDeprecationWarning(NumbaWarning, PendingDeprecationWarning):
    1:     """
           Warning category for use of a feature that is pending deprecation.
           """
       
       
    2: class NumbaParallelSafetyWarning(NumbaWarning):
    1:     """
           Warning category for when an operation in a prange
           might not have parallel semantics.
           """
       
       
    2: class NumbaTypeSafetyWarning(NumbaWarning):
    1:     """
           Warning category for unsafe casting operations.
           """
       
       
    2: class NumbaExperimentalFeatureWarning(NumbaWarning):
    1:     """
           Warning category for using an experimental feature.
           """
       
       
    2: class NumbaInvalidConfigWarning(NumbaWarning):
    1:     """
           Warning category for using an invalid configuration.
           """
       
       
    2: class NumbaPedanticWarning(NumbaWarning):
    1:     """
           Warning category for reporting pedantic messages.
           """
    1:     def __init__(self, msg, **kwargs):
               super().__init__(f"{msg}\n{pedantic_warning_info}")
       
       
    2: class NumbaIRAssumptionWarning(NumbaPedanticWarning):
    1:     """
           Warning category for reporting an IR assumption violation.
           """
       
       
    2: class NumbaDebugInfoWarning(NumbaWarning):
    1:     """
           Warning category for an issue with the emission of debug information.
           """
       
       
    2: class NumbaSystemWarning(NumbaWarning):
    1:     """
           Warning category for an issue with the system configuration.
           """
       
       # These are needed in the color formatting of errors setup
       
       
    2: class _ColorScheme(metaclass=abc.ABCMeta):
       
    2:     @abstractmethod
    2:     def code(self, msg):
               pass
       
    2:     @abstractmethod
    2:     def errmsg(self, msg):
               pass
       
    2:     @abstractmethod
    2:     def filename(self, msg):
               pass
       
    2:     @abstractmethod
    2:     def indicate(self, msg):
               pass
       
    2:     @abstractmethod
    2:     def highlight(self, msg):
               pass
       
    2:     @abstractmethod
    2:     def reset(self, msg):
               pass
       
       
    2: class _DummyColorScheme(_ColorScheme):
       
    1:     def __init__(self, theme=None):
    1:         pass
       
    1:     def code(self, msg):
               pass
       
    1:     def errmsg(self, msg):
               pass
       
    1:     def filename(self, msg):
               pass
       
    1:     def indicate(self, msg):
               pass
       
    1:     def highlight(self, msg):
               pass
       
    1:     def reset(self, msg):
               pass
       
       
       # holds reference to the instance of the terminal color scheme in use
    1: _termcolor_inst = None
       
    1: try:
    1:     import colorama
       
           # If the colorama version is < 0.3.9 it can break stdout/stderr in some
           # situations, as a result if this condition is met colorama is disabled and
           # the user is warned. Note that early versions did not have a __version__.
    1:     colorama_version = getattr(colorama, '__version__', '0.0.0')
       
    5:     if tuple([int(x) for x in colorama_version.split('.')]) < (0, 3, 9):
               msg = ("Insufficiently recent colorama version found. "
                      "Numba requires colorama >= 0.3.9")
               # warn the user
               warnings.warn(msg)
               # trip the exception to disable color errors
               raise ImportError
       
           # If Numba is running in testsuite mode then do not use error message
           # coloring so CI system output is consistently readable without having
           # to read between shell escape characters.
    1:     if os.environ.get('NUMBA_DISABLE_ERROR_MESSAGE_HIGHLIGHTING', None):
               raise ImportError  # just to trigger the exception handler below
       
       except ImportError:
       
           class NOPColorScheme(_DummyColorScheme):
               def __init__(self, theme=None):
                   if theme is not None:
                       raise ValueError("specifying a theme has no effect")
                   _DummyColorScheme.__init__(self, theme=theme)
       
               def code(self, msg):
                   return msg
       
               def errmsg(self, msg):
                   return msg
       
               def filename(self, msg):
                   return msg
       
               def indicate(self, msg):
                   return msg
       
               def highlight(self, msg):
                   return msg
       
               def reset(self, msg):
                   return msg
       
           def termcolor():
               global _termcolor_inst
               if _termcolor_inst is None:
                   _termcolor_inst = NOPColorScheme()
               return _termcolor_inst
       
       else:
       
    1:     from colorama import init, reinit, deinit, Fore, Style
       
    2:     class ColorShell(object):
    1:         _has_initialized = False
       
    1:         def __init__(self):
 1385:             init()
 1385:             self._has_initialized = True
       
    1:         def __enter__(self):
 1385:             if self._has_initialized:
 1385:                 reinit()
       
    1:         def __exit__(self, *exc_detail):
 1385:             Style.RESET_ALL
 1385:             deinit()
       
    2:     class reset_terminal(object):
    1:         def __init__(self):
 1385:             self._buf = bytearray(b'')
       
    1:         def __enter__(self):
 1385:             return self._buf
       
    1:         def __exit__(self, *exc_detail):
 1385:             self._buf += bytearray(Style.RESET_ALL.encode('utf-8'))
       
           # define some default themes, if more are added, update the envvars docs!
    1:     themes = {}
       
           # No color added, just bold weighting
    2:     themes['no_color'] = {'code': None,
    1:                           'errmsg': None,
    1:                           'filename': None,
    1:                           'indicate': None,
    1:                           'highlight': None,
    1:                           'reset': None, }
       
           # suitable for terminals with a dark background
    2:     themes['dark_bg'] = {'code': Fore.BLUE,
    1:                          'errmsg': Fore.YELLOW,
    1:                          'filename': Fore.WHITE,
    1:                          'indicate': Fore.GREEN,
    1:                          'highlight': Fore.RED,
    1:                          'reset': Style.RESET_ALL, }
       
           # suitable for terminals with a light background
    2:     themes['light_bg'] = {'code': Fore.BLUE,
    1:                           'errmsg': Fore.BLACK,
    1:                           'filename': Fore.MAGENTA,
    1:                           'indicate': Fore.BLACK,
    1:                           'highlight': Fore.RED,
    1:                           'reset': Style.RESET_ALL, }
       
           # suitable for terminals with a blue background
    2:     themes['blue_bg'] = {'code': Fore.WHITE,
    1:                          'errmsg': Fore.YELLOW,
    1:                          'filename': Fore.MAGENTA,
    1:                          'indicate': Fore.CYAN,
    1:                          'highlight': Fore.RED,
    1:                          'reset': Style.RESET_ALL, }
       
           # suitable for use in jupyter notebooks
    2:     themes['jupyter_nb'] = {'code': Fore.BLACK,
    1:                             'errmsg': Fore.BLACK,
    1:                             'filename': Fore.GREEN,
    1:                             'indicate': Fore.CYAN,
    1:                             'highlight': Fore.RED,
    1:                             'reset': Style.RESET_ALL, }
       
    1:     default_theme = themes['no_color']
       
    2:     class HighlightColorScheme(_DummyColorScheme):
    1:         def __init__(self, theme=default_theme):
    1:             self._code = theme['code']
    1:             self._errmsg = theme['errmsg']
    1:             self._filename = theme['filename']
    1:             self._indicate = theme['indicate']
    1:             self._highlight = theme['highlight']
    1:             self._reset = theme['reset']
    1:             _DummyColorScheme.__init__(self, theme=theme)
       
    1:         def _markup(self, msg, color=None, style=Style.BRIGHT):
 1385:             features = ''
 1385:             if color:
                       features += color
 1385:             if style:
 1385:                 features += style
 2770:             with ColorShell():
 2770:                 with reset_terminal() as mu:
 1385:                     mu += features.encode('utf-8')
 1385:                     mu += (msg).encode('utf-8')
 1385:                 return mu.decode('utf-8')
       
    1:         def code(self, msg):
   68:             return self._markup(msg, self._code)
       
    1:         def errmsg(self, msg):
 1113:             return self._markup(msg, self._errmsg)
       
    1:         def filename(self, msg):
   68:             return self._markup(msg, self._filename)
       
    1:         def indicate(self, msg):
   68:             return self._markup(msg, self._indicate)
       
    1:         def highlight(self, msg):
   68:             return self._markup(msg, self._highlight)
       
    1:         def reset(self, msg):
                   return self._markup(msg, self._reset)
       
    1:     def termcolor():
               global _termcolor_inst
  584:         if _termcolor_inst is None:
    1:             scheme = themes[numba.core.config.COLOR_SCHEME]
    1:             _termcolor_inst = HighlightColorScheme(scheme)
  584:         return _termcolor_inst
       
       
    1: pedantic_warning_info = """
       This warning came from an internal pedantic check. Please report the warning
       message and traceback, along with a minimal reproducer at:
       https://github.com/numba/numba/issues/new?template=bug_report.md
       """
       
    1: feedback_details = """
       Please report the error message and traceback, along with a minimal reproducer
       at: https://github.com/numba/numba/issues/new?template=bug_report.md
       
       If more help is needed please feel free to speak to the Numba core developers
       directly at: https://gitter.im/numba/numba
       
       Thanks in advance for your help in improving Numba!
       """
       
    1: unsupported_error_info = """
       Unsupported functionality was found in the code Numba was trying to compile.
       
       If this functionality is important to you please file a feature request at:
       https://github.com/numba/numba/issues/new?template=feature_request.md
       """
       
    1: interpreter_error_info = """
       Unsupported Python functionality was found in the code Numba was trying to
       compile. This error could be due to invalid code, does the code work
       without Numba? (To temporarily disable Numba JIT, set the `NUMBA_DISABLE_JIT`
       environment variable to non-zero, and then rerun the code).
       
       If the code is valid and the unsupported functionality is important to you
       please file a feature request at:
       https://github.com/numba/numba/issues/new?template=feature_request.md
       
       To see Python/NumPy features supported by the latest release of Numba visit:
       https://numba.readthedocs.io/en/stable/reference/pysupported.html
       and
       https://numba.readthedocs.io/en/stable/reference/numpysupported.html
       """
       
    2: constant_inference_info = """
       Numba could not make a constant out of something that it decided should be
       a constant. This could well be a current limitation in Numba's internals,
       however please first check that your code is valid for compilation,
       particularly with respect to string interpolation (not supported!) and
       the requirement of compile time constants as arguments to exceptions:
       https://numba.readthedocs.io/en/stable/reference/pysupported.html?highlight=exceptions#constructs
       
       If the code is valid and the unsupported functionality is important to you
       please file a feature request at:
       https://github.com/numba/numba/issues/new?template=feature_request.md
       
       If you think your code should work with Numba. %s
    1: """ % feedback_details
       
    1: typing_error_info = """
       This is not usually a problem with Numba itself but instead often caused by
       the use of unsupported features or an issue in resolving types.
       
       To see Python/NumPy features supported by the latest release of Numba visit:
       https://numba.readthedocs.io/en/stable/reference/pysupported.html
       and
       https://numba.readthedocs.io/en/stable/reference/numpysupported.html
       
       For more information about typing errors and how to debug them visit:
       https://numba.readthedocs.io/en/stable/user/troubleshoot.html#my-code-doesn-t-compile
       
       If you think your code should work with Numba, please report the error message
       and traceback, along with a minimal reproducer at:
       https://github.com/numba/numba/issues/new?template=bug_report.md
       """
       
    1: reportable_issue_info = """
       -------------------------------------------------------------------------------
       This should not have happened, a problem has occurred in Numba's internals.
       You are currently using Numba version %s.
       %s
    1: """ % (numba.__version__, feedback_details)
       
    1: error_extras = dict()
    1: error_extras['unsupported_error'] = unsupported_error_info
    1: error_extras['typing'] = typing_error_info
    1: error_extras['reportable'] = reportable_issue_info
    1: error_extras['interpreter'] = interpreter_error_info
    1: error_extras['constant_inference'] = constant_inference_info
       
       
    1: def deprecated(arg):
           """Define a deprecation decorator.
           An optional string should refer to the new API to be used instead.
       
           Example:
             @deprecated
             def old_func(): ...
       
             @deprecated('new_func')
             def old_func(): ..."""
       
           subst = arg if isinstance(arg, str) else None
       
           def decorator(func):
               def wrapper(*args, **kwargs):
                   msg = "Call to deprecated function \"{}\"."
                   if subst:
                       msg += "\n Use \"{}\" instead."
                   warnings.warn(msg.format(func.__name__, subst),
                                 category=DeprecationWarning, stacklevel=2)
                   return func(*args, **kwargs)
       
               return wraps(func)(wrapper)
       
           if not subst:
               return decorator(arg)
           else:
               return decorator
       
       
    2: class WarningsFixer(object):
    1:     """
           An object "fixing" warnings of a given category caught during
           certain phases.  The warnings can have their filename and lineno fixed,
           and they are deduplicated as well.
       
           When used as a context manager, any warnings caught by `.catch_warnings()`
           will be flushed at the exit of the context manager.
           """
       
    1:     def __init__(self, category):
   24:         self._category = category
               # {(filename, lineno, category) -> messages}
   24:         self._warnings = defaultdict(set)
       
    2:     @contextlib.contextmanager
    2:     def catch_warnings(self, filename=None, lineno=None):
               """
               Store warnings and optionally fix their filename and lineno.
               """
 1730:         with warnings.catch_warnings(record=True) as wlist:
  865:             warnings.simplefilter('always', self._category)
  865:             yield
       
  865:         for w in wlist:
                   msg = str(w.message)
                   if issubclass(w.category, self._category):
                       # Store warnings of this category for deduplication
                       filename = filename or w.filename
                       lineno = lineno or w.lineno
                       self._warnings[filename, lineno, w.category].add(msg)
                   else:
                       # Simply emit other warnings again
                       warnings.warn_explicit(msg, w.category,
                                              w.filename, w.lineno)
       
    1:     def flush(self):
               """
               Emit all stored warnings.
               """
   24:         def key(arg):
                   # It is possible through codegen to create entirely identical
                   # warnings, this leads to comparing types when sorting which breaks
                   # on Python 3. Key as str() and if the worse happens then `id`
                   # creates some uniqueness
                   return str(arg) + str(id(arg))
       
   48:         for (filename, lineno, category), messages in sorted(
   24:                 self._warnings.items(), key=key):
                   for msg in sorted(messages):
                       warnings.warn_explicit(msg, category, filename, lineno)
   24:         self._warnings.clear()
       
    1:     def __enter__(self):
   24:         return
       
    1:     def __exit__(self, exc_type, exc_value, traceback):
   24:         self.flush()
       
       
    2: class NumbaError(Exception):
       
    1:     def __init__(self, msg, loc=None, highlighting=True):
  579:         self.msg = msg
  579:         self.loc = loc
  579:         if highlighting:
  579:             highlight = termcolor().errmsg
               else:
                   def highlight(x):
                       return x
       
  579:         if loc:
   68:             new_msg = "%s\n%s\n" % (msg, loc.strformat())
               else:
  511:             new_msg = "%s" % (msg,)
  579:         super(NumbaError, self).__init__(highlight(new_msg))
       
    2:     @property
    2:     def contexts(self):
               try:
                   return self._contexts
               except AttributeError:
                   self._contexts = lst = []
                   return lst
       
    1:     def add_context(self, msg):
               """
               Add contextual info.  The exception message is expanded with the new
               contextual information.
               """
               self.contexts.append(msg)
               f = termcolor().errmsg('{0}\n') + termcolor().filename('During: {1}')
               newmsg = f.format(self, msg)
               self.args = (newmsg,)
               return self
       
    1:     def patch_message(self, new_message):
               """
               Change the error message to the given new message.
               """
               self.args = (new_message,) + self.args[1:]
       
       
    2: class UnsupportedError(NumbaError):
    1:     """
           Numba does not have an implementation for this functionality.
           """
    1:     pass
       
       
    2: class UnsupportedRewriteError(UnsupportedError):
    1:     """UnsupportedError from rewrite passes
           """
    1:     pass
       
       
    2: class IRError(NumbaError):
    1:     """
           An error occurred during Numba IR generation.
           """
    1:     pass
       
       
    2: class RedefinedError(IRError):
    1:     """
           An error occurred during interpretation of IR due to variable redefinition.
           """
    1:     pass
       
       
    2: class NotDefinedError(IRError):
    1:     """
           An undefined variable is encountered during interpretation of IR.
           """
       
    1:     def __init__(self, name, loc=None):
               self.name = name
               msg = ("The compiler failed to analyze the bytecode. "
                      "Variable '%s' is not defined." % name)
               super(NotDefinedError, self).__init__(msg, loc=loc)
       
       
    2: class VerificationError(IRError):
    1:     """
           An error occurred during IR verification. Once Numba's internal
           representation (IR) is constructed it is then verified to ensure that
           terminators are both present and in the correct places within the IR. If
           it is the case that this condition is not met, a VerificationError is
           raised.
           """
    1:     pass
       
       
    2: class DeprecationError(NumbaError):
    1:     """
           Functionality is deprecated.
           """
    1:     pass
       
       
    2: class LoweringError(NumbaError):
    1:     """
           An error occurred during lowering.
           """
       
    1:     def __init__(self, msg, loc=None):
               super(LoweringError, self).__init__(msg, loc=loc)
       
       
    2: class UnsupportedParforsError(NumbaError):
    1:     """
           An error occurred because parfors is not supported on the platform.
           """
    1:     pass
       
       
    2: class ForbiddenConstruct(LoweringError):
    1:     """
           A forbidden Python construct was encountered (e.g. use of locals()).
           """
    1:     pass
       
       
    2: class TypingError(NumbaError):
    1:     """
           A type inference failure.
           """
    1:     pass
       
       
    2: class UntypedAttributeError(TypingError):
    1:     def __init__(self, value, attr, loc=None):
               module = getattr(value, 'pymod', None)
               if module is not None and module == np:
                   # unsupported numpy feature.
                   msg = ("Use of unsupported NumPy function 'numpy.%s' "
                          "or unsupported use of the function.") % attr
               else:
                   msg = "Unknown attribute '{attr}' of type {type}"
                   msg = msg.format(type=value, attr=attr)
               super(UntypedAttributeError, self).__init__(msg, loc=loc)
       
       
    2: class ByteCodeSupportError(NumbaError):
    1:     """
           Failure to extract the bytecode of the user's function.
           """
       
    1:     def __init__(self, msg, loc=None):
               super(ByteCodeSupportError, self).__init__(msg, loc=loc)
       
       
    2: class CompilerError(NumbaError):
    1:     """
           Some high-level error in the compiler.
           """
    1:     pass
       
       
    2: class ConstantInferenceError(NumbaError):
    1:     """
           Failure during constant inference.
           """
       
    1:     def __init__(self, value, loc=None):
   99:         super(ConstantInferenceError, self).__init__(value, loc=loc)
       
       
    2: class InternalError(NumbaError):
    1:     """
           For wrapping internal error occurred within the compiler
           """
       
    1:     def __init__(self, exception):
               super(InternalError, self).__init__(str(exception))
               self.old_exception = exception
       
       
    2: class InternalTargetMismatchError(InternalError):
    1:     """For signalling a target mismatch error occurred internally within the
           compiler.
           """
    1:     def __init__(self, kind, target_hw, hw_clazz):
               msg = (f"{kind.title()} being resolved on a target from which it does "
                      f"not inherit. Local target is {target_hw}, declared "
                      f"target class is {hw_clazz}.")
               super().__init__(msg)
       
       
    2: class RequireLiteralValue(TypingError):
    1:     """
           For signalling that a function's typing requires a constant value for
           some of its arguments.
           """
    1:     pass
       
       
    2: class ForceLiteralArg(NumbaError):
    1:     """A Pseudo-exception to signal the dispatcher to type an argument literally
       
           Attributes
           ----------
           requested_args : frozenset[int]
               requested positions of the arguments.
           """
    1:     def __init__(self, arg_indices, fold_arguments=None, loc=None):
               """
               Parameters
               ----------
               arg_indices : Sequence[int]
                   requested positions of the arguments.
               fold_arguments: callable
                   A function ``(tuple, dict) -> tuple`` that binds and flattens
                   the ``args`` and ``kwargs``.
               loc : numba.ir.Loc or None
               """
               super(ForceLiteralArg, self).__init__(
                   "Pseudo-exception to force literal arguments in the dispatcher",
                   loc=loc,
               )
               self.requested_args = frozenset(arg_indices)
               self.fold_arguments = fold_arguments
       
    1:     def bind_fold_arguments(self, fold_arguments):
               """Bind the fold_arguments function
               """
               # to avoid circular import
               from numba.core.utils import chain_exception
       
               e = ForceLiteralArg(self.requested_args, fold_arguments,
                                   loc=self.loc)
               return chain_exception(e, self)
       
    1:     def combine(self, other):
               """Returns a new instance by or'ing the requested_args.
               """
               if not isinstance(other, ForceLiteralArg):
                   m = '*other* must be a {} but got a {} instead'
                   raise TypeError(m.format(ForceLiteralArg, type(other)))
               return ForceLiteralArg(self.requested_args | other.requested_args)
       
    1:     def __or__(self, other):
               """Same as self.combine(other)
               """
               return self.combine(other)
       
       
    2: class LiteralTypingError(TypingError):
    1:     """
           Failure in typing a Literal type
           """
    1:     pass
       
       
       # These Exception classes are just Numba copies of their Python equivalents for
       # use internally in cases where we want e.g. type inference to keep on trying.
       # Exceptions extending from NumbaError are considered "special" by Numba's
       # internals and are treated differently to standard Python exceptions which are
       # permitted to just propagate up the stack.
       
    2: class NumbaValueError(TypingError):
    1:     pass
       
       
    2: class NumbaTypeError(TypingError):
    1:     pass
       
       
    2: class NumbaAttributeError(TypingError):
    1:     pass
       
       
    2: class NumbaAssertionError(TypingError):
    1:     pass
       
       
    2: class NumbaNotImplementedError(TypingError):
    1:     pass
       
       
    2: class NumbaKeyError(TypingError):
    1:     pass
       
       
    2: class NumbaIndexError(TypingError):
    1:     pass
       
       
    2: class NumbaRuntimeError(NumbaError):
    1:     pass
       
       
    1: def _format_msg(fmt, args, kwargs):
           return fmt.format(*args, **kwargs)
       
       
    1: _numba_path = os.path.dirname(__file__)
    1: loc_info = {}
       
       
    2: @contextlib.contextmanager
    2: def new_error_context(fmt_, *args, **kwargs):
           """
           A contextmanager that prepend contextual information to any exception
           raised within.  If the exception type is not an instance of NumbaError,
           it will be wrapped into a InternalError.   The exception class can be
           changed by providing a "errcls_" keyword argument with the exception
           constructor.
       
           The first argument is a message that describes the context.  It can be a
           format string.  If there are additional arguments, it will be used as
           ``fmt_.format(*args, **kwargs)`` to produce the final message string.
           """
           # Import here to avoid circular import.
 2526:     from numba.core.utils import (
               use_old_style_errors,
               use_new_style_errors,
           )
       
 2526:     errcls = kwargs.pop('errcls_', InternalError)
       
 2526:     loc = kwargs.get('loc', None)
 2526:     if loc is not None and not loc.filename.startswith(_numba_path):
 1452:         loc_info.update(kwargs)
       
 2526:     try:
 2526:         yield
           except NumbaError as e:
               e.add_context(_format_msg(fmt_, args, kwargs))
               raise
           except AssertionError:
               # Let assertion error pass through for shorter traceback in debugging
               raise
           except Exception as e:
               if use_old_style_errors():
                   newerr = errcls(e).add_context(_format_msg(fmt_, args, kwargs))
                   if numba.core.config.FULL_TRACEBACKS:
                       tb = sys.exc_info()[2]
                   else:
                       tb = None
                   raise newerr.with_traceback(tb)
               elif use_new_style_errors():
                   raise e
               else:
                   msg = ("Unknown CAPTURED_ERRORS style: "
                          f"'{numba.core.config.CAPTURED_ERRORS}'.")
                   assert 0, msg
       
       
  306: __all__ += [name for (name, value) in globals().items()
  167:             if not name.startswith('_') and isinstance(value, type)
   46:             and issubclass(value, (Exception, Warning))]
