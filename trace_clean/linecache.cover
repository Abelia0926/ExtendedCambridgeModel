       """Cache lines from Python source files.
       
       This is intended to read lines from modules imported -- hence if a filename
       is not found, it will look down the module search path for a file by
       that name.
       """
       
       import functools
       import sys
       import os
       import tokenize
       
       __all__ = ["getline", "clearcache", "checkcache", "lazycache"]
       
       
       # The cache. Maps filenames to either a thunk which will provide source code,
       # or a tuple (size, mtime, lines, fullname) once loaded.
       cache = {}
       
       
       def clearcache():
           """Clear the cache entirely."""
           cache.clear()
       
       
       def getline(filename, lineno, module_globals=None):
           """Get a line for a Python source file from the cache.
           Update the cache if it doesn't contain an entry for this file already."""
       
    4:     lines = getlines(filename, module_globals)
    4:     if 1 <= lineno <= len(lines):
    4:         return lines[lineno - 1]
           return ''
       
       
       def getlines(filename, module_globals=None):
           """Get the lines for a Python source file from the cache.
           Update the cache if it doesn't contain an entry for this file already."""
       
  115:     if filename in cache:
   59:         entry = cache[filename]
   59:         if len(entry) != 1:
   58:             return cache[filename][2]
       
   57:     try:
   57:         return updatecache(filename, module_globals)
           except MemoryError:
               clearcache()
               return []
       
       
       def checkcache(filename=None):
           """Discard cache entries that are out of date.
           (This is not checked upon each call!)"""
       
   18:     if filename is None:
               filenames = list(cache.keys())
   18:     elif filename in cache:
    8:         filenames = [filename]
           else:
   10:         return
       
   16:     for filename in filenames:
    8:         entry = cache[filename]
    8:         if len(entry) == 1:
                   # lazy cache entry, leave it lazy.
    1:             continue
    7:         size, mtime, lines, fullname = entry
    7:         if mtime is None:
                   continue   # no-op for files loaded via a __loader__
    7:         try:
    7:             stat = os.stat(fullname)
               except OSError:
                   cache.pop(filename, None)
                   continue
    7:         if size != stat.st_size or mtime != stat.st_mtime:
                   cache.pop(filename, None)
       
       
       def updatecache(filename, module_globals=None):
           """Update a cache entry and return its list of lines.
           If something's wrong, print a message, discard the cache entry,
           and return an empty list."""
       
   57:     if filename in cache:
    1:         if len(cache[filename]) != 1:
                   cache.pop(filename, None)
   57:     if not filename or (filename.startswith('<') and filename.endswith('>')):
   41:         return []
       
   16:     fullname = filename
   16:     try:
   16:         stat = os.stat(fullname)
           except OSError:
               basename = filename
       
               # Realise a lazy loader based lookup if there is one
               # otherwise try to lookup right now.
               if lazycache(filename, module_globals):
                   try:
                       data = cache[filename][0]()
                   except (ImportError, OSError):
                       pass
                   else:
                       if data is None:
                           # No luck, the PEP302 loader cannot find the source
                           # for this module.
                           return []
                       cache[filename] = (
                           len(data),
                           None,
                           [line + '\n' for line in data.splitlines()],
                           fullname
                       )
                       return cache[filename][2]
       
               # Try looking through the module search path, which is only useful
               # when handling a relative filename.
               if os.path.isabs(filename):
                   return []
       
               for dirname in sys.path:
                   try:
                       fullname = os.path.join(dirname, basename)
                   except (TypeError, AttributeError):
                       # Not sufficiently string-like to do anything useful with.
                       continue
                   try:
                       stat = os.stat(fullname)
                       break
                   except OSError:
                       pass
               else:
                   return []
   16:     try:
   32:         with tokenize.open(fullname) as fp:
   16:             lines = fp.readlines()
           except (OSError, UnicodeDecodeError, SyntaxError):
               return []
   16:     if lines and not lines[-1].endswith('\n'):
    4:         lines[-1] += '\n'
   16:     size, mtime = stat.st_size, stat.st_mtime
   16:     cache[filename] = size, mtime, lines, fullname
   16:     return lines
       
       
       def lazycache(filename, module_globals):
           """Seed the cache for filename with module_globals.
       
           The module loader will be asked for the source only when getlines is
           called, not immediately.
       
           If there is an entry in the cache already, it is not altered.
       
           :return: True if a lazy load is registered in the cache,
               otherwise False. To register such a load a module loader with a
               get_source method must be found, the filename must be a cacheable
               filename, and the filename must not be already cached.
           """
    2:     if filename in cache:
    1:         if len(cache[filename]) == 1:
    1:             return True
               else:
                   return False
    1:     if not filename or (filename.startswith('<') and filename.endswith('>')):
               return False
           # Try for a __loader__, if available
    1:     if module_globals and '__name__' in module_globals:
    1:         name = module_globals['__name__']
    1:         if (loader := module_globals.get('__loader__')) is None:
                   if spec := module_globals.get('__spec__'):
                       try:
                           loader = spec.loader
                       except AttributeError:
                           pass
    1:         get_source = getattr(loader, 'get_source', None)
       
    1:         if name and get_source:
    1:             get_lines = functools.partial(get_source, name)
    1:             cache[filename] = (get_lines,)
    1:             return True
           return False
