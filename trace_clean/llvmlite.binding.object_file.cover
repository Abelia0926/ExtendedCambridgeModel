    1: from llvmlite.binding import ffi
    1: from ctypes import (c_bool, c_char_p, c_char, c_size_t, string_at, c_uint64,
                           POINTER)
       
       
    2: class SectionIteratorRef(ffi.ObjectRef):
    1:     def name(self):
               return ffi.lib.LLVMPY_GetSectionName(self)
       
    1:     def is_text(self):
               return ffi.lib.LLVMPY_IsSectionText(self)
       
    1:     def size(self):
               return ffi.lib.LLVMPY_GetSectionSize(self)
       
    1:     def address(self):
               return ffi.lib.LLVMPY_GetSectionAddress(self)
       
    1:     def data(self):
               return string_at(ffi.lib.LLVMPY_GetSectionContents(self), self.size())
       
    1:     def is_end(self, object_file):
               return ffi.lib.LLVMPY_IsSectionIteratorAtEnd(object_file, self)
       
    1:     def next(self):
               ffi.lib.LLVMPY_MoveToNextSection(self)
       
    1:     def _dispose(self):
               ffi.lib.LLVMPY_DisposeSectionIterator(self)
       
       
    2: class ObjectFileRef(ffi.ObjectRef):
    2:     @classmethod
    2:     def from_data(cls, data):
               return cls(ffi.lib.LLVMPY_CreateObjectFile(data, len(data)))
       
    2:     @classmethod
    2:     def from_path(cls, path):
               with open(path, 'rb') as f:
                   data = f.read()
               return cls(ffi.lib.LLVMPY_CreateObjectFile(data, len(data)))
       
    1:     def sections(self):
               it = SectionIteratorRef(ffi.lib.LLVMPY_GetSections(self))
               while not it.is_end(self):
                   yield it
                   it.next()
       
    1:     def _dispose(self):
               ffi.lib.LLVMPY_DisposeObjectFile(self)
       
       
    1: ffi.lib.LLVMPY_CreateObjectFile.argtypes = [c_char_p, c_size_t]
    1: ffi.lib.LLVMPY_CreateObjectFile.restype = ffi.LLVMObjectFileRef
       
    1: ffi.lib.LLVMPY_DisposeObjectFile.argtypes = [ffi.LLVMObjectFileRef]
       
    1: ffi.lib.LLVMPY_GetSections.argtypes = [ffi.LLVMObjectFileRef]
    1: ffi.lib.LLVMPY_GetSections.restype = ffi.LLVMSectionIteratorRef
       
    1: ffi.lib.LLVMPY_DisposeSectionIterator.argtypes = [ffi.LLVMSectionIteratorRef]
       
    1: ffi.lib.LLVMPY_MoveToNextSection.argtypes = [ffi.LLVMSectionIteratorRef]
       
    1: ffi.lib.LLVMPY_IsSectionIteratorAtEnd.argtypes = [
    1:     ffi.LLVMObjectFileRef, ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_IsSectionIteratorAtEnd.restype = c_bool
       
    1: ffi.lib.LLVMPY_GetSectionName.argtypes = [ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_GetSectionName.restype = c_char_p
       
    1: ffi.lib.LLVMPY_GetSectionSize.argtypes = [ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_GetSectionSize.restype = c_uint64
       
    1: ffi.lib.LLVMPY_GetSectionAddress.argtypes = [ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_GetSectionAddress.restype = c_uint64
       
    1: ffi.lib.LLVMPY_GetSectionContents.argtypes = [ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_GetSectionContents.restype = POINTER(c_char)
       
    1: ffi.lib.LLVMPY_IsSectionText.argtypes = [ffi.LLVMSectionIteratorRef]
    1: ffi.lib.LLVMPY_IsSectionText.restype = c_bool
