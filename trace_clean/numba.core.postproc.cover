    1: from functools import cached_property
    1: from numba.core import ir, analysis, transforms, ir_utils
       
       
    2: class YieldPoint(object):
       
    1:     def __init__(self, block, inst):
               assert isinstance(block, ir.Block)
               assert isinstance(inst, ir.Yield)
               self.block = block
               self.inst = inst
               self.live_vars = None
               self.weak_live_vars = None
       
       
    2: class GeneratorInfo(object):
       
    1:     def __init__(self):
               # { index: YieldPoint }
               self.yield_points = {}
               # Ordered list of variable names
               self.state_vars = []
       
    1:     def get_yield_points(self):
               """
               Return an iterable of YieldPoint instances.
               """
               return self.yield_points.values()
       
       
    2: class VariableLifetime(object):
    1:     """
           For lazily building information of variable lifetime
           """
    1:     def __init__(self, blocks):
  216:         self._blocks = blocks
       
    2:     @cached_property
    2:     def cfg(self):
  216:         return analysis.compute_cfg_from_blocks(self._blocks)
       
    2:     @cached_property
    2:     def usedefs(self):
  216:         return analysis.compute_use_defs(self._blocks)
       
    2:     @cached_property
    2:     def livemap(self):
  432:         return analysis.compute_live_map(self.cfg, self._blocks,
  216:                                          self.usedefs.usemap,
  216:                                          self.usedefs.defmap)
       
    2:     @cached_property
    2:     def deadmaps(self):
  432:         return analysis.compute_dead_maps(self.cfg, self._blocks, self.livemap,
  216:                                           self.usedefs.defmap)
       
       
       # other packages that define new nodes add calls for inserting dels
       # format: {type:function}
    1: ir_extension_insert_dels = {}
       
       
    2: class PostProcessor(object):
    1:     """
           A post-processor for Numba IR.
           """
       
    1:     def __init__(self, func_ir):
  216:         self.func_ir = func_ir
       
    1:     def run(self, emit_dels: bool = False, extend_lifetimes: bool = False):
               """
               Run the following passes over Numba IR:
               - canonicalize the CFG
               - emit explicit `del` instructions for variables
               - compute lifetime of variables
               - compute generator info (if function is a generator function)
               """
  216:         self.func_ir.blocks = transforms.canonicalize_cfg(self.func_ir.blocks)
  216:         vlt = VariableLifetime(self.func_ir.blocks)
  216:         self.func_ir.variable_lifetime = vlt
       
  432:         bev = analysis.compute_live_variables(vlt.cfg, self.func_ir.blocks,
  216:                                               vlt.usedefs.defmap,
  216:                                               vlt.deadmaps.combined)
 1092:         for offset, ir_block in self.func_ir.blocks.items():
  876:             self.func_ir.block_entry_vars[ir_block] = bev[offset]
       
  216:         if self.func_ir.is_generator:
                   self.func_ir.generator_info = GeneratorInfo()
                   self._compute_generator_info()
               else:
  216:             self.func_ir.generator_info = None
       
               # Emit del nodes, do this last as the generator info parsing generates
               # and then strips dels as part of its analysis.
  216:         if emit_dels:
   72:             self._insert_var_dels(extend_lifetimes=extend_lifetimes)
       
    1:     def _populate_generator_info(self):
               """
               Fill `index` for the Yield instruction and create YieldPoints.
               """
               dct = self.func_ir.generator_info.yield_points
               assert not dct, 'rerunning _populate_generator_info'
               for block in self.func_ir.blocks.values():
                   for inst in block.body:
                       if isinstance(inst, ir.Assign):
                           yieldinst = inst.value
                           if isinstance(yieldinst, ir.Yield):
                               index = len(dct) + 1
                               yieldinst.index = index
                               yp = YieldPoint(block, yieldinst)
                               dct[yieldinst.index] = yp
       
    1:     def _compute_generator_info(self):
               """
               Compute the generator's state variables as the union of live variables
               at all yield points.
               """
               # generate del info, it's used in analysis here, strip it out at the end
               self._insert_var_dels()
               self._populate_generator_info()
               gi = self.func_ir.generator_info
               for yp in gi.get_yield_points():
                   live_vars = set(self.func_ir.get_block_entry_vars(yp.block))
                   weak_live_vars = set()
                   stmts = iter(yp.block.body)
                   for stmt in stmts:
                       if isinstance(stmt, ir.Assign):
                           if stmt.value is yp.inst:
                               break
                           live_vars.add(stmt.target.name)
                       elif isinstance(stmt, ir.Del):
                           live_vars.remove(stmt.value)
                   else:
                       assert 0, "couldn't find yield point"
                   # Try to optimize out any live vars that are deleted immediately
                   # after the yield point.
                   for stmt in stmts:
                       if isinstance(stmt, ir.Del):
                           name = stmt.value
                           if name in live_vars:
                               live_vars.remove(name)
                               weak_live_vars.add(name)
                       else:
                           break
                   yp.live_vars = live_vars
                   yp.weak_live_vars = weak_live_vars
       
               st = set()
               for yp in gi.get_yield_points():
                   st |= yp.live_vars
                   st |= yp.weak_live_vars
               gi.state_vars = sorted(st)
               self.remove_dels()
       
    1:     def _insert_var_dels(self, extend_lifetimes=False):
               """
               Insert del statements for each variable.
               Returns a 2-tuple of (variable definition map, variable deletion map)
               which indicates variables defined and deleted in each block.
       
               The algorithm avoids relying on explicit knowledge on loops and
               distinguish between variables that are defined locally vs variables that
               come from incoming blocks.
               We start with simple usage (variable reference) and definition (variable
               creation) maps on each block. Propagate the liveness info to predecessor
               blocks until it stabilize, at which point we know which variables must
               exist before entering each block. Then, we compute the end of variable
               lives and insert del statements accordingly. Variables are deleted after
               the last use. Variable referenced by terminators (e.g. conditional
               branch and return) are deleted by the successors or the caller.
               """
   72:         vlt = self.func_ir.variable_lifetime
  144:         self._patch_var_dels(vlt.deadmaps.internal, vlt.deadmaps.escaping,
   72:                              extend_lifetimes=extend_lifetimes)
       
    1:     def _patch_var_dels(self, internal_dead_map, escaping_dead_map,
    1:                         extend_lifetimes=False):
               """
               Insert delete in each block
               """
  364:         for offset, ir_block in self.func_ir.blocks.items():
                   # for each internal var, insert delete after the last use
  292:             internal_dead_set = internal_dead_map[offset].copy()
  292:             delete_pts = []
                   # for each statement in reverse order
 1981:             for stmt in reversed(ir_block.body[:-1]):
                       # internal vars that are used here
 6791:                 live_set = set(v.name for v in stmt.list_vars())
 1689:                 dead_set = live_set & internal_dead_set
 3378:                 for T, def_func in ir_extension_insert_dels.items():
 1689:                     if isinstance(stmt, T):
                               done_dels = def_func(stmt, dead_set)
                               dead_set -= done_dels
                               internal_dead_set -= done_dels
                       # used here but not afterwards
 1689:                 delete_pts.append((stmt, dead_set))
 1689:                 internal_dead_set -= dead_set
       
                   # rewrite body and insert dels
  292:             body = []
  292:             lastloc = ir_block.loc
  292:             del_store = []
 1981:             for stmt, delete_set in reversed(delete_pts):
                       # If using extended lifetimes then the Dels are all put at the
                       # block end just ahead of the terminator, so associate their
                       # location with the terminator.
 1689:                 if extend_lifetimes:
                           lastloc = ir_block.body[-1].loc
                       else:
 1689:                     lastloc = stmt.loc
                       # Ignore dels (assuming no user inserted deletes)
 1689:                 if not isinstance(stmt, ir.Del):
 1689:                     body.append(stmt)
                       # note: the reverse sort is not necessary for correctness
                       #       it is just to minimize changes to test for now
 3076:                 for var_name in sorted(delete_set, reverse=True):
 1387:                     delnode = ir.Del(var_name, loc=lastloc)
 1387:                     if extend_lifetimes:
                               del_store.append(delnode)
                           else:
 1387:                         body.append(delnode)
  292:             if extend_lifetimes:
                       body.extend(del_store)
  292:             body.append(ir_block.body[-1])  # terminator
  292:             ir_block.body = body
       
                   # vars to delete at the start
  292:             escape_dead_set = escaping_dead_map[offset]
  695:             for var_name in sorted(escape_dead_set):
  403:                 ir_block.prepend(ir.Del(var_name, loc=ir_block.body[0].loc))
       
    1:     def remove_dels(self):
               """
               Strips the IR of Del nodes
               """
   24:         ir_utils.remove_dels(self.func_ir.blocks)
