       # This file is generated by SciPy's build process
       # It contains system_info results at the time of building this package.
    1: from enum import Enum
       
    1: __all__ = ["show"]
    1: _built_with_meson = True
       
       
    2: class DisplayModes(Enum):
    1:     stdout = "stdout"
    1:     dicts = "dicts"
       
       
    1: def _cleanup(d):
           """
           Removes empty values in a `dict` recursively
           This ensures we remove values that Meson could not provide to CONFIG
           """
  429:     if isinstance(d, dict):
  344:         return { k: _cleanup(v) for k, v in d.items() if v != '' and _cleanup(v) != '' }
           else:
  380:         return d
       
       
    2: CONFIG = _cleanup(
    1:     {
    1:         "Compilers": {
    1:             "c": {
    1:                 "name": "clang",
    1:                 "linker": r"ld64",
    1:                 "version": "15.0.0",
    1:                 "commands": r"cc",
    1:                 "args": r"",
    1:                 "linker args": r"",
                   },
    1:             "cython": {
    1:                 "name": r"cython",
    1:                 "linker": r"cython",
    1:                 "version": r"3.0.11",
    1:                 "commands": r"cython",
    1:                 "args": r"",
    1:                 "linker args": r"",
                   },
    1:             "c++": {
    1:                 "name": "clang",
    1:                 "linker": r"ld64",
    1:                 "version": "15.0.0",
    1:                 "commands": r"c++",
    1:                 "args": r"",
    1:                 "linker args": r"",
                   },
    1:             "fortran": {
    1:                 "name": "gcc",
    1:                 "linker": r"ld64",
    1:                 "version": "13.3.0",
    1:                 "commands": r"gfortran",
    1:                 "args": r"",
    1:                 "linker args": r"",
                   },
    1:             "pythran": {
    1:                 "version": r"0.16.1",
    1:                 "include directory": r"../../../../../../private/var/folders/hw/1f0gcr8d6kn9ms0_wn0_57qc0000gn/T/pip-build-env-bm00er02/overlay/lib/python3.11/site-packages/pythran"
                   },
               },
    1:         "Machine Information": {
    1:             "host": {
    1:                 "cpu": r"aarch64",
    1:                 "family": r"aarch64",
    1:                 "endian": r"little",
    1:                 "system": r"darwin",
                   },
    1:             "build": {
    1:                 "cpu": r"aarch64",
    1:                 "family": r"aarch64",
    1:                 "endian": r"little",
    1:                 "system": r"darwin",
                   },
    1:             "cross-compiled": bool("False".lower().replace('false', '')),
               },
    1:         "Build Dependencies": {
    1:             "blas": {
    1:                 "name": "accelerate",
    1:                 "found": bool("True".lower().replace('false', '')),
    1:                 "version": "unknown",
    1:                 "detection method": "extraframeworks",
    1:                 "include directory": r"unknown",
    1:                 "lib directory": r"unknown",
    1:                 "openblas configuration": r"unknown",
    1:                 "pc file directory": r"unknown",
                   },
    1:             "lapack": {
    1:                 "name": "accelerate",
    1:                 "found": bool("True".lower().replace('false', '')),
    1:                 "version": "unknown",
    1:                 "detection method": "extraframeworks",
    1:                 "include directory": r"unknown",
    1:                 "lib directory": r"unknown",
    1:                 "openblas configuration": r"unknown",
    1:                 "pc file directory": r"unknown",
                   },
    1:             "pybind11": {
    1:                 "name": "pybind11",
    1:                 "version": "2.12.0",
    1:                 "detection method": "config-tool",
    1:                 "include directory": r"unknown",
                   },
               },
    1:         "Python Information": {
    1:             "path": r"/private/var/folders/hw/1f0gcr8d6kn9ms0_wn0_57qc0000gn/T/cibw-run-sycdcmor/cp311-macosx_arm64/build/venv/bin/python",
    1:             "version": "3.11",
               },
           }
       )
       
       
    1: def _check_pyyaml():
           import yaml
       
           return yaml
       
       
    1: def show(mode=DisplayModes.stdout.value):
           """
           Show libraries and system information on which SciPy was built
           and is being used
       
           Parameters
           ----------
           mode : {`'stdout'`, `'dicts'`}, optional.
               Indicates how to display the config information.
               `'stdout'` prints to console, `'dicts'` returns a dictionary
               of the configuration.
       
           Returns
           -------
           out : {`dict`, `None`}
               If mode is `'dicts'`, a dict is returned, else None
       
           Notes
           -----
           1. The `'stdout'` mode will give more readable
              output if ``pyyaml`` is installed
       
           """
           if mode == DisplayModes.stdout.value:
               try:  # Non-standard library, check import
                   yaml = _check_pyyaml()
       
                   print(yaml.dump(CONFIG))
               except ModuleNotFoundError:
                   import warnings
                   import json
       
                   warnings.warn("Install `pyyaml` for better output", stacklevel=1)
                   print(json.dumps(CONFIG, indent=2))
           elif mode == DisplayModes.dicts.value:
               return CONFIG
           else:
               raise AttributeError(
                   f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
               )
