    1: import re
    1: import textwrap
    1: import email.message
       
    1: from ._text import FoldedCase
       
       
    2: class Message(email.message.Message):
    2:     multiple_use_keys = set(
    2:         map(
    1:             FoldedCase,
    1:             [
                       'Classifier',
                       'Obsoletes-Dist',
                       'Platform',
                       'Project-URL',
                       'Provides-Dist',
                       'Provides-Extra',
                       'Requires-Dist',
                       'Requires-External',
                       'Supported-Platform',
                       'Dynamic',
                   ],
               )
           )
    1:     """
           Keys that may be indicated multiple times per PEP 566.
           """
       
    1:     def __new__(cls, orig: email.message.Message):
    1:         res = super().__new__(cls)
    1:         vars(res).update(vars(orig))
    1:         return res
       
    1:     def __init__(self, *args, **kwargs):
    1:         self._headers = self._repair_headers()
       
           # suppress spurious error from mypy
    1:     def __iter__(self):
               return super().__iter__()
       
    1:     def _repair_headers(self):
    1:         def redent(value):
                   "Correct for RFC822 indentation"
   55:             if not value or '\n' not in value:
   55:                 return value
                   return textwrap.dedent(' ' * 8 + value)
       
   57:         headers = [(key, redent(value)) for key, value in vars(self)['_headers']]
    1:         if self._payload:
    1:             headers.append(('Description', self.get_payload()))
    1:         return headers
       
    2:     @property
    2:     def json(self):
               """
               Convert PackageMetadata to a JSON-compatible format
               per PEP 0566.
               """
       
               def transform(key):
                   value = self.get_all(key) if key in self.multiple_use_keys else self[key]
                   if key == 'Keywords':
                       value = re.split(r'\s+', value)
                   tk = key.lower().replace('-', '_')
                   return tk, value
       
               return dict(map(transform, map(FoldedCase, self)))
