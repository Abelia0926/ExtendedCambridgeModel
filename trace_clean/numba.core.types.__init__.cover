    1: import struct
       
    1: import numpy as np
    1: from numba.core import utils
       
    1: from .abstract import *
    1: from .containers import *
    1: from .functions import *
    1: from .iterators import *
    1: from .misc import *
    1: from .npytypes import *
    1: from .scalars import *
    1: from .function_type import *
       
       # Short names
       
    1: pyobject = PyObject('pyobject')
    1: ffi_forced_object = Opaque('ffi_forced_object')
    1: ffi = Opaque('ffi')
    1: none = NoneType('none')
    1: ellipsis = EllipsisType('...')
    1: Any = Phantom('any')
    1: undefined = Undefined('undefined')
    1: py2_string_type = Opaque('str')
    1: unicode_type = UnicodeType('unicode_type')
    1: string = unicode_type
    1: unknown = Dummy('unknown')
    1: npy_rng = NumPyRandomGeneratorType('rng')
    1: npy_bitgen = NumPyRandomBitGeneratorType('bitgen')
       
       # _undef_var is used to represent undefined variables in the type system.
    1: _undef_var = UndefVar('_undef_var')
       
    1: code_type = Opaque('code')
    1: pyfunc_type = Opaque('pyfunc')
       
       # No operation is defined on voidptr
       # Can only pass it around
    1: voidptr = RawPointer('void*')
       
    1: boolean = bool_ = Boolean('bool')
       
    1: byte = uint8 = Integer('uint8')
    1: uint16 = Integer('uint16')
    1: uint32 = Integer('uint32')
    1: uint64 = Integer('uint64')
       
    1: int8 = Integer('int8')
    1: int16 = Integer('int16')
    1: int32 = Integer('int32')
    1: int64 = Integer('int64')
    1: intp = int32 if utils.MACHINE_BITS == 32 else int64
    1: uintp = uint32 if utils.MACHINE_BITS == 32 else uint64
    1: intc = int32 if struct.calcsize('i') == 4 else int64
    1: uintc = uint32 if struct.calcsize('I') == 4 else uint64
    1: ssize_t = int32 if struct.calcsize('n') == 4 else int64
    1: size_t = uint32 if struct.calcsize('N') == 4 else uint64
       
    1: float32 = Float('float32')
    1: float64 = Float('float64')
    1: float16 = Float('float16')
       
    1: complex64 = Complex('complex64', float32)
    1: complex128 = Complex('complex128', float64)
       
    1: range_iter32_type = RangeIteratorType(int32)
    1: range_iter64_type = RangeIteratorType(int64)
    1: unsigned_range_iter64_type = RangeIteratorType(uint64)
    1: range_state32_type = RangeType(int32)
    1: range_state64_type = RangeType(int64)
    1: unsigned_range_state64_type = RangeType(uint64)
       
    1: slice2_type = SliceType('slice<a:b>', 2)
    1: slice3_type = SliceType('slice<a:b:c>', 3)
       
    1: signed_domain = frozenset([int8, int16, int32, int64])
    1: unsigned_domain = frozenset([uint8, uint16, uint32, uint64])
    1: integer_domain = signed_domain | unsigned_domain
    1: real_domain = frozenset([float32, float64])
    1: complex_domain = frozenset([complex64, complex128])
    1: number_domain = real_domain | integer_domain | complex_domain
       
       # Aliases to NumPy type names
       
    1: b1 = bool_
    1: i1 = int8
    1: i2 = int16
    1: i4 = int32
    1: i8 = int64
    1: u1 = uint8
    1: u2 = uint16
    1: u4 = uint32
    1: u8 = uint64
       
    1: f2 = float16
    1: f4 = float32
    1: f8 = float64
       
    1: c8 = complex64
    1: c16 = complex128
       
    1: float_ = float32
    1: double = float64
    1: void = none
       
    7: _make_signed = lambda x: globals()["int%d" % (np.dtype(x).itemsize * 8)]
    7: _make_unsigned = lambda x: globals()["uint%d" % (np.dtype(x).itemsize * 8)]
       
    1: char = _make_signed(np.byte)
    1: uchar = byte = _make_unsigned(np.byte)
    1: short = _make_signed(np.short)
    1: ushort = _make_unsigned(np.short)
    1: int_ = _make_signed(np.int_)
    1: uint = _make_unsigned(np.int_)
    1: intc = _make_signed(np.intc) # C-compat int
    1: uintc = _make_unsigned(np.uintc) # C-compat uint
    1: long_ = _make_signed(np.int_)  # C-compat long
    1: ulong = _make_unsigned(np.int_)  # C-compat ulong
    1: longlong = _make_signed(np.longlong)
    1: ulonglong = _make_unsigned(np.longlong)
       
       # optional types
    1: optional = Optional
       
       
    1: deferred_type = DeferredType
       
    2: __all__ = '''
       int8
       int16
       int32
       int64
       uint8
       uint16
       uint32
       uint64
       intp
       uintp
       intc
       uintc
       ssize_t
       size_t
       boolean
       float32
       float64
       complex64
       complex128
       bool_
       byte
       char
       uchar
       short
       ushort
       int_
       uint
       long_
       ulong
       longlong
       ulonglong
       float_
       double
       void
       none
       b1
       i1
       i2
       i4
       i8
       u1
       u2
       u4
       u8
       f4
       f8
       c8
       c16
       optional
       ffi_forced_object
       ffi
       deferred_type
    1: '''.split()
