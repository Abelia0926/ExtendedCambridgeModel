    1: """Implementation of __array_function__ overrides from NEP-18."""
    1: import collections
    1: import functools
    1: import os
       
    1: from .._utils import set_module
    1: from .._utils._inspect import getargspec
    1: from numpy.core._multiarray_umath import (
           add_docstring,  _get_implementing_args, _ArrayFunctionDispatcher)
       
       
    1: ARRAY_FUNCTIONS = set()
       
    1: array_function_like_doc = (
    1:     """like : array_like, optional
               Reference object to allow the creation of arrays which are not
               NumPy arrays. If an array-like passed in as ``like`` supports
               the ``__array_function__`` protocol, the result will be defined
               by it. In this case, it ensures the creation of an array object
               compatible with that passed in via this argument."""
       )
       
    1: def set_array_function_like_doc(public_api):
    9:     if public_api.__doc__ is not None:
   18:         public_api.__doc__ = public_api.__doc__.replace(
    9:             "${ARRAY_FUNCTION_LIKE}",
    9:             array_function_like_doc,
               )
    9:     return public_api
       
       
    2: add_docstring(
    1:     _ArrayFunctionDispatcher,
    1:     """
           Class to wrap functions with checks for __array_function__ overrides.
       
           All arguments are required, and can only be passed by position.
       
           Parameters
           ----------
           dispatcher : function or None
               The dispatcher function that returns a single sequence-like object
               of all arguments relevant.  It must have the same signature (except
               the default values) as the actual implementation.
               If ``None``, this is a ``like=`` dispatcher and the
               ``_ArrayFunctionDispatcher`` must be called with ``like`` as the
               first (additional and positional) argument.
           implementation : function
               Function that implements the operation on NumPy arrays without
               overrides.  Arguments passed calling the ``_ArrayFunctionDispatcher``
               will be forwarded to this (and the ``dispatcher``) as if using
               ``*args, **kwargs``.
       
           Attributes
           ----------
           _implementation : function
               The original implementation passed in.
           """)
       
       
       # exposed for testing purposes; used internally by _ArrayFunctionDispatcher
    2: add_docstring(
    1:     _get_implementing_args,
    1:     """
           Collect arguments on which to call __array_function__.
       
           Parameters
           ----------
           relevant_args : iterable of array-like
               Iterable of possibly array-like arguments to check for
               __array_function__ methods.
       
           Returns
           -------
           Sequence of arguments with __array_function__ methods, in the order in
           which they should be called.
           """)
       
       
    1: ArgSpec = collections.namedtuple('ArgSpec', 'args varargs keywords defaults')
       
       
    1: def verify_matching_signatures(implementation, dispatcher):
           """Verify that a dispatcher function has the right signature."""
  278:     implementation_spec = ArgSpec(*getargspec(implementation))
  278:     dispatcher_spec = ArgSpec(*getargspec(dispatcher))
       
  278:     if (implementation_spec.args != dispatcher_spec.args or
  278:             implementation_spec.varargs != dispatcher_spec.varargs or
  278:             implementation_spec.keywords != dispatcher_spec.keywords or
  556:             (bool(implementation_spec.defaults) !=
  278:              bool(dispatcher_spec.defaults)) or
  278:             (implementation_spec.defaults is not None and
  344:              len(implementation_spec.defaults) !=
  172:              len(dispatcher_spec.defaults))):
               raise RuntimeError('implementation and dispatcher for %s have '
                                  'different function signatures' % implementation)
       
  278:     if implementation_spec.defaults is not None:
  172:         if dispatcher_spec.defaults != (None,) * len(dispatcher_spec.defaults):
                   raise RuntimeError('dispatcher functions can only use None for '
                                      'default argument values')
       
       
    2: def array_function_dispatch(dispatcher=None, module=None, verify=True,
    1:                             docs_from_dispatcher=False):
           """Decorator for adding dispatch with the __array_function__ protocol.
       
           See NEP-18 for example usage.
       
           Parameters
           ----------
           dispatcher : callable or None
               Function that when called like ``dispatcher(*args, **kwargs)`` with
               arguments from the NumPy function call returns an iterable of
               array-like arguments to check for ``__array_function__``.
       
               If `None`, the first argument is used as the single `like=` argument
               and not passed on.  A function implementing `like=` must call its
               dispatcher with `like` as the first non-keyword argument.
           module : str, optional
               __module__ attribute to set on new function, e.g., ``module='numpy'``.
               By default, module is copied from the decorated function.
           verify : bool, optional
               If True, verify the that the signature of the dispatcher and decorated
               function signatures match exactly: all required and optional arguments
               should appear in order with the same names, but the default values for
               all optional arguments should be ``None``. Only disable verification
               if the dispatcher's signature needs to deviate for some particular
               reason, e.g., because the function has a signature like
               ``func(*args, **kwargs)``.
           docs_from_dispatcher : bool, optional
               If True, copy docs from the dispatcher function onto the dispatched
               function, rather than from the implementation. This is useful for
               functions defined in C, which otherwise don't have docstrings.
       
           Returns
           -------
           Function suitable for decorating the implementation of a NumPy function.
       
           """
  317:     def decorator(implementation):
  317:         if verify:
  287:             if dispatcher is not None:
  278:                 verify_matching_signatures(implementation, dispatcher)
                   else:
                       # Using __code__ directly similar to verify_matching_signature
    9:                 co = implementation.__code__
    9:                 last_arg = co.co_argcount + co.co_kwonlyargcount - 1
    9:                 last_arg = co.co_varnames[last_arg]
    9:                 if last_arg != "like" or co.co_kwonlyargcount == 0:
                           raise RuntimeError(
                               "__array_function__ expects `like=` to be the last "
                               "argument and a keyword-only argument. "
                               f"{implementation} does not seem to comply.")
       
  317:         if docs_from_dispatcher:
   23:             add_docstring(implementation, dispatcher.__doc__)
       
  317:         public_api = _ArrayFunctionDispatcher(dispatcher, implementation)
  317:         public_api = functools.wraps(implementation)(public_api)
       
  317:         if module is not None:
  306:             public_api.__module__ = module
       
  317:         ARRAY_FUNCTIONS.add(public_api)
       
  317:         return public_api
       
  317:     return decorator
       
       
    1: def array_function_from_dispatcher(
    1:         implementation, module=None, verify=True, docs_from_dispatcher=True):
           """Like array_function_dispatcher, but with function arguments flipped."""
       
   23:     def decorator(dispatcher):
   69:         return array_function_dispatch(
   23:             dispatcher, module, verify=verify,
   46:             docs_from_dispatcher=docs_from_dispatcher)(implementation)
   23:     return decorator
