    1: from collections import namedtuple
    1: from functools import singledispatch
    1: import ctypes
    1: import enum
       
    1: import numpy as np
    1: from numpy.random.bit_generator import BitGenerator
       
    1: from numba.core import types, utils, errors
    1: from numba.np import numpy_support
       
       
       # terminal color markup
    1: _termcolor = errors.termcolor()
       
       
    2: class Purpose(enum.Enum):
           # Value being typed is used as an argument
    1:     argument = 1
           # Value being typed is used as a constant
    1:     constant = 2
       
       
    1: _TypeofContext = namedtuple("_TypeofContext", ("purpose",))
       
       
    1: def typeof(val, purpose=Purpose.argument):
           """
           Get the Numba type of a Python value for the given purpose.
           """
           # Note the behaviour for Purpose.argument must match _typeof.c.
  701:     c = _TypeofContext(purpose)
  701:     ty = typeof_impl(val, c)
  701:     if ty is None:
 1068:         msg = _termcolor.errmsg(
  534:             f"Cannot determine Numba type of {type(val)}")
  534:         raise ValueError(msg)
  167:     return ty
       
       
    2: @singledispatch
    2: def typeof_impl(val, c):
           """
           Generic typeof() implementation.
           """
  472:     tp = _typeof_buffer(val, c)
  472:     if tp is not None:
               return tp
       
  472:     tp = getattr(val, "_numba_type_", None)
  472:     if tp is not None:
               return tp
       
           # cffi is handled here as it does not expose a public base class
           # for exported functions or CompiledFFI instances.
  472:     from numba.core.typing import cffi_utils
  472:     if cffi_utils.SUPPORTED:
  472:         if cffi_utils.is_cffi_func(val):
                   return cffi_utils.make_function_type(val)
  472:         if cffi_utils.is_ffi_instance(val):
                   return types.ffi
       
  472:     return None
       
       
    1: def _typeof_buffer(val, c):
  472:     from numba.core.typing import bufproto
  472:     try:
  472:         m = memoryview(val)
  472:     except TypeError:
  472:         return
           # Object has the buffer protocol
           try:
               dtype = bufproto.decode_pep3118_format(m.format, m.itemsize)
           except ValueError:
               return
           type_class = bufproto.get_type_class(type(val))
           layout = bufproto.infer_layout(m)
           return type_class(dtype, m.ndim, layout=layout,
                             readonly=m.readonly)
       
       
    2: @typeof_impl.register(ctypes._CFuncPtr)
    2: def _typeof_ctypes_function(val, c):
           from .ctypes_utils import is_ctypes_funcptr, make_function_type
           if is_ctypes_funcptr(val):
               return make_function_type(val)
       
       
    2: @typeof_impl.register(type)
    2: def _typeof_type(val, c):
           """
           Type various specific Python types.
           """
   64:     if issubclass(val, BaseException):
    1:         return types.ExceptionClass(val)
   63:     if issubclass(val, tuple) and hasattr(val, "_asdict"):
    1:         return types.NamedTupleClass(val)
       
   62:     if issubclass(val, np.generic):
               return types.NumberClass(numpy_support.from_dtype(val))
       
   62:     if issubclass(val, types.Type):
               return types.TypeRef(val)
       
   62:     from numba.typed import Dict
   62:     if issubclass(val, Dict):
               return types.TypeRef(types.DictType)
       
   62:     from numba.typed import List
   62:     if issubclass(val, List):
               return types.TypeRef(types.ListType)
       
       
    2: @typeof_impl.register(bool)
    2: def _typeof_bool(val, c):
   10:     return types.boolean
       
       
    2: @typeof_impl.register(float)
    2: def _typeof_float(val, c):
   20:     return types.float64
       
       
    2: @typeof_impl.register(complex)
    2: def _typeof_complex(val, c):
    1:     return types.complex128
       
       
    2: @typeof_impl.register(int)
    2: def _typeof_int(val, c):
           # As in _typeof.c
  109:     nbits = utils.bit_length(val)
  109:     if nbits < 32:
  109:         typ = types.intp
           elif nbits < 64:
               typ = types.int64
           elif nbits == 64 and val >= 0:
               typ = types.uint64
           else:
               raise ValueError("Int value is too large: %s" % val)
  109:     return typ
       
       
    2: @typeof_impl.register(np.generic)
    2: def _typeof_numpy_scalar(val, c):
    6:     try:
    6:         return numpy_support.map_arrayscalar_type(val)
           except NotImplementedError:
               pass
       
       
    2: @typeof_impl.register(str)
    2: def _typeof_str(val, c):
    1:     return types.string
       
       
    2: @typeof_impl.register(type((lambda a: a).__code__))
    2: def _typeof_code(val, c):
           return types.code_type
       
       
    2: @typeof_impl.register(type(None))
    2: def _typeof_none(val, c):
   14:     return types.none
       
       
    2: @typeof_impl.register(type(Ellipsis))
    2: def _typeof_ellipsis(val, c):
           return types.ellipsis
       
       
    2: @typeof_impl.register(tuple)
    2: def _typeof_tuple(val, c):
   17:     tys = [typeof_impl(v, c) for v in val]
   17:     if any(ty is None for ty in tys):
               return
    1:     return types.BaseTuple.from_types(tys, type(val))
       
       
    2: @typeof_impl.register(list)
    2: def _typeof_list(val, c):
           if len(val) == 0:
               raise ValueError("Cannot type empty list")
           ty = typeof_impl(val[0], c)
           if ty is None:
               raise ValueError(
                   f"Cannot type list element type {type(val[0])}")
           return types.List(ty, reflected=True)
       
       
    2: @typeof_impl.register(set)
    2: def _typeof_set(val, c):
           if len(val) == 0:
               raise ValueError("Cannot type empty set")
           item = next(iter(val))
           ty = typeof_impl(item, c)
           if ty is None:
               raise ValueError(
                   f"Cannot type set element type {type(item)}")
           return types.Set(ty, reflected=True)
       
       
    2: @typeof_impl.register(slice)
    2: def _typeof_slice(val, c):
           return types.slice2_type if val.step in (None, 1) else types.slice3_type
       
       
    2: @typeof_impl.register(enum.Enum)
    2: @typeof_impl.register(enum.IntEnum)
    2: def _typeof_enum(val, c):
           clsty = typeof_impl(type(val), c)
           return clsty.member_type
       
       
    2: @typeof_impl.register(enum.EnumMeta)
    2: def _typeof_enum_class(val, c):
           cls = val
           members = list(cls.__members__.values())
           if len(members) == 0:
               raise ValueError("Cannot type enum with no members")
           dtypes = {typeof_impl(mem.value, c) for mem in members}
           if len(dtypes) > 1:
               raise ValueError("Cannot type heterogeneous enum: "
                                "got value types %s"
                                % ", ".join(sorted(str(ty) for ty in dtypes)))
           if issubclass(val, enum.IntEnum):
               typecls = types.IntEnumClass
           else:
               typecls = types.EnumClass
           return typecls(cls, dtypes.pop())
       
       
    2: @typeof_impl.register(np.dtype)
    2: def _typeof_dtype(val, c):
           tp = numpy_support.from_dtype(val)
           return types.DType(tp)
       
       
    2: @typeof_impl.register(np.ndarray)
    2: def _typeof_ndarray(val, c):
   14:     if isinstance(val, np.ma.MaskedArray):
               msg = "Unsupported array type: numpy.ma.MaskedArray."
               raise errors.NumbaTypeError(msg)
   14:     try:
   14:         dtype = numpy_support.from_dtype(val.dtype)
           except errors.NumbaNotImplementedError:
               raise errors.NumbaValueError(f"Unsupported array dtype: {val.dtype}")
   14:     layout = numpy_support.map_layout(val)
   14:     readonly = not val.flags.writeable
   14:     return types.Array(dtype, val.ndim, layout, readonly=readonly)
       
       
    2: @typeof_impl.register(types.NumberClass)
    2: def _typeof_number_class(val, c):
           return val
       
       
    2: @typeof_impl.register(types.Literal)
    2: def _typeof_literal(val, c):
           return val
       
       
    2: @typeof_impl.register(types.TypeRef)
    2: def _typeof_typeref(val, c):
           return val
       
       
    2: @typeof_impl.register(types.Type)
    2: def _typeof_nb_type(val, c):
    4:     if isinstance(val, types.BaseFunction):
               return val
    4:     elif isinstance(val, (types.Number, types.Boolean)):
    2:         return types.NumberClass(val)
           else:
    2:         return types.TypeRef(val)
       
       
    2: @typeof_impl.register(BitGenerator)
    2: def typeof_numpy_random_bitgen(val, c):
           return types.NumPyRandomBitGeneratorType(val)
       
       
    2: @typeof_impl.register(np.random.Generator)
    2: def typeof_random_generator(val, c):
           return types.NumPyRandomGeneratorType(val)
       
       
    2: @typeof_impl.register(np.polynomial.polynomial.Polynomial)
    2: def typeof_numpy_polynomial(val, c):
           coef = typeof(val.coef)
           domain = typeof(val.domain)
           window = typeof(val.window)
           return types.PolynomialType(coef, domain, window)
