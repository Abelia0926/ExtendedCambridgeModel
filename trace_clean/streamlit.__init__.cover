       # Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022-2024)
       #
       # Licensed under the Apache License, Version 2.0 (the "License");
       # you may not use this file except in compliance with the License.
       # You may obtain a copy of the License at
       #
       #     http://www.apache.org/licenses/LICENSE-2.0
       #
       # Unless required by applicable law or agreed to in writing, software
       # distributed under the License is distributed on an "AS IS" BASIS,
       # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       # See the License for the specific language governing permissions and
       # limitations under the License.
       
       # isort: skip_file
       
    1: """Streamlit.
       
       How to use Streamlit in 3 seconds:
       
           1. Write an app
           >>> import streamlit as st
           >>> st.write(anything_you_want)
       
           2. Run your app
           $ streamlit run my_script.py
       
           3. Use your app
           A new tab will open on your browser. That's your Streamlit app!
       
           4. Modify your code, save it, and watch changes live on your browser.
       
       Take a look at the other commands in this module to find out what else
       Streamlit can do:
       
           >>> dir(streamlit)
       
       Or try running our "Hello World":
       
           $ streamlit hello
       
       For more detailed info, see https://docs.streamlit.io.
       """
       
       # IMPORTANT: Prefix with an underscore anything that the user shouldn't see.
       
    1: import os as _os
       
       # Set Matplotlib backend to avoid a crash.
       # The default Matplotlib backend crashes Python on OSX when run on a thread
       # that's not the main thread, so here we set a safer backend as a fix.
       # This fix is OS-independent. We didn't see a good reason to make this
       # Mac-only. Consistency within Streamlit seemed more important.
       # IMPORTANT: This needs to run on top of all imports before any other
       # import of matplotlib could happen.
    1: _os.environ["MPLBACKEND"] = "Agg"
       
       
       # Must be at the top, to avoid circular dependency.
    1: from streamlit import logger as _logger
    1: from streamlit import config as _config
    1: from streamlit.deprecation_util import deprecate_func_name as _deprecate_func_name
    1: from streamlit.version import STREAMLIT_VERSION_STRING as _STREAMLIT_VERSION_STRING
       
       # Give the package a version.
    1: __version__ = _STREAMLIT_VERSION_STRING
       
    1: from streamlit.delta_generator import (
           main_dg as _main_dg,
           sidebar_dg as _sidebar_dg,
           event_dg as _event_dg,
           bottom_dg as _bottom_dg,
       )
       
    1: from streamlit.elements.dialog_decorator import (
           dialog_decorator as _dialog_decorator,
           experimental_dialog_decorator as _experimental_dialog_decorator,
       )
    1: from streamlit.runtime.caching import (
           cache_resource as _cache_resource,
           cache_data as _cache_data,
           cache as _cache,
       )
    1: from streamlit.runtime.connection_factory import (
           connection_factory as _connection,
       )
    1: from streamlit.runtime.fragment import (
           experimental_fragment as _experimental_fragment,
           fragment as _fragment,
       )
    1: from streamlit.runtime.metrics_util import gather_metrics as _gather_metrics
    1: from streamlit.runtime.secrets import secrets_singleton as _secrets_singleton
    1: from streamlit.runtime.context import ContextProxy as _ContextProxy
    1: from streamlit.runtime.state import (
           SessionStateProxy as _SessionStateProxy,
           QueryParamsProxy as _QueryParamsProxy,
       )
    1: from streamlit.user_info import UserInfoProxy as _UserInfoProxy
    1: from streamlit.commands.experimental_query_params import (
           get_query_params as _get_query_params,
           set_query_params as _set_query_params,
       )
       
    1: import streamlit.column_config as _column_config
       
       # Modules that the user should have access to. These are imported with the "as" syntax and the same name; note that renaming the import with "as" does not make it an explicit export.
       # In this case, you should import it with an underscore to make clear that it is internal and then assign it to a variable with the new intended name.
       # You can check the export behavior by running 'mypy --strict example_app.py', which disables implicit_reexport, where you use the respective command in the example_app.py Streamlit app.
       
    1: from streamlit.echo import echo as echo
    1: from streamlit.commands.logo import logo as logo
    1: from streamlit.commands.navigation import navigation as navigation
    1: from streamlit.navigation.page import Page as Page
    1: from streamlit.elements.spinner import spinner as spinner
       
    1: from streamlit.commands.page_config import set_page_config as set_page_config
    1: from streamlit.commands.execution_control import (
           stop as stop,
           rerun as rerun,
           switch_page as switch_page,
       )
       
       
    1: def _update_logger() -> None:
           _logger.set_log_level(_config.get_option("logger.level").upper())
           _logger.update_formatter()
           _logger.init_tornado_logs()
       
       
       # Make this file only depend on config option in an asynchronous manner. This
       # avoids a race condition when another file (such as a test file) tries to pass
       # in an alternative config.
    1: _config.on_config_parsed(_update_logger, True)
       
    1: secrets = _secrets_singleton
       
       # DeltaGenerator methods:
    1: _main = _main_dg
    1: sidebar = _sidebar_dg
    1: _event = _event_dg
    1: _bottom = _bottom_dg
       
    1: altair_chart = _main.altair_chart
    1: area_chart = _main.area_chart
    1: audio = _main.audio
    1: balloons = _main.balloons
    1: bar_chart = _main.bar_chart
    1: bokeh_chart = _main.bokeh_chart
    1: button = _main.button
    1: caption = _main.caption
    1: camera_input = _main.camera_input
    1: chat_message = _main.chat_message
    1: chat_input = _main.chat_input
    1: checkbox = _main.checkbox
    1: code = _main.code
    1: columns = _main.columns
    1: tabs = _main.tabs
    1: container = _main.container
    1: dataframe = _main.dataframe
    1: data_editor = _main.data_editor
    1: date_input = _main.date_input
    1: divider = _main.divider
    1: download_button = _main.download_button
    1: expander = _main.expander
    1: feedback = _main.feedback
    1: pydeck_chart = _main.pydeck_chart
    1: empty = _main.empty
    1: error = _main.error
    1: exception = _main.exception
    1: file_uploader = _main.file_uploader
    1: form = _main.form
    1: form_submit_button = _main.form_submit_button
    1: graphviz_chart = _main.graphviz_chart
    1: header = _main.header
    1: help = _main.help
    1: html = _main.html
    1: image = _main.image
    1: info = _main.info
    1: json = _main.json
    1: latex = _main.latex
    1: line_chart = _main.line_chart
    1: link_button = _main.link_button
    1: map = _main.map
    1: markdown = _main.markdown
    1: metric = _main.metric
    1: multiselect = _main.multiselect
    1: number_input = _main.number_input
    1: page_link = _main.page_link
    1: plotly_chart = _main.plotly_chart
    1: popover = _main.popover
    1: progress = _main.progress
    1: pyplot = _main.pyplot
    1: radio = _main.radio
    1: scatter_chart = _main.scatter_chart
    1: selectbox = _main.selectbox
    1: select_slider = _main.select_slider
    1: slider = _main.slider
    1: snow = _main.snow
    1: subheader = _main.subheader
    1: success = _main.success
    1: table = _main.table
    1: text = _main.text
    1: text_area = _main.text_area
    1: text_input = _main.text_input
    1: toggle = _main.toggle
    1: time_input = _main.time_input
    1: title = _main.title
    1: vega_lite_chart = _main.vega_lite_chart
    1: video = _main.video
    1: warning = _main.warning
    1: write = _main.write
    1: write_stream = _main.write_stream
    1: color_picker = _main.color_picker
    1: status = _main.status
       
       # Events - Note: these methods cannot be called directly on sidebar (ex: st.sidebar.toast)
    1: toast = _event.toast
       
       # Config
       # We add the metrics tracking here, since importing
       # gather_metrics in config causes a circular dependency
    1: get_option = _gather_metrics("get_option", _config.get_option)
    1: set_option = _gather_metrics("set_option", _config.set_user_option)
       
       # Session State
    1: session_state = _SessionStateProxy()
       
    1: query_params = _QueryParamsProxy()
       
    1: context = _ContextProxy()
       
       # Caching
    1: cache_data = _cache_data
    1: cache_resource = _cache_resource
       # `st.cache` is deprecated and should be removed soon
    1: cache = _cache
       
       # Namespaces
    1: column_config = _column_config
       
       # Connection
    1: connection = _connection
       
       # Fragment and dialog
    1: dialog = _dialog_decorator
    1: fragment = _fragment
       
       # Experimental APIs
    2: experimental_dialog = _deprecate_func_name(
    1:     _experimental_dialog_decorator,
    1:     "experimental_dialog",
    1:     "2025-01-01",
    1:     name_override="dialog",
       )
    2: experimental_fragment = _deprecate_func_name(
    1:     _experimental_fragment,
    1:     "experimental_fragment",
    1:     "2025-01-01",
    1:     name_override="fragment",
       )
    1: experimental_user = _UserInfoProxy()
       
    1: _EXPERIMENTAL_QUERY_PARAMS_DEPRECATE_MSG = "Refer to our [docs page](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params) for more information."
       
    2: experimental_get_query_params = _deprecate_func_name(
    1:     _get_query_params,
    1:     "experimental_get_query_params",
    1:     "2024-04-11",
    1:     _EXPERIMENTAL_QUERY_PARAMS_DEPRECATE_MSG,
    1:     name_override="query_params",
       )
    2: experimental_set_query_params = _deprecate_func_name(
    1:     _set_query_params,
    1:     "experimental_set_query_params",
    1:     "2024-04-11",
    1:     _EXPERIMENTAL_QUERY_PARAMS_DEPRECATE_MSG,
    1:     name_override="query_params",
       )
       
       
       # make it possible to call streamlit.components.v1.html etc. by importing it here
       # import in the very end to avoid partially-initialized module import errors, because
       # streamlit.components.v1 also uses some streamlit imports
    1: import streamlit.components.v1  # noqa: F401
