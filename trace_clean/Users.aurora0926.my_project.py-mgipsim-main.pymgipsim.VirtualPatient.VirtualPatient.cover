    1: import os
    1: from pymgipsim.Utilities.Scenario import scenario, demographic_info
    1: from pymgipsim.Utilities.units_conversions_constants import UnitConversion
    1: from .Models import T1DM, Multiscale
    1: from pymgipsim.VirtualPatient.Models.Multiscale.BodyWeight.CONSTANTS import NOMINAL_EI0, NOMINAL_EE0, NOMINAL_UGE0
    1: from pymgipsim.Utilities.paths import models_path
    1: from pymgipsim.ModelSolver import multiscale, singlescale
    1: import numpy as np
    1: import json
       
    2: class VirtualCohort:
    1:     """ Abstract virtual patient class.
           """
    1:     singlescale_model = None
    1:     multiscale_model = None
       
    1:     def __init__(self, scenario_instance: scenario):
       
       
    1:         match scenario_instance.patient.model.name:
    1:             case T1DM.ExtHovorka.Model.name:
    1:                 self.singlescale_model = T1DM.ExtHovorka.Model.from_scenario(scenario_instance=scenario_instance)
                   case T1DM.IVP.Model.name:
                       self.singlescale_model = T1DM.IVP.Model.from_scenario(scenario_instance=scenario_instance)
                   case _:
                       raise Exception(f"Unknown model name {scenario_instance.patient.model.name}")
       
    1:         self.singlescale_model_solver = singlescale.SingleScaleSolver(scenario_instance, self.singlescale_model)
    1:         self.model_solver = self.singlescale_model_solver
       
    1:         if scenario_instance.settings.simulator_name == 'MultiScaleSolver':
                   self.multiscale_model = Multiscale.BodyWeight.Model.from_scenario_multiscale(scenario_instance=scenario_instance)
                   self.multiscale_model_solver = multiscale.MultiScaleSolver(scenario_instance, self.singlescale_model, self.multiscale_model)
                   self.model_solver = self.multiscale_model_solver
       
    2:     @property
    2:     def glucose(self):
               return self.singlescale_model_solver.model.states.as_array[:,self.model_solver.model.glucose_state,:]
       
    2:     @staticmethod
    2:     def generate_demographic_info(scenario_instance: scenario):
       
    1:         if not scenario_instance.patient.demographic_info:
                   scenario_instance.patient.demographic_info = demographic_info()
       
    1:         try:
    1:             body_weight, egfr, basal, height, total_daily_basal, carb_insulin_ratio, resting_heart_rate, correction_bolus, hba1c, waist_size,baseline_daily_energy_intake, baseline_daily_energy_expenditure, baseline_daily_urinary_glucose_excretion  = [], [], [], [], [], [], [], [], [], [],[],[],[]
    1:             path = os.path.join(models_path, scenario_instance.patient.model.name.replace(".", os.sep), "Patients")
    2:             for name in scenario_instance.patient.files:
    1:                 abs_path = os.path.join(path, name)
    2:                 with open(abs_path) as f:
    1:                     params_dict = json.load(f)
    1:                 dem = demographic_info(**params_dict["demographic_info"])
    1:                 baseline_daily_energy_intake.append(dem.baseline_daily_energy_intake)
    1:                 baseline_daily_energy_expenditure.append(dem.baseline_daily_energy_expenditure)
    1:                 baseline_daily_urinary_glucose_excretion.append(dem.baseline_daily_urinary_glucose_excretion)
    1:                 body_weight.append(dem.body_weight)
    1:                 egfr.append(dem.egfr)
    1:                 basal.append(dem.basal)
    1:                 height.append(dem.height)
    1:                 total_daily_basal.append(dem.total_daily_basal)
    1:                 carb_insulin_ratio.append(dem.carb_insulin_ratio)
    1:                 resting_heart_rate.append(dem.resting_heart_rate)
    1:                 correction_bolus.append(dem.correction_bolus)
    1:                 hba1c.append(dem.HbA1c)
    1:                 waist_size.append(dem.waist_size)
               except:
                   # This could be removed in the future
                   n_subjects = scenario_instance.patient.number_of_subjects
                   body_weight = np.random.uniform(low = scenario_instance.patient.demographic_info.body_weight_range[0],
                                                   high = scenario_instance.patient.demographic_info.body_weight_range[1],
                                                   size = n_subjects).tolist() #np.random.normal(loc = NOMINAL_BW0, scale = 15, size = n_subjects).tolist()
                   basal = n_subjects*[1.7]
                   height = n_subjects*[175]
                   total_daily_basal = n_subjects*[24]
                   carb_insulin_ratio = n_subjects*[12.239]
                   resting_heart_rate = n_subjects*[70.0]
                   correction_bolus = n_subjects*[25.0]
                   hba1c = n_subjects * [0.0]
                   waist_size = n_subjects * [0.0]
                   baseline_daily_energy_intake = n_subjects*[NOMINAL_EI0]
                   baseline_daily_energy_expenditure = n_subjects*[NOMINAL_EE0]
                   baseline_daily_urinary_glucose_excretion = n_subjects*[NOMINAL_UGE0]
                   scenario_instance.patient.files = None
       
                   """ Generate eGFR from Renal Function """
                   match scenario_instance.patient.demographic_info.renal_function_category:
       
                       case 1:
                           low, high = 90, 100
       
                       case 2:
                           low, high = 60, 89
       
                       case 3:
                           low, high = 30, 59
       
                       case 4:
                           low, high = 15, 29
       
                       case 5:
                           low, high = 5, 15
       
                   egfr = np.random.uniform(low = UnitConversion.metric.milli_to_base(low), high = UnitConversion.metric.milli_to_base(high), size = n_subjects).tolist()
       
    1:         scenario_instance.patient.demographic_info.body_weight = body_weight
    1:         scenario_instance.patient.demographic_info.egfr = egfr
    1:         scenario_instance.patient.demographic_info.basal = basal
    1:         scenario_instance.patient.demographic_info.height = height
    1:         scenario_instance.patient.demographic_info.total_daily_basal = total_daily_basal
    1:         scenario_instance.patient.demographic_info.carb_insulin_ratio = carb_insulin_ratio
    1:         scenario_instance.patient.demographic_info.resting_heart_rate = resting_heart_rate
    1:         scenario_instance.patient.demographic_info.correction_bolus = correction_bolus
    1:         scenario_instance.patient.demographic_info.HbA1c = hba1c
    1:         scenario_instance.patient.demographic_info.waist_size = waist_size
    1:         scenario_instance.patient.demographic_info.baseline_daily_energy_intake = baseline_daily_energy_intake
    1:         scenario_instance.patient.demographic_info.baseline_daily_energy_expenditure = baseline_daily_energy_expenditure
    1:         scenario_instance.patient.demographic_info.baseline_daily_urinary_glucose_excretion = baseline_daily_urinary_glucose_excretion
       
    1:         return scenario_instance
