    1: """
       Dynamically generate the NRT module
       """
       
       
    1: from numba.core import config
    1: from numba.core import types, cgutils
    1: from llvmlite import ir, binding
       
       
    1: _word_type = ir.IntType(config.MACHINE_BITS)
    1: _pointer_type = ir.PointerType(ir.IntType(8))
       
    2: _meminfo_struct_type = ir.LiteralStructType([
    1:     _word_type,     # size_t refct
    1:     _pointer_type,  # dtor_function dtor
    1:     _pointer_type,  # void *dtor_info
    1:     _pointer_type,  # void *data
    1:     _word_type,     # size_t size
           ])
       
       
    1: incref_decref_ty = ir.FunctionType(ir.VoidType(), [_pointer_type])
    1: meminfo_data_ty = ir.FunctionType(_pointer_type, [_pointer_type])
       
       
    1: def _define_nrt_meminfo_data(module):
           """
           Implement NRT_MemInfo_data_fast in the module.  This allows LLVM
           to inline lookup of the data pointer.
           """
    2:     fn = cgutils.get_or_insert_function(module, meminfo_data_ty,
    1:                                         "NRT_MemInfo_data_fast")
    1:     builder = ir.IRBuilder(fn.append_basic_block())
    1:     [ptr] = fn.args
    1:     struct_ptr = builder.bitcast(ptr, _meminfo_struct_type.as_pointer())
    1:     data_ptr = builder.load(cgutils.gep(builder, struct_ptr, 0, 3))
    1:     builder.ret(data_ptr)
       
       
    1: def _define_nrt_incref(module, atomic_incr):
           """
           Implement NRT_incref in the module
           """
    2:     fn_incref = cgutils.get_or_insert_function(module, incref_decref_ty,
    1:                                               "NRT_incref")
           # Cannot inline this for refcount pruning to work
    1:     fn_incref.attributes.add('noinline')
    1:     builder = ir.IRBuilder(fn_incref.append_basic_block())
    1:     [ptr] = fn_incref.args
    1:     is_null = builder.icmp_unsigned("==", ptr, cgutils.get_null_value(ptr.type))
    2:     with cgutils.if_unlikely(builder, is_null):
    1:         builder.ret_void()
       
    1:     word_ptr = builder.bitcast(ptr, atomic_incr.args[0].type)
    1:     if config.DEBUG_NRT:
               cgutils.printf(builder, "*** NRT_Incref %zu [%p]\n", builder.load(word_ptr),
                              ptr)
    1:     builder.call(atomic_incr, [word_ptr])
    1:     builder.ret_void()
       
       
    1: def _define_nrt_decref(module, atomic_decr):
           """
           Implement NRT_decref in the module
           """
    2:     fn_decref = cgutils.get_or_insert_function(module, incref_decref_ty,
    1:                                                "NRT_decref")
           # Cannot inline this for refcount pruning to work
    1:     fn_decref.attributes.add('noinline')
    2:     calldtor = ir.Function(module,
    1:                            ir.FunctionType(ir.VoidType(), [_pointer_type]),
    1:                            name="NRT_MemInfo_call_dtor")
       
    1:     builder = ir.IRBuilder(fn_decref.append_basic_block())
    1:     [ptr] = fn_decref.args
    1:     is_null = builder.icmp_unsigned("==", ptr, cgutils.get_null_value(ptr.type))
    2:     with cgutils.if_unlikely(builder, is_null):
    1:         builder.ret_void()
       
       
           # For memory fence usage, see https://llvm.org/docs/Atomics.html
       
           # A release fence is used before the relevant write operation.
           # No-op on x86.  On POWER, it lowers to lwsync.
    1:     builder.fence("release")
       
    1:     word_ptr = builder.bitcast(ptr, atomic_decr.args[0].type)
       
    1:     if config.DEBUG_NRT:
               cgutils.printf(builder, "*** NRT_Decref %zu [%p]\n", builder.load(word_ptr),
                              ptr)
    2:     newrefct = builder.call(atomic_decr,
    1:                             [word_ptr])
       
    2:     refct_eq_0 = builder.icmp_unsigned("==", newrefct,
    1:                                        ir.Constant(newrefct.type, 0))
    2:     with cgutils.if_unlikely(builder, refct_eq_0):
               # An acquire fence is used after the relevant read operation.
               # No-op on x86.  On POWER, it lowers to lwsync.
    1:         builder.fence("acquire")
    1:         builder.call(calldtor, [ptr])
    1:     builder.ret_void()
       
       
       # Set this to True to measure the overhead of atomic refcounts compared
       # to non-atomic.
    1: _disable_atomicity = 0
       
       
    1: def _define_atomic_inc_dec(module, op, ordering):
           """Define a llvm function for atomic increment/decrement to the given module
           Argument ``op`` is the operation "add"/"sub".  Argument ``ordering`` is
           the memory ordering.  The generated function returns the new value.
           """
    2:     ftype = ir.FunctionType(_word_type, [_word_type.as_pointer()])
    2:     fn_atomic = ir.Function(module, ftype, name="nrt_atomic_{0}".format(op))
       
    2:     [ptr] = fn_atomic.args
    2:     bb = fn_atomic.append_basic_block()
    2:     builder = ir.IRBuilder(bb)
    2:     ONE = ir.Constant(_word_type, 1)
    2:     if not _disable_atomicity:
    2:         oldval = builder.atomic_rmw(op, ptr, ONE, ordering=ordering)
               # Perform the operation on the old value so that we can pretend returning
               # the "new" value.
    2:         res = getattr(builder, op)(oldval, ONE)
    2:         builder.ret(res)
           else:
               oldval = builder.load(ptr)
               newval = getattr(builder, op)(oldval, ONE)
               builder.store(newval, ptr)
               builder.ret(oldval)
       
    2:     return fn_atomic
       
       
    1: def _define_atomic_cas(module, ordering):
           """Define a llvm function for atomic compare-and-swap.
           The generated function is a direct wrapper of the LLVM cmpxchg with the
           difference that the a int indicate success (1) or failure (0) is returned
           and the last argument is a output pointer for storing the old value.
       
           Note
           ----
           On failure, the generated function behaves like an atomic load.  The loaded
           value is stored to the last argument.
           """
    2:     ftype = ir.FunctionType(ir.IntType(32), [_word_type.as_pointer(),
    1:                                              _word_type, _word_type,
    1:                                              _word_type.as_pointer()])
    1:     fn_cas = ir.Function(module, ftype, name="nrt_atomic_cas")
       
    1:     [ptr, cmp, repl, oldptr] = fn_cas.args
    1:     bb = fn_cas.append_basic_block()
    1:     builder = ir.IRBuilder(bb)
    1:     outtup = builder.cmpxchg(ptr, cmp, repl, ordering=ordering)
    1:     old, ok = cgutils.unpack_tuple(builder, outtup, 2)
    1:     builder.store(old, oldptr)
    1:     builder.ret(builder.zext(ok, ftype.return_type))
       
    1:     return fn_cas
       
       
    1: def _define_nrt_unresolved_abort(ctx, module):
           """
           Defines an abort function due to unresolved symbol.
       
           The function takes no args and will always raise an exception.
           It should be safe to call this function with incorrect number of arguments.
           """
    1:     fnty = ctx.call_conv.get_function_type(types.none, ())
    1:     fn = ir.Function(module, fnty, name="nrt_unresolved_abort")
    1:     bb = fn.append_basic_block()
    1:     builder = ir.IRBuilder(bb)
    1:     msg = "numba jitted function aborted due to unresolved symbol"
    1:     ctx.call_conv.return_user_exc(builder, RuntimeError, (msg,))
    1:     return fn
       
       
    1: def create_nrt_module(ctx):
           """
           Create an IR module defining the LLVM NRT functions.
           A (IR module, library) tuple is returned.
           """
    1:     codegen = ctx.codegen()
    1:     library = codegen.create_library("nrt")
       
           # Implement LLVM module with atomic ops
    1:     ir_mod = library.create_ir_module("nrt_module")
       
    1:     atomic_inc = _define_atomic_inc_dec(ir_mod, "add", ordering='monotonic')
    1:     atomic_dec = _define_atomic_inc_dec(ir_mod, "sub", ordering='monotonic')
    1:     _define_atomic_cas(ir_mod, ordering='monotonic')
       
    1:     _define_nrt_meminfo_data(ir_mod)
    1:     _define_nrt_incref(ir_mod, atomic_inc)
    1:     _define_nrt_decref(ir_mod, atomic_dec)
       
    1:     _define_nrt_unresolved_abort(ctx, ir_mod)
       
    1:     return ir_mod, library
       
       
    1: def compile_nrt_functions(ctx):
           """
           Compile all LLVM NRT functions and return a library containing them.
           The library is created using the given target context.
           """
    1:     ir_mod, library = create_nrt_module(ctx)
       
    1:     library.add_ir_module(ir_mod)
    1:     library.finalize()
       
    1:     return library
