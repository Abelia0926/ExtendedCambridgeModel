    1: from ctypes import c_uint, c_bool
    1: from llvmlite.binding import ffi
    1: from llvmlite.binding import passmanagers
       
       
    1: def create_pass_manager_builder():
   40:     return PassManagerBuilder()
       
       
    2: class PassManagerBuilder(ffi.ObjectRef):
    1:     __slots__ = ()
       
    1:     def __init__(self, ptr=None):
   40:         if ptr is None:
   40:             ptr = ffi.lib.LLVMPY_PassManagerBuilderCreate()
   40:         ffi.ObjectRef.__init__(self, ptr)
       
    2:     @property
    2:     def opt_level(self):
               """
               The general optimization level as an integer between 0 and 3.
               """
               return ffi.lib.LLVMPY_PassManagerBuilderGetOptLevel(self)
       
    2:     @opt_level.setter
    2:     def opt_level(self, level):
   40:         ffi.lib.LLVMPY_PassManagerBuilderSetOptLevel(self, level)
       
    2:     @property
    2:     def size_level(self):
               """
               Whether and how much to optimize for size.  An integer between 0 and 2.
               """
               return ffi.lib.LLVMPY_PassManagerBuilderGetSizeLevel(self)
       
    2:     @size_level.setter
    2:     def size_level(self, size):
               ffi.lib.LLVMPY_PassManagerBuilderSetSizeLevel(self, size)
       
    2:     @property
    2:     def inlining_threshold(self):
               """
               The integer threshold for inlining a function into another.  The higher,
               the more likely inlining a function is.  This attribute is write-only.
               """
               raise NotImplementedError("inlining_threshold is write-only")
       
    2:     @inlining_threshold.setter
    2:     def inlining_threshold(self, threshold):
   80:         ffi.lib.LLVMPY_PassManagerBuilderUseInlinerWithThreshold(
   40:             self, threshold)
       
    2:     @property
    2:     def disable_unroll_loops(self):
               """
               If true, disable loop unrolling.
               """
               return ffi.lib.LLVMPY_PassManagerBuilderGetDisableUnrollLoops(self)
       
    2:     @disable_unroll_loops.setter
    2:     def disable_unroll_loops(self, disable=True):
               ffi.lib.LLVMPY_PassManagerBuilderSetDisableUnrollLoops(self, disable)
       
    2:     @property
    2:     def loop_vectorize(self):
               """
               If true, allow vectorizing loops.
               """
               return ffi.lib.LLVMPY_PassManagerBuilderGetLoopVectorize(self)
       
    2:     @loop_vectorize.setter
    2:     def loop_vectorize(self, enable=True):
   40:         return ffi.lib.LLVMPY_PassManagerBuilderSetLoopVectorize(self, enable)
       
    2:     @property
    2:     def slp_vectorize(self):
               """
               If true, enable the "SLP vectorizer", which uses a different algorithm
               from the loop vectorizer.  Both may be enabled at the same time.
               """
               return ffi.lib.LLVMPY_PassManagerBuilderGetSLPVectorize(self)
       
    2:     @slp_vectorize.setter
    2:     def slp_vectorize(self, enable=True):
   40:         return ffi.lib.LLVMPY_PassManagerBuilderSetSLPVectorize(self, enable)
       
    1:     def _populate_module_pm(self, pm):
    2:         ffi.lib.LLVMPY_PassManagerBuilderPopulateModulePassManager(self, pm)
       
    1:     def _populate_function_pm(self, pm):
   38:         ffi.lib.LLVMPY_PassManagerBuilderPopulateFunctionPassManager(self, pm)
       
    1:     def populate(self, pm):
   40:         if isinstance(pm, passmanagers.ModulePassManager):
    2:             self._populate_module_pm(pm)
   38:         elif isinstance(pm, passmanagers.FunctionPassManager):
   38:             self._populate_function_pm(pm)
               else:
                   raise TypeError(pm)
       
    1:     def _dispose(self):
   40:         self._capi.LLVMPY_PassManagerBuilderDispose(self)
       
       
       # ============================================================================
       # FFI
       
    1: ffi.lib.LLVMPY_PassManagerBuilderCreate.restype = ffi.LLVMPassManagerBuilderRef
       
    1: ffi.lib.LLVMPY_PassManagerBuilderDispose.argtypes = [
    1:     ffi.LLVMPassManagerBuilderRef,
       ]
       
    1: ffi.lib.LLVMPY_PassManagerBuilderPopulateModulePassManager.argtypes = [
    1:     ffi.LLVMPassManagerBuilderRef,
    1:     ffi.LLVMPassManagerRef,
       ]
       
    1: ffi.lib.LLVMPY_PassManagerBuilderPopulateFunctionPassManager.argtypes = [
    1:     ffi.LLVMPassManagerBuilderRef,
    1:     ffi.LLVMPassManagerRef,
       ]
       
       # Unsigned int PassManagerBuilder properties
       
    5: for _func in (ffi.lib.LLVMPY_PassManagerBuilderSetOptLevel,
    1:               ffi.lib.LLVMPY_PassManagerBuilderSetSizeLevel,
    1:               ffi.lib.LLVMPY_PassManagerBuilderUseInlinerWithThreshold,
                     ):
    3:     _func.argtypes = [ffi.LLVMPassManagerBuilderRef, c_uint]
       
    4: for _func in (ffi.lib.LLVMPY_PassManagerBuilderGetOptLevel,
    1:               ffi.lib.LLVMPY_PassManagerBuilderGetSizeLevel,
                     ):
    2:     _func.argtypes = [ffi.LLVMPassManagerBuilderRef]
    2:     _func.restype = c_uint
       
       # Boolean PassManagerBuilder properties
       
    5: for _func in (ffi.lib.LLVMPY_PassManagerBuilderSetDisableUnrollLoops,
    1:               ffi.lib.LLVMPY_PassManagerBuilderSetLoopVectorize,
    1:               ffi.lib.LLVMPY_PassManagerBuilderSetSLPVectorize,
                     ):
    3:     _func.argtypes = [ffi.LLVMPassManagerBuilderRef, c_bool]
       
    5: for _func in (ffi.lib.LLVMPY_PassManagerBuilderGetDisableUnrollLoops,
    1:               ffi.lib.LLVMPY_PassManagerBuilderGetLoopVectorize,
    1:               ffi.lib.LLVMPY_PassManagerBuilderGetSLPVectorize,
                     ):
    3:     _func.argtypes = [ffi.LLVMPassManagerBuilderRef]
    3:     _func.restype = c_bool
