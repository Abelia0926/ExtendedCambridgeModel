    1: import pymgipsim.VirtualPatient.Models as Models
    1: from pymgipsim.InputGeneration.parsers import generate_input_parser
    1: from pymgipsim.InputGeneration.generate_carb_signal import generate_carb_events
    1: from pymgipsim.InputGeneration.carb_energy_settings import generate_carb_absorption
    1: from pymgipsim.InputGeneration.meal_energy_content import calculate_daily_energy_intake, estimate_g_cho_from_energy_intake
    1: from pymgipsim.InputGeneration.activity_settings import generate_activities
    1: from pymgipsim.InputGeneration.energy_expenditure_settings import generate_energy_expenditure
    1: from pymgipsim.InputGeneration.insulin_settings import generate_basal_insulin, generate_bolus_insulin
    1: from pymgipsim.InputGeneration.heart_rate_settings import generate_heart_rate
    1: from pymgipsim.InputGeneration.generate_multiscale_inputs import generate_multiscale_inputs, generate_bodyweight_events
       
    1: from pymgipsim.Utilities.paths import default_settings_path, results_path
    1: from pymgipsim.Utilities.Scenario import scenario, inputs, input_generation, load_scenario, save_scenario
    1: from pymgipsim.generate_settings import generate_simulation_settings_main
    1: from pymgipsim.Settings.parser import generate_settings_parser
    1: from pymgipsim.VirtualPatient.parser import generate_virtual_subjects_parser
    1: from pymgipsim.Utilities import simulation_folder
       
    1: from pymgipsim.generate_subjects import generate_virtual_subjects_main
    1: from pymgipsim.InputGeneration.carb_energy_settings import make_carb_settings
       
    1: import argparse, json, pprint
    1: from dataclasses import asdict
    1: from pymgipsim.Controllers.parser import controller_args_to_scenario
    1: import os
       
       
    1: def generate_inputs_main(scenario_instance: scenario, args: argparse.Namespace, results_folder_path: str) -> argparse.Namespace:
       
    1:     if not args.no_print:
    1:         print(f">>>>> Generating Input Signals")
       
    1:     if scenario_instance.settings.simulator_name == "MultiScaleSolver":
               multi_scale_input_generation = input_generation(
                   fraction_cho_intake=args.fraction_cho_intake,
                   fraction_cho_as_snack=args.fraction_cho_as_snack,
                   net_calorie_balance=args.net_calorie_balance
               )
               scenario_instance.input_generation.fraction_cho_intake = multi_scale_input_generation.fraction_cho_intake
               scenario_instance.input_generation.fraction_cho_as_snack = multi_scale_input_generation.fraction_cho_as_snack
               scenario_instance.input_generation.net_calorie_balance = multi_scale_input_generation.net_calorie_balance
               scenario_instance.inputs = inputs()
               """ Update the grams of carbs """
               calculate_daily_energy_intake(scenario_instance, args)
               estimate_g_cho_from_energy_intake(scenario_instance, args)
       
               """ Calculate the multiscale inputs """
       
    1:     controller_args_to_scenario(scenario_instance, args)
    1:     make_carb_settings(scenario_instance, args)
       
    1:     scenario_instance.inputs = inputs()
    1:     scenario_instance.inputs.meal_carb, scenario_instance.inputs.snack_carb = generate_carb_events(scenario_instance, args)
       
    1:     match scenario_instance.patient.model.name:
    1:         case Models.T1DM.IVP.Model.name:
                   scenario_instance.inputs.bolus_insulin = generate_bolus_insulin(scenario_instance, args)
                   scenario_instance.inputs.basal_insulin = generate_basal_insulin(scenario_instance, args)
                   scenario_instance.inputs.taud = generate_carb_absorption(scenario_instance, args)
               
    1:         case Models.T1DM.ExtHovorka.Model.name:
    1:             scenario_instance.inputs.bolus_insulin = generate_bolus_insulin(scenario_instance, args)
    1:             scenario_instance.inputs.basal_insulin = generate_basal_insulin(scenario_instance, args)
    1:             scenario_instance.inputs.running_speed, scenario_instance.inputs.running_incline,\
    2:             scenario_instance.inputs.cycling_power = generate_activities(scenario_instance, args)
    1:             scenario_instance.inputs.heart_rate, scenario_instance.inputs.METACSM = generate_heart_rate(scenario_instance, args)
    1:             scenario_instance.inputs.energy_expenditure = generate_energy_expenditure(scenario_instance, args)
       
    1:     if scenario_instance.settings.simulator_name == "MultiScaleSolver":
               generate_multiscale_inputs(scenario_instance)
       
    1:     save_scenario(os.path.join(results_folder_path, "simulation_settings.json"), asdict(scenario_instance))
       
    1:     return scenario_instance
       
       
    1: if __name__ == '__main__':
       
           with open(os.path.join(default_settings_path, "scenario_default.json"), "r") as f: #
               default_scenario = scenario(**json.load(f))
           f.close()
       
           """ Define Results Path """
           _, _, _, results_folder_path = simulation_folder.create_simulation_results_folder(results_path)
       
           """ Parse Arguments  """
           input_parser = generate_input_parser(parent_parser=[generate_settings_parser(add_help = False),
                                                               generate_virtual_subjects_parser(add_help = False)]
                                               )
           
           args = input_parser.parse_args()
       
           settings_file = generate_simulation_settings_main(scenario_instance=default_scenario, args=args, results_folder_path=results_folder_path)
       
           settings_file = generate_virtual_subjects_main(scenario_instance=settings_file, args=args, results_folder_path=results_folder_path)
       
           settings_file = generate_inputs_main(scenario_instance = settings_file, args = args, results_folder_path=results_folder_path)
       
           if args.verbose:
               pprint.PrettyPrinter(indent=1).pprint(settings_file)
