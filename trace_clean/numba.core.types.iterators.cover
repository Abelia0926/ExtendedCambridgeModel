    1: from .common import SimpleIterableType, SimpleIteratorType
    1: from ..errors import TypingError
       
       
    2: class RangeType(SimpleIterableType):
       
    1:     def __init__(self, dtype):
    3:         self.dtype = dtype
    3:         name = "range_state_%s" % (dtype,)
    3:         super(SimpleIterableType, self).__init__(name)
    3:         self._iterator_type = RangeIteratorType(self.dtype)
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, RangeType):
                   dtype = typingctx.unify_pairs(self.dtype, other.dtype)
                   if dtype is not None:
                       return RangeType(dtype)
       
       
    2: class RangeIteratorType(SimpleIteratorType):
       
    7:     def __init__(self, dtype):
    6:         name = "range_iter_%s" % (dtype,)
    6:         super(SimpleIteratorType, self).__init__(name)
    6:         self._yield_type = dtype
       
    1:     def unify(self, typingctx, other):
               if isinstance(other, RangeIteratorType):
                   dtype = typingctx.unify_pairs(self.yield_type, other.yield_type)
                   if dtype is not None:
                       return RangeIteratorType(dtype)
       
       
    2: class Generator(SimpleIteratorType):
    1:     """
           Type class for Numba-compiled generator objects.
           """
       
    1:     def __init__(self, gen_func, yield_type, arg_types, state_types,
                        has_finalizer):
               self.gen_func = gen_func
               self.arg_types = tuple(arg_types)
               self.state_types = tuple(state_types)
               self.has_finalizer = has_finalizer
               name = "%s generator(func=%s, args=%s, has_finalizer=%s)" % (
                   yield_type, self.gen_func, self.arg_types,
                   self.has_finalizer)
               super(Generator, self).__init__(name, yield_type)
       
    2:     @property
    2:     def key(self):
               return (self.gen_func, self.arg_types, self.yield_type,
                       self.has_finalizer, self.state_types)
       
       
    2: class EnumerateType(SimpleIteratorType):
    1:     """
           Type class for `enumerate` objects.
           Type instances are parametered with the underlying source type.
           """
       
    1:     def __init__(self, iterable_type):
               from numba.core.types import Tuple, intp
               self.source_type = iterable_type.iterator_type
               yield_type = Tuple([intp, self.source_type.yield_type])
               name = 'enumerate(%s)' % (self.source_type)
               super(EnumerateType, self).__init__(name, yield_type)
       
    2:     @property
    2:     def key(self):
               return self.source_type
       
       
    2: class ZipType(SimpleIteratorType):
    1:     """
           Type class for `zip` objects.
           Type instances are parametered with the underlying source types.
           """
       
    1:     def __init__(self, iterable_types):
               from numba.core.types import Tuple
               self.source_types = tuple(tp.iterator_type for tp in iterable_types)
               yield_type = Tuple([tp.yield_type for tp in self.source_types])
               name = 'zip(%s)' % ', '.join(str(tp) for tp in self.source_types)
               super(ZipType, self).__init__(name, yield_type)
       
    2:     @property
    2:     def key(self):
               return self.source_types
       
       
    2: class ArrayIterator(SimpleIteratorType):
    1:     """
           Type class for iterators of array and buffer objects.
           """
       
    1:     def __init__(self, array_type):
               self.array_type = array_type
               name = "iter(%s)" % (self.array_type,)
               nd = array_type.ndim
               if nd == 0:
                   raise TypingError("iteration over a 0-d array")
               elif nd == 1:
                   yield_type = array_type.dtype
               else:
                   # iteration semantics leads to A order layout
                   yield_type = array_type.copy(ndim=array_type.ndim - 1, layout='A')
               super(ArrayIterator, self).__init__(name, yield_type)
