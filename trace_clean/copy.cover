    1: """Generic (shallow and deep) copying operations.
       
       Interface summary:
       
               import copy
       
               x = copy.copy(y)        # make a shallow copy of y
               x = copy.deepcopy(y)    # make a deep copy of y
       
       For module specific errors, copy.Error is raised.
       
       The difference between shallow and deep copying is only relevant for
       compound objects (objects that contain other objects, like lists or
       class instances).
       
       - A shallow copy constructs a new compound object and then (to the
         extent possible) inserts *the same objects* into it that the
         original contains.
       
       - A deep copy constructs a new compound object and then, recursively,
         inserts *copies* into it of the objects found in the original.
       
       Two problems often exist with deep copy operations that don't exist
       with shallow copy operations:
       
        a) recursive objects (compound objects that, directly or indirectly,
           contain a reference to themselves) may cause a recursive loop
       
        b) because deep copy copies *everything* it may copy too much, e.g.
           administrative data structures that should be shared even between
           copies
       
       Python's deep copy operation avoids these problems by:
       
        a) keeping a table of objects already copied during the current
           copying pass
       
        b) letting user-defined classes override the copying operation or the
           set of components copied
       
       This version does not copy types like module, class, function, method,
       nor stack trace, stack frame, nor file, socket, window, nor any
       similar types.
       
       Classes can use the same interfaces to control copying that they use
       to control pickling: they can define methods called __getinitargs__(),
       __getstate__() and __setstate__().  See the documentation for module
       "pickle" for information on these methods.
       """
       
    1: import types
    1: import weakref
    1: from copyreg import dispatch_table
       
    2: class Error(Exception):
    1:     pass
    1: error = Error   # backward compatibility
       
    1: try:
    1:     from org.python.core import PyStringMap
    1: except ImportError:
    1:     PyStringMap = None
       
    1: __all__ = ["Error", "copy", "deepcopy"]
       
    1: def copy(x):
           """Shallow copy operation on arbitrary Python objects.
       
           See the module's __doc__ string for more info.
           """
       
33275:     cls = type(x)
       
33275:     copier = _copy_dispatch.get(cls)
33275:     if copier:
24220:         return copier(x)
       
 9055:     if issubclass(cls, type):
               # treat it as a regular class:
               return _copy_immutable(x)
       
 9055:     copier = getattr(cls, "__copy__", None)
 9055:     if copier is not None:
   48:         return copier(x)
       
 9007:     reductor = dispatch_table.get(cls)
 9007:     if reductor is not None:
               rv = reductor(x)
           else:
 9007:         reductor = getattr(x, "__reduce_ex__", None)
 9007:         if reductor is not None:
 9007:             rv = reductor(4)
               else:
                   reductor = getattr(x, "__reduce__", None)
                   if reductor:
                       rv = reductor()
                   else:
                       raise Error("un(shallow)copyable object of type %s" % cls)
       
 9007:     if isinstance(rv, str):
               return x
 9007:     return _reconstruct(x, None, *rv)
       
       
    1: _copy_dispatch = d = {}
       
    1: def _copy_immutable(x):
20487:     return x
   20: for t in (type(None), int, float, bool, complex, str, tuple,
    1:           bytes, frozenset, type, range, slice, property,
    1:           types.BuiltinFunctionType, type(Ellipsis), type(NotImplemented),
    1:           types.FunctionType, weakref.ref):
   18:     d[t] = _copy_immutable
    1: t = getattr(types, "CodeType", None)
    1: if t is not None:
    1:     d[t] = _copy_immutable
       
    1: d[list] = list.copy
    1: d[dict] = dict.copy
    1: d[set] = set.copy
    1: d[bytearray] = bytearray.copy
       
    1: if PyStringMap is not None:
           d[PyStringMap] = PyStringMap.copy
       
    1: del d, t
       
    1: def deepcopy(x, memo=None, _nil=[]):
           """Deep copy operation on arbitrary Python objects.
       
           See the module's __doc__ string for more info.
           """
       
53159:     if memo is None:
 9864:         memo = {}
       
53159:     d = id(x)
53159:     y = memo.get(d, _nil)
53159:     if y is not _nil:
  610:         return y
       
52549:     cls = type(x)
       
52549:     copier = _deepcopy_dispatch.get(cls)
52549:     if copier is not None:
46653:         y = copier(x, memo)
           else:
 5896:         if issubclass(cls, type):
 1220:             y = _deepcopy_atomic(x, memo)
               else:
 4676:             copier = getattr(x, "__deepcopy__", None)
 4676:             if copier is not None:
 1626:                 y = copier(memo)
                   else:
 3050:                 reductor = dispatch_table.get(cls)
 3050:                 if reductor:
                           rv = reductor(x)
                       else:
 3050:                     reductor = getattr(x, "__reduce_ex__", None)
 3050:                     if reductor is not None:
 3050:                         rv = reductor(4)
                           else:
                               reductor = getattr(x, "__reduce__", None)
                               if reductor:
                                   rv = reductor()
                               else:
                                   raise Error(
                                       "un(deep)copyable object of type %s" % cls)
 3050:                 if isinstance(rv, str):
                           y = x
                       else:
 3050:                     y = _reconstruct(x, memo, *rv)
       
           # If is its own copy, don't memoize.
52549:     if y is not x:
 9022:         memo[d] = y
 9022:         _keep_alive(x, memo) # Make sure x lives at least as long as d
52549:     return y
       
    1: _deepcopy_dispatch = d = {}
       
    1: def _deepcopy_atomic(x, memo):
42307:     return x
    1: d[type(None)] = _deepcopy_atomic
    1: d[type(Ellipsis)] = _deepcopy_atomic
    1: d[type(NotImplemented)] = _deepcopy_atomic
    1: d[int] = _deepcopy_atomic
    1: d[float] = _deepcopy_atomic
    1: d[bool] = _deepcopy_atomic
    1: d[complex] = _deepcopy_atomic
    1: d[bytes] = _deepcopy_atomic
    1: d[str] = _deepcopy_atomic
    1: d[types.CodeType] = _deepcopy_atomic
    1: d[type] = _deepcopy_atomic
    1: d[range] = _deepcopy_atomic
    1: d[types.BuiltinFunctionType] = _deepcopy_atomic
    1: d[types.FunctionType] = _deepcopy_atomic
    1: d[weakref.ref] = _deepcopy_atomic
    1: d[property] = _deepcopy_atomic
       
    1: def _deepcopy_list(x, memo, deepcopy=deepcopy):
 2200:     y = []
 2200:     memo[id(x)] = y
 2200:     append = y.append
 2367:     for a in x:
  167:         append(deepcopy(a, memo))
 2200:     return y
    1: d[list] = _deepcopy_list
       
    1: def _deepcopy_tuple(x, memo, deepcopy=deepcopy):
           y = [deepcopy(a, memo) for a in x]
           # We're not going to put the tuple in the memo, but it's still important we
           # check for it, in case the tuple contains recursive mutable structures.
           try:
               return memo[id(x)]
           except KeyError:
               pass
           for k, j in zip(x, y):
               if k is not j:
                   y = tuple(y)
                   break
           else:
               y = x
           return y
    1: d[tuple] = _deepcopy_tuple
       
    1: def _deepcopy_dict(x, memo, deepcopy=deepcopy):
 2756:     y = {}
 2756:     memo[id(x)] = y
20660:     for key, value in x.items():
17904:         y[deepcopy(key, memo)] = deepcopy(value, memo)
 2756:     return y
    1: d[dict] = _deepcopy_dict
    1: if PyStringMap is not None:
           d[PyStringMap] = _deepcopy_dict
       
    1: def _deepcopy_method(x, memo): # Copy instance methods
  610:     return type(x)(x.__func__, deepcopy(x.__self__, memo))
    1: d[types.MethodType] = _deepcopy_method
       
    1: del d
       
    1: def _keep_alive(x, memo):
           """Keeps a reference to the object x in the memo.
       
           Because we remember objects by their id, we have
           to assure that possibly temporary objects are kept
           alive by referencing them.
           We store a reference at the id of the memo, which should
           normally not be used unless someone tries to deepcopy
           the memo itself...
           """
 9022:     try:
 9022:         memo[id(memo)].append(x)
  769:     except KeyError:
               # aha, this is the first one :-)
  769:         memo[id(memo)]=[x]
       
    2: def _reconstruct(x, memo, func, args,
    1:                  state=None, listiter=None, dictiter=None,
    1:                  *, deepcopy=deepcopy):
12057:     deep = memo is not None
12057:     if deep and args:
10370:         args = (deepcopy(arg, memo) for arg in args)
12057:     y = func(*args)
12057:     if deep:
 3050:         memo[id(x)] = y
       
12057:     if state is not None:
10837:         if deep:
 1830:             state = deepcopy(state, memo)
10837:         if hasattr(y, '__setstate__'):
  610:             y.__setstate__(state)
               else:
10227:             if isinstance(state, tuple) and len(state) == 2:
                       state, slotstate = state
                   else:
10227:                 slotstate = None
10227:             if state is not None:
10227:                 y.__dict__.update(state)
10227:             if slotstate is not None:
                       for key, value in slotstate.items():
                           setattr(y, key, value)
       
12057:     if listiter is not None:
               if deep:
                   for item in listiter:
                       item = deepcopy(item, memo)
                       y.append(item)
               else:
                   for item in listiter:
                       y.append(item)
12057:     if dictiter is not None:
               if deep:
                   for key, value in dictiter:
                       key = deepcopy(key, memo)
                       value = deepcopy(value, memo)
                       y[key] = value
               else:
                   for key, value in dictiter:
                       y[key] = value
12057:     return y
       
    1: del types, weakref, PyStringMap
