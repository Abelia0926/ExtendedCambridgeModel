    1: """
       The legend module defines the Legend class, which is responsible for
       drawing legends associated with Axes and/or figures.
       
       .. important::
       
           It is unlikely that you would ever create a Legend instance manually.
           Most users would normally create a legend via the `~.Axes.legend`
           function. For more details on legends there is also a :ref:`legend guide
           <legend_guide>`.
       
       The `Legend` class is a container of legend handles and legend texts.
       
       The legend handler map specifies how to create legend handles from artists
       (lines, patches, etc.) in the Axes or figures. Default legend handlers are
       defined in the :mod:`~matplotlib.legend_handler` module. While not all artist
       types are covered by the default legend handlers, custom legend handlers can be
       defined to support arbitrary objects.
       
       See the :ref`<legend_guide>` for more
       information.
       """
       
    1: import itertools
    1: import logging
    1: import numbers
    1: import time
       
    1: import numpy as np
       
    1: import matplotlib as mpl
    1: from matplotlib import _api, _docstring, cbook, colors, offsetbox
    1: from matplotlib.artist import Artist, allow_rasterization
    1: from matplotlib.cbook import silent_list
    1: from matplotlib.font_manager import FontProperties
    1: from matplotlib.lines import Line2D
    1: from matplotlib.patches import (Patch, Rectangle, Shadow, FancyBboxPatch,
                                       StepPatch)
    1: from matplotlib.collections import (
           Collection, CircleCollection, LineCollection, PathCollection,
           PolyCollection, RegularPolyCollection)
    1: from matplotlib.text import Text
    1: from matplotlib.transforms import Bbox, BboxBase, TransformedBbox
    1: from matplotlib.transforms import BboxTransformTo, BboxTransformFrom
    1: from matplotlib.offsetbox import (
           AnchoredOffsetbox, DraggableOffsetBox,
           HPacker, VPacker,
           DrawingArea, TextArea,
       )
    1: from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer
    1: from . import legend_handler
       
       
    2: class DraggableLegend(DraggableOffsetBox):
    1:     def __init__(self, legend, use_blit=False, update="loc"):
               """
               Wrapper around a `.Legend` to support mouse dragging.
       
               Parameters
               ----------
               legend : `.Legend`
                   The `.Legend` instance to wrap.
               use_blit : bool, optional
                   Use blitting for faster image composition. For details see
                   :ref:`func-animation`.
               update : {'loc', 'bbox'}, optional
                   If "loc", update the *loc* parameter of the legend upon finalizing.
                   If "bbox", update the *bbox_to_anchor* parameter.
               """
               self.legend = legend
       
               _api.check_in_list(["loc", "bbox"], update=update)
               self._update = update
       
               super().__init__(legend, legend._legend_box, use_blit=use_blit)
       
    1:     def finalize_offset(self):
               if self._update == "loc":
                   self._update_loc(self.get_loc_in_canvas())
               elif self._update == "bbox":
                   self._update_bbox_to_anchor(self.get_loc_in_canvas())
       
    1:     def _update_loc(self, loc_in_canvas):
               bbox = self.legend.get_bbox_to_anchor()
               # if bbox has zero width or height, the transformation is
               # ill-defined. Fall back to the default bbox_to_anchor.
               if bbox.width == 0 or bbox.height == 0:
                   self.legend.set_bbox_to_anchor(None)
                   bbox = self.legend.get_bbox_to_anchor()
               _bbox_transform = BboxTransformFrom(bbox)
               self.legend._loc = tuple(_bbox_transform.transform(loc_in_canvas))
       
    1:     def _update_bbox_to_anchor(self, loc_in_canvas):
               loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)
               self.legend.set_bbox_to_anchor(loc_in_bbox)
       
       
    1: _legend_kw_doc_base = """
       bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats
           Box that is used to position the legend in conjunction with *loc*.
           Defaults to ``axes.bbox`` (if called as a method to `.Axes.legend`) or
           ``figure.bbox`` (if ``figure.legend``).  This argument allows arbitrary
           placement of the legend.
       
           Bbox coordinates are interpreted in the coordinate system given by
           *bbox_transform*, with the default transform
           Axes or Figure coordinates, depending on which ``legend`` is called.
       
           If a 4-tuple or `.BboxBase` is given, then it specifies the bbox
           ``(x, y, width, height)`` that the legend is placed in.
           To put the legend in the best location in the bottom right
           quadrant of the Axes (or figure)::
       
               loc='best', bbox_to_anchor=(0.5, 0., 0.5, 0.5)
       
           A 2-tuple ``(x, y)`` places the corner of the legend specified by *loc* at
           x, y.  For example, to put the legend's upper right-hand corner in the
           center of the Axes (or figure) the following keywords can be used::
       
               loc='upper right', bbox_to_anchor=(0.5, 0.5)
       
       ncols : int, default: 1
           The number of columns that the legend has.
       
           For backward compatibility, the spelling *ncol* is also supported
           but it is discouraged. If both are given, *ncols* takes precedence.
       
       prop : None or `~matplotlib.font_manager.FontProperties` or dict
           The font properties of the legend. If None (default), the current
           :data:`matplotlib.rcParams` will be used.
       
       fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \
       'x-large', 'xx-large'}
           The font size of the legend. If the value is numeric the size will be the
           absolute font size in points. String values are relative to the current
           default font size. This argument is only used if *prop* is not specified.
       
       labelcolor : str or list, default: :rc:`legend.labelcolor`
           The color of the text in the legend. Either a valid color string
           (for example, 'red'), or a list of color strings. The labelcolor can
           also be made to match the color of the line or marker using 'linecolor',
           'markerfacecolor' (or 'mfc'), or 'markeredgecolor' (or 'mec').
       
           Labelcolor can be set globally using :rc:`legend.labelcolor`. If None,
           use :rc:`text.color`.
       
       numpoints : int, default: :rc:`legend.numpoints`
           The number of marker points in the legend when creating a legend
           entry for a `.Line2D` (line).
       
       scatterpoints : int, default: :rc:`legend.scatterpoints`
           The number of marker points in the legend when creating
           a legend entry for a `.PathCollection` (scatter plot).
       
       scatteryoffsets : iterable of floats, default: ``[0.375, 0.5, 0.3125]``
           The vertical offset (relative to the font size) for the markers
           created for a scatter plot legend entry. 0.0 is at the base the
           legend text, and 1.0 is at the top. To draw all markers at the
           same height, set to ``[0.5]``.
       
       markerscale : float, default: :rc:`legend.markerscale`
           The relative size of legend markers compared to the originally drawn ones.
       
       markerfirst : bool, default: True
           If *True*, legend marker is placed to the left of the legend label.
           If *False*, legend marker is placed to the right of the legend label.
       
       reverse : bool, default: False
           If *True*, the legend labels are displayed in reverse order from the input.
           If *False*, the legend labels are displayed in the same order as the input.
       
           .. versionadded:: 3.7
       
       frameon : bool, default: :rc:`legend.frameon`
           Whether the legend should be drawn on a patch (frame).
       
       fancybox : bool, default: :rc:`legend.fancybox`
           Whether round edges should be enabled around the `.FancyBboxPatch` which
           makes up the legend's background.
       
       shadow : None, bool or dict, default: :rc:`legend.shadow`
           Whether to draw a shadow behind the legend.
           The shadow can be configured using `.Patch` keywords.
           Customization via :rc:`legend.shadow` is currently not supported.
       
       framealpha : float, default: :rc:`legend.framealpha`
           The alpha transparency of the legend's background.
           If *shadow* is activated and *framealpha* is ``None``, the default value is
           ignored.
       
       facecolor : "inherit" or color, default: :rc:`legend.facecolor`
           The legend's background color.
           If ``"inherit"``, use :rc:`axes.facecolor`.
       
       edgecolor : "inherit" or color, default: :rc:`legend.edgecolor`
           The legend's background patch edge color.
           If ``"inherit"``, use :rc:`axes.edgecolor`.
       
       mode : {"expand", None}
           If *mode* is set to ``"expand"`` the legend will be horizontally
           expanded to fill the Axes area (or *bbox_to_anchor* if defines
           the legend's size).
       
       bbox_transform : None or `~matplotlib.transforms.Transform`
           The transform for the bounding box (*bbox_to_anchor*). For a value
           of ``None`` (default) the Axes'
           :data:`~matplotlib.axes.Axes.transAxes` transform will be used.
       
       title : str or None
           The legend's title. Default is no title (``None``).
       
       title_fontproperties : None or `~matplotlib.font_manager.FontProperties` or dict
           The font properties of the legend's title. If None (default), the
           *title_fontsize* argument will be used if present; if *title_fontsize* is
           also None, the current :rc:`legend.title_fontsize` will be used.
       
       title_fontsize : int or {'xx-small', 'x-small', 'small', 'medium', 'large', \
       'x-large', 'xx-large'}, default: :rc:`legend.title_fontsize`
           The font size of the legend's title.
           Note: This cannot be combined with *title_fontproperties*. If you want
           to set the fontsize alongside other font properties, use the *size*
           parameter in *title_fontproperties*.
       
       alignment : {'center', 'left', 'right'}, default: 'center'
           The alignment of the legend title and the box of entries. The entries
           are aligned as a single block, so that markers always lined up.
       
       borderpad : float, default: :rc:`legend.borderpad`
           The fractional whitespace inside the legend border, in font-size units.
       
       labelspacing : float, default: :rc:`legend.labelspacing`
           The vertical space between the legend entries, in font-size units.
       
       handlelength : float, default: :rc:`legend.handlelength`
           The length of the legend handles, in font-size units.
       
       handleheight : float, default: :rc:`legend.handleheight`
           The height of the legend handles, in font-size units.
       
       handletextpad : float, default: :rc:`legend.handletextpad`
           The pad between the legend handle and text, in font-size units.
       
       borderaxespad : float, default: :rc:`legend.borderaxespad`
           The pad between the Axes and legend border, in font-size units.
       
       columnspacing : float, default: :rc:`legend.columnspacing`
           The spacing between columns, in font-size units.
       
       handler_map : dict or None
           The custom dictionary mapping instances or types to a legend
           handler. This *handler_map* updates the default handler map
           found at `matplotlib.legend.Legend.get_legend_handler_map`.
       
       draggable : bool, default: False
           Whether the legend can be dragged with the mouse.
       """
       
    1: _loc_doc_base = """
       loc : str or pair of floats, default: {default}
           The location of the legend.
       
           The strings ``'upper left'``, ``'upper right'``, ``'lower left'``,
           ``'lower right'`` place the legend at the corresponding corner of the
           {parent}.
       
           The strings ``'upper center'``, ``'lower center'``, ``'center left'``,
           ``'center right'`` place the legend at the center of the corresponding edge
           of the {parent}.
       
           The string ``'center'`` places the legend at the center of the {parent}.
       {best}
           The location can also be a 2-tuple giving the coordinates of the lower-left
           corner of the legend in {parent} coordinates (in which case *bbox_to_anchor*
           will be ignored).
       
           For back-compatibility, ``'center right'`` (but no other location) can also
           be spelled ``'right'``, and each "string" location can also be given as a
           numeric value:
       
           ==================   =============
           Location String      Location Code
           ==================   =============
           'best' (Axes only)   0
           'upper right'        1
           'upper left'         2
           'lower left'         3
           'lower right'        4
           'right'              5
           'center left'        6
           'center right'       7
           'lower center'       8
           'upper center'       9
           'center'             10
           ==================   =============
           {outside}"""
       
    1: _loc_doc_best = """
           The string ``'best'`` places the legend at the location, among the nine
           locations defined so far, with the minimum overlap with other drawn
           artists.  This option can be quite slow for plots with large amounts of
           data; your plotting speed may benefit from providing a specific location.
       """
       
    1: _legend_kw_axes_st = (
    3:     _loc_doc_base.format(parent='axes', default=':rc:`legend.loc`',
    1:                          best=_loc_doc_best, outside='') +
    1:     _legend_kw_doc_base)
    1: _docstring.interpd.register(_legend_kw_axes=_legend_kw_axes_st)
       
    1: _outside_doc = """
           If a figure is using the constrained layout manager, the string codes
           of the *loc* keyword argument can get better layout behaviour using the
           prefix 'outside'. There is ambiguity at the corners, so 'outside
           upper right' will make space for the legend above the rest of the
           axes in the layout, and 'outside right upper' will make space on the
           right side of the layout.  In addition to the values of *loc*
           listed above, we have 'outside right upper', 'outside right lower',
           'outside left upper', and 'outside left lower'.  See
           :ref:`legend_guide` for more details.
       """
       
    1: _legend_kw_figure_st = (
    3:     _loc_doc_base.format(parent='figure', default="'upper right'",
    1:                          best='', outside=_outside_doc) +
    1:     _legend_kw_doc_base)
    1: _docstring.interpd.register(_legend_kw_figure=_legend_kw_figure_st)
       
    1: _legend_kw_both_st = (
    3:     _loc_doc_base.format(parent='axes/figure',
    1:                          default=":rc:`legend.loc` for Axes, 'upper right' for Figure",
    1:                          best=_loc_doc_best, outside=_outside_doc) +
    1:     _legend_kw_doc_base)
    1: _docstring.interpd.register(_legend_kw_doc=_legend_kw_both_st)
       
    1: _legend_kw_set_loc_st = (
    2:     _loc_doc_base.format(parent='axes/figure',
    1:                          default=":rc:`legend.loc` for Axes, 'upper right' for Figure",
    1:                          best=_loc_doc_best, outside=_outside_doc))
    1: _docstring.interpd.register(_legend_kw_set_loc_doc=_legend_kw_set_loc_st)
       
       
    2: class Legend(Artist):
    1:     """
           Place a legend on the figure/axes.
           """
       
           # 'best' is only implemented for Axes legends
    1:     codes = {'best': 0, **AnchoredOffsetbox.codes}
    1:     zorder = 5
       
    1:     def __str__(self):
               return "Legend"
       
    2:     @_docstring.interpd
    2:     def __init__(
               self, parent, handles, labels,
               *,
    1:         loc=None,
    1:         numpoints=None,      # number of points in the legend line
    1:         markerscale=None,    # relative size of legend markers vs. original
    1:         markerfirst=True,    # left/right ordering of legend marker and label
    1:         reverse=False,       # reverse ordering of legend marker and label
    1:         scatterpoints=None,  # number of scatter points
    1:         scatteryoffsets=None,
    1:         prop=None,           # properties for the legend texts
    1:         fontsize=None,       # keyword to set font size directly
    1:         labelcolor=None,     # keyword to set the text color
       
               # spacing & pad defined as a fraction of the font-size
    1:         borderpad=None,      # whitespace inside the legend border
    1:         labelspacing=None,   # vertical space between the legend entries
    1:         handlelength=None,   # length of the legend handles
    1:         handleheight=None,   # height of the legend handles
    1:         handletextpad=None,  # pad between the legend handle and text
    1:         borderaxespad=None,  # pad between the Axes and legend border
    1:         columnspacing=None,  # spacing between columns
       
    1:         ncols=1,     # number of columns
    1:         mode=None,  # horizontal distribution of columns: None or "expand"
       
    1:         fancybox=None,  # True: fancy box, False: rounded box, None: rcParam
    1:         shadow=None,
    1:         title=None,           # legend title
    1:         title_fontsize=None,  # legend title font size
    1:         framealpha=None,      # set frame alpha
    1:         edgecolor=None,       # frame patch edgecolor
    1:         facecolor=None,       # frame patch facecolor
       
    1:         bbox_to_anchor=None,  # bbox to which the legend will be anchored
    1:         bbox_transform=None,  # transform for the bbox
    1:         frameon=None,         # draw frame
    1:         handler_map=None,
    1:         title_fontproperties=None,  # properties for the legend title
    1:         alignment="center",       # control the alignment within the legend box
    1:         ncol=1,  # synonym for ncols (backward compatibility)
    1:         draggable=False  # whether the legend can be dragged with the mouse
           ):
               """
               Parameters
               ----------
               parent : `~matplotlib.axes.Axes` or `.Figure`
                   The artist that contains the legend.
       
               handles : list of (`.Artist` or tuple of `.Artist`)
                   A list of Artists (lines, patches) to be added to the legend.
       
               labels : list of str
                   A list of labels to show next to the artists. The length of handles
                   and labels should be the same. If they are not, they are truncated
                   to the length of the shorter list.
       
               Other Parameters
               ----------------
               %(_legend_kw_doc)s
       
               Attributes
               ----------
               legend_handles
                   List of `.Artist` objects added as legend entries.
       
                   .. versionadded:: 3.7
               """
               # local import only to avoid circularity
    2:         from matplotlib.axes import Axes
    2:         from matplotlib.figure import FigureBase
       
    2:         super().__init__()
       
    2:         if prop is None:
    2:             self.prop = FontProperties(size=mpl._val_or_rc(fontsize, "legend.fontsize"))
               else:
                   self.prop = FontProperties._from_any(prop)
                   if isinstance(prop, dict) and "size" not in prop:
                       self.prop.set_size(mpl.rcParams["legend.fontsize"])
       
    2:         self._fontsize = self.prop.get_size_in_points()
       
    2:         self.texts = []
    2:         self.legend_handles = []
    2:         self._legend_title_box = None
       
               #: A dictionary with the extra handler mappings for this Legend
               #: instance.
    2:         self._custom_handler_map = handler_map
       
    2:         self.numpoints = mpl._val_or_rc(numpoints, 'legend.numpoints')
    2:         self.markerscale = mpl._val_or_rc(markerscale, 'legend.markerscale')
    2:         self.scatterpoints = mpl._val_or_rc(scatterpoints, 'legend.scatterpoints')
    2:         self.borderpad = mpl._val_or_rc(borderpad, 'legend.borderpad')
    2:         self.labelspacing = mpl._val_or_rc(labelspacing, 'legend.labelspacing')
    2:         self.handlelength = mpl._val_or_rc(handlelength, 'legend.handlelength')
    2:         self.handleheight = mpl._val_or_rc(handleheight, 'legend.handleheight')
    2:         self.handletextpad = mpl._val_or_rc(handletextpad, 'legend.handletextpad')
    2:         self.borderaxespad = mpl._val_or_rc(borderaxespad, 'legend.borderaxespad')
    2:         self.columnspacing = mpl._val_or_rc(columnspacing, 'legend.columnspacing')
    2:         self.shadow = mpl._val_or_rc(shadow, 'legend.shadow')
       
    2:         if reverse:
                   labels = [*reversed(labels)]
                   handles = [*reversed(handles)]
       
    2:         if len(handles) < 2:
    1:             ncols = 1
    2:         self._ncols = ncols if ncols != 1 else ncol
       
    2:         if self.numpoints <= 0:
                   raise ValueError("numpoints must be > 0; it was %d" % numpoints)
       
               # introduce y-offset for handles of the scatter plot
    2:         if scatteryoffsets is None:
    2:             self._scatteryoffsets = np.array([3. / 8., 4. / 8., 2.5 / 8.])
               else:
                   self._scatteryoffsets = np.asarray(scatteryoffsets)
    2:         reps = self.scatterpoints // len(self._scatteryoffsets) + 1
    6:         self._scatteryoffsets = np.tile(self._scatteryoffsets,
    4:                                         reps)[:self.scatterpoints]
       
               # _legend_box is a VPacker instance that contains all
               # legend items and will be initialized from _init_legend_box()
               # method.
    2:         self._legend_box = None
       
    2:         if isinstance(parent, Axes):
    2:             self.isaxes = True
    2:             self.axes = parent
    2:             self.set_figure(parent.get_figure(root=False))
               elif isinstance(parent, FigureBase):
                   self.isaxes = False
                   self.set_figure(parent)
               else:
                   raise TypeError(
                       "Legend needs either Axes or FigureBase as parent"
                   )
    2:         self.parent = parent
       
    2:         self._mode = mode
    2:         self.set_bbox_to_anchor(bbox_to_anchor, bbox_transform)
       
               # Figure out if self.shadow is valid
               # If shadow was None, rcParams loads False
               # So it shouldn't be None here
       
    2:         self._shadow_props = {'ox': 2, 'oy': -2}  # default location offsets
    2:         if isinstance(self.shadow, dict):
                   self._shadow_props.update(self.shadow)
                   self.shadow = True
    2:         elif self.shadow in (0, 1, True, False):
    2:             self.shadow = bool(self.shadow)
               else:
                   raise ValueError(
                       'Legend shadow must be a dict or bool, not '
                       f'{self.shadow!r} of type {type(self.shadow)}.'
                   )
       
               # We use FancyBboxPatch to draw a legend frame. The location
               # and size of the box will be updated during the drawing time.
       
    2:         facecolor = mpl._val_or_rc(facecolor, "legend.facecolor")
    2:         if facecolor == 'inherit':
    2:             facecolor = mpl.rcParams["axes.facecolor"]
       
    2:         edgecolor = mpl._val_or_rc(edgecolor, "legend.edgecolor")
    2:         if edgecolor == 'inherit':
                   edgecolor = mpl.rcParams["axes.edgecolor"]
       
    2:         fancybox = mpl._val_or_rc(fancybox, "legend.fancybox")
       
    4:         self.legendPatch = FancyBboxPatch(
    2:             xy=(0, 0), width=1, height=1,
    2:             facecolor=facecolor, edgecolor=edgecolor,
                   # If shadow is used, default to alpha=1 (#8943).
    2:             alpha=(framealpha if framealpha is not None
    2:                    else 1 if shadow
    2:                    else mpl.rcParams["legend.framealpha"]),
                   # The width and height of the legendPatch will be set (in draw())
                   # to the length that includes the padding. Thus we set pad=0 here.
    2:             boxstyle=("round,pad=0,rounding_size=0.2" if fancybox
                             else "square,pad=0"),
    2:             mutation_scale=self._fontsize,
    2:             snap=True,
    2:             visible=mpl._val_or_rc(frameon, "legend.frameon")
               )
    2:         self._set_artist_props(self.legendPatch)
       
    2:         _api.check_in_list(["center", "left", "right"], alignment=alignment)
    2:         self._alignment = alignment
       
               # init with null renderer
    2:         self._init_legend_box(handles, labels, markerfirst)
       
               # Set legend location
    2:         self.set_loc(loc)
       
               # figure out title font properties:
    2:         if title_fontsize is not None and title_fontproperties is not None:
                   raise ValueError(
                       "title_fontsize and title_fontproperties can't be specified "
                       "at the same time. Only use one of them. ")
    2:         title_prop_fp = FontProperties._from_any(title_fontproperties)
    2:         if isinstance(title_fontproperties, dict):
                   if "size" not in title_fontproperties:
                       title_fontsize = mpl.rcParams["legend.title_fontsize"]
                       title_prop_fp.set_size(title_fontsize)
    2:         elif title_fontsize is not None:
                   title_prop_fp.set_size(title_fontsize)
    2:         elif not isinstance(title_fontproperties, FontProperties):
    2:             title_fontsize = mpl.rcParams["legend.title_fontsize"]
    2:             title_prop_fp.set_size(title_fontsize)
       
    2:         self.set_title(title, prop=title_prop_fp)
       
    2:         self._draggable = None
    2:         self.set_draggable(state=draggable)
       
               # set the text color
       
    2:         color_getters = {  # getter function depends on line or patch
    2:             'linecolor':       ['get_color',           'get_facecolor'],
    2:             'markerfacecolor': ['get_markerfacecolor', 'get_facecolor'],
    2:             'mfc':             ['get_markerfacecolor', 'get_facecolor'],
    2:             'markeredgecolor': ['get_markeredgecolor', 'get_edgecolor'],
    2:             'mec':             ['get_markeredgecolor', 'get_edgecolor'],
               }
    2:         labelcolor = mpl._val_or_rc(labelcolor, 'legend.labelcolor')
    2:         if labelcolor is None:
                   labelcolor = mpl.rcParams['text.color']
    2:         if isinstance(labelcolor, str) and labelcolor in color_getters:
                   getter_names = color_getters[labelcolor]
                   for handle, text in zip(self.legend_handles, self.texts):
                       try:
                           if handle.get_array() is not None:
                               continue
                       except AttributeError:
                           pass
                       for getter_name in getter_names:
                           try:
                               color = getattr(handle, getter_name)()
                               if isinstance(color, np.ndarray):
                                   if (
                                           color.shape[0] == 1
                                           or np.isclose(color, color[0]).all()
                                   ):
                                       text.set_color(color[0])
                                   else:
                                       pass
                               else:
                                   text.set_color(color)
                               break
                           except AttributeError:
                               pass
    2:         elif cbook._str_equal(labelcolor, 'none'):
                   for text in self.texts:
                       text.set_color(labelcolor)
    2:         elif np.iterable(labelcolor):
    4:             for text, color in zip(self.texts,
    4:                                    itertools.cycle(
    2:                                        colors.to_rgba_array(labelcolor))):
                       text.set_color(color)
               else:
                   raise ValueError(f"Invalid labelcolor: {labelcolor!r}")
       
    1:     def _set_artist_props(self, a):
               """
               Set the boilerplate props for artists added to Axes.
               """
    7:         a.set_figure(self.get_figure(root=False))
    7:         if self.isaxes:
    7:             a.axes = self.axes
       
    7:         a.set_transform(self.get_transform())
       
    2:     @_docstring.interpd
    2:     def set_loc(self, loc=None):
               """
               Set the location of the legend.
       
               .. versionadded:: 3.8
       
               Parameters
               ----------
               %(_legend_kw_set_loc_doc)s
               """
    2:         loc0 = loc
    2:         self._loc_used_default = loc is None
    2:         if loc is None:
    1:             loc = mpl.rcParams["legend.loc"]
    1:             if not self.isaxes and loc in [0, 'best']:
                       loc = 'upper right'
       
    4:         type_err_message = ("loc must be string, coordinate tuple, or"
    2:                             f" an integer 0-10, not {loc!r}")
       
               # handle outside legends:
    2:         self._outside_loc = None
    2:         if isinstance(loc, str):
    2:             if loc.split()[0] == 'outside':
                       # strip outside:
                       loc = loc.split('outside ')[1]
                       # strip "center" at the beginning
                       self._outside_loc = loc.replace('center ', '')
                       # strip first
                       self._outside_loc = self._outside_loc.split()[0]
                       locs = loc.split()
                       if len(locs) > 1 and locs[0] in ('right', 'left'):
                           # locs doesn't accept "left upper", etc, so swap
                           if locs[0] != 'center':
                               locs = locs[::-1]
                           loc = locs[0] + ' ' + locs[1]
                   # check that loc is in acceptable strings
    2:             loc = _api.check_getitem(self.codes, loc=loc)
               elif np.iterable(loc):
                   # coerce iterable into tuple
                   loc = tuple(loc)
                   # validate the tuple represents Real coordinates
                   if len(loc) != 2 or not all(isinstance(e, numbers.Real) for e in loc):
                       raise ValueError(type_err_message)
               elif isinstance(loc, int):
                   # validate the integer represents a string numeric value
                   if loc < 0 or loc > 10:
                       raise ValueError(type_err_message)
               else:
                   # all other cases are invalid values of loc
                   raise ValueError(type_err_message)
       
    2:         if self.isaxes and self._outside_loc:
                   raise ValueError(
                       f"'outside' option for loc='{loc0}' keyword argument only "
                       "works for figure legends")
       
    2:         if not self.isaxes and loc == 0:
                   raise ValueError(
                       "Automatic legend placement (loc='best') not implemented for "
                       "figure legend")
       
    2:         tmp = self._loc_used_default
    2:         self._set_loc(loc)
    2:         self._loc_used_default = tmp  # ignore changes done by _set_loc
       
    1:     def _set_loc(self, loc):
               # find_offset function will be provided to _legend_box and
               # _legend_box will draw itself at the location of the return
               # value of the find_offset.
    2:         self._loc_used_default = False
    2:         self._loc_real = loc
    2:         self.stale = True
    2:         self._legend_box.set_offset(self._findoffset)
       
    1:     def set_ncols(self, ncols):
               """Set the number of columns."""
               self._ncols = ncols
       
    1:     def _get_loc(self):
   21:         return self._loc_real
       
    1:     _loc = property(_get_loc, _set_loc)
       
    1:     def _findoffset(self, width, height, xdescent, ydescent, renderer):
               """Helper function to locate the legend."""
       
   11:         if self._loc == 0:  # "best".
    6:             x, y = self._find_best_position(width, height, renderer)
    5:         elif self._loc in Legend.codes.values():  # Fixed location.
    5:             bbox = Bbox.from_bounds(0, 0, width, height)
   10:             x, y = self._get_anchored_bbox(self._loc, bbox,
    5:                                            self.get_bbox_to_anchor(),
    5:                                            renderer)
               else:  # Axes or figure coordinates.
                   fx, fy = self._loc
                   bbox = self.get_bbox_to_anchor()
                   x, y = bbox.x0 + bbox.width * fx, bbox.y0 + bbox.height * fy
       
   11:         return x + xdescent, y + ydescent
       
    2:     @allow_rasterization
    2:     def draw(self, renderer):
               # docstring inherited
    4:         if not self.get_visible():
                   return
       
    4:         renderer.open_group('legend', gid=self.get_gid())
       
    4:         fontsize = renderer.points_to_pixels(self._fontsize)
       
               # if mode == fill, set the width of the legend_box to the
               # width of the parent (minus pads)
    4:         if self._mode in ["expand"]:
                   pad = 2 * (self.borderaxespad + self.borderpad) * fontsize
                   self._legend_box.set_width(self.get_bbox_to_anchor().width - pad)
       
               # update the location and size of the legend. This needs to
               # be done in any case to clip the figure right.
    4:         bbox = self._legend_box.get_window_extent(renderer)
    4:         self.legendPatch.set_bounds(bbox.bounds)
    4:         self.legendPatch.set_mutation_scale(fontsize)
       
               # self.shadow is validated in __init__
               # So by here it is a bool and self._shadow_props contains any configs
       
    4:         if self.shadow:
                   Shadow(self.legendPatch, **self._shadow_props).draw(renderer)
       
    4:         self.legendPatch.draw(renderer)
    4:         self._legend_box.draw(renderer)
       
    4:         renderer.close_group('legend')
    4:         self.stale = False
       
           # _default_handler_map defines the default mapping between plot
           # elements and the legend handlers.
       
    1:     _default_handler_map = {
    1:         StemContainer: legend_handler.HandlerStem(),
    1:         ErrorbarContainer: legend_handler.HandlerErrorbar(),
    1:         Line2D: legend_handler.HandlerLine2D(),
    1:         Patch: legend_handler.HandlerPatch(),
    1:         StepPatch: legend_handler.HandlerStepPatch(),
    1:         LineCollection: legend_handler.HandlerLineCollection(),
    1:         RegularPolyCollection: legend_handler.HandlerRegularPolyCollection(),
    1:         CircleCollection: legend_handler.HandlerCircleCollection(),
    2:         BarContainer: legend_handler.HandlerPatch(
    1:             update_func=legend_handler.update_from_first_child),
    1:         tuple: legend_handler.HandlerTuple(),
    1:         PathCollection: legend_handler.HandlerPathCollection(),
    1:         PolyCollection: legend_handler.HandlerPolyCollection()
               }
       
           # (get|set|update)_default_handler_maps are public interfaces to
           # modify the default handler map.
       
    2:     @classmethod
    2:     def get_default_handler_map(cls):
               """Return the global default handler map, shared by all legends."""
    4:         return cls._default_handler_map
       
    2:     @classmethod
    2:     def set_default_handler_map(cls, handler_map):
               """Set the global default handler map, shared by all legends."""
               cls._default_handler_map = handler_map
       
    2:     @classmethod
    2:     def update_default_handler_map(cls, handler_map):
               """Update the global default handler map, shared by all legends."""
               cls._default_handler_map.update(handler_map)
       
    1:     def get_legend_handler_map(self):
               """Return this legend instance's handler map."""
    2:         default_handler_map = self.get_default_handler_map()
    4:         return ({**default_handler_map, **self._custom_handler_map}
    4:                 if self._custom_handler_map else default_handler_map)
       
    2:     @staticmethod
    2:     def get_legend_handler(legend_handler_map, orig_handle):
               """
               Return a legend handler from *legend_handler_map* that
               corresponds to *orig_handler*.
       
               *legend_handler_map* should be a dictionary object (that is
               returned by the get_legend_handler_map method).
       
               It first checks if the *orig_handle* itself is a key in the
               *legend_handler_map* and return the associated value.
               Otherwise, it checks for each of the classes in its
               method-resolution-order. If no matching key is found, it
               returns ``None``.
               """
   17:         try:
   17:             return legend_handler_map[orig_handle]
   17:         except (TypeError, KeyError):  # TypeError if unhashable.
   17:             pass
   42:         for handle_type in type(orig_handle).mro():
   42:             try:
   42:                 return legend_handler_map[handle_type]
   25:             except KeyError:
   25:                 pass
               return None
       
    1:     def _init_legend_box(self, handles, labels, markerfirst=True):
               """
               Initialize the legend_box. The legend_box is an instance of
               the OffsetBox, which is packed with legend handles and
               texts. Once packed, their location is calculated during the
               drawing time.
               """
       
    2:         fontsize = self._fontsize
       
               # legend_box is a HPacker, horizontally packed with columns.
               # Each column is a VPacker, vertically packed with legend items.
               # Each legend item is a HPacker packed with:
               # - handlebox: a DrawingArea which contains the legend handle.
               # - labelbox: a TextArea which contains the legend text.
       
    2:         text_list = []  # the list of text instances
    2:         handle_list = []  # the list of handle instances
    2:         handles_and_labels = []
       
               # The approximate height and descent of text. These values are
               # only used for plotting the legend handle.
    2:         descent = 0.35 * fontsize * (self.handleheight - 0.7)  # heuristic.
    2:         height = fontsize * self.handleheight - descent
               # each handle needs to be drawn inside a box of (x, y, w, h) =
               # (0, -descent, width, height).  And their coordinates should
               # be given in the display coordinates.
       
               # The transformation of each handle will be automatically set
               # to self.get_transform(). If the artist does not use its
               # default transform (e.g., Collections), you need to
               # manually set their transform to the self.get_transform().
    2:         legend_handler_map = self.get_legend_handler_map()
       
    7:         for orig_handle, label in zip(handles, labels):
    5:             handler = self.get_legend_handler(legend_handler_map, orig_handle)
    5:             if handler is None:
                       _api.warn_external(
                                    "Legend does not support handles for "
                                    f"{type(orig_handle).__name__} "
                                    "instances.\nA proxy artist may be used "
                                    "instead.\nSee: https://matplotlib.org/"
                                    "stable/users/explain/axes/legend_guide.html"
                                    "#controlling-the-legend-entries")
                       # No handle for this artist, so we just defer to None.
                       handle_list.append(None)
                   else:
   10:                 textbox = TextArea(label, multilinebaseline=True,
   10:                                    textprops=dict(
    5:                                        verticalalignment='baseline',
    5:                                        horizontalalignment='left',
    5:                                        fontproperties=self.prop))
   10:                 handlebox = DrawingArea(width=self.handlelength * fontsize,
    5:                                         height=height,
    5:                                         xdescent=0., ydescent=descent)
       
    5:                 text_list.append(textbox._text)
                       # Create the artist for the legend which represents the
                       # original artist/handle.
   10:                 handle_list.append(handler.legend_artist(self, orig_handle,
    5:                                                          fontsize, handlebox))
    5:                 handles_and_labels.append((handlebox, textbox))
       
    2:         columnbox = []
               # array_split splits n handles_and_labels into ncols columns, with the
               # first n%ncols columns having an extra entry.  filter(len, ...)
               # handles the case where n < ncols: the last ncols-n columns are empty
               # and get filtered out.
    5:         for handles_and_labels_column in filter(
    2:                 len, np.array_split(handles_and_labels, self._ncols)):
                   # pack handlebox and labelbox into itembox
   18:             itemboxes = [HPacker(pad=0,
    5:                                  sep=self.handletextpad * fontsize,
    5:                                  children=[h, t] if markerfirst else [t, h],
    5:                                  align="baseline")
    6:                          for h, t in handles_and_labels_column]
                   # pack columnbox
    1:             alignment = "baseline" if markerfirst else "right"
    2:             columnbox.append(VPacker(pad=0,
    1:                                      sep=self.labelspacing * fontsize,
    1:                                      align=alignment,
    1:                                      children=itemboxes))
       
    2:         mode = "expand" if self._mode == "expand" else "fixed"
    2:         sep = self.columnspacing * fontsize
    4:         self._legend_handle_box = HPacker(pad=0,
    2:                                           sep=sep, align="baseline",
    2:                                           mode=mode,
    2:                                           children=columnbox)
    2:         self._legend_title_box = TextArea("")
    4:         self._legend_box = VPacker(pad=self.borderpad * fontsize,
    2:                                    sep=self.labelspacing * fontsize,
    2:                                    align=self._alignment,
    4:                                    children=[self._legend_title_box,
    2:                                              self._legend_handle_box])
    2:         self._legend_box.set_figure(self.get_figure(root=False))
    2:         self._legend_box.axes = self.axes
    2:         self.texts = text_list
    2:         self.legend_handles = handle_list
       
    1:     def _auto_legend_data(self, renderer):
               """
               Return display coordinates for hit testing for "best" positioning.
       
               Returns
               -------
               bboxes
                   List of bounding boxes of all patches.
               lines
                   List of `.Path` corresponding to each line.
               offsets
                   List of (x, y) offsets of all collection.
               """
    6:         assert self.isaxes  # always holds, as this is only called internally
    6:         bboxes = []
    6:         lines = []
    6:         offsets = []
   18:         for artist in self.parent._children:
   12:             if isinstance(artist, Line2D):
   12:                 lines.append(
    6:                     artist.get_transform().transform_path(artist.get_path()))
    6:             elif isinstance(artist, Rectangle):
                       bboxes.append(
                           artist.get_bbox().transformed(artist.get_data_transform()))
    6:             elif isinstance(artist, Patch):
                       lines.append(
                           artist.get_transform().transform_path(artist.get_path()))
    6:             elif isinstance(artist, PolyCollection):
   30:                 lines.extend(artist.get_transform().transform_path(path)
   12:                              for path in artist.get_paths())
                   elif isinstance(artist, Collection):
                       transform, transOffset, hoffsets, _ = artist._prepare_points()
                       if len(hoffsets):
                           offsets.extend(transOffset.transform(hoffsets))
                   elif isinstance(artist, Text):
                       bboxes.append(artist.get_window_extent(renderer))
       
    6:         return bboxes, lines, offsets
       
    1:     def get_children(self):
               # docstring inherited
               return [self._legend_box, self.get_frame()]
       
    1:     def get_frame(self):
               """Return the `~.patches.Rectangle` used to frame the legend."""
               return self.legendPatch
       
    1:     def get_lines(self):
               r"""Return the list of `~.lines.Line2D`\s in the legend."""
               return [h for h in self.legend_handles if isinstance(h, Line2D)]
       
    1:     def get_patches(self):
               r"""Return the list of `~.patches.Patch`\s in the legend."""
               return silent_list('Patch',
                                  [h for h in self.legend_handles
                                   if isinstance(h, Patch)])
       
    1:     def get_texts(self):
               r"""Return the list of `~.text.Text`\s in the legend."""
               return silent_list('Text', self.texts)
       
    1:     def set_alignment(self, alignment):
               """
               Set the alignment of the legend title and the box of entries.
       
               The entries are aligned as a single block, so that markers always
               lined up.
       
               Parameters
               ----------
               alignment : {'center', 'left', 'right'}.
       
               """
               _api.check_in_list(["center", "left", "right"], alignment=alignment)
               self._alignment = alignment
               self._legend_box.align = alignment
       
    1:     def get_alignment(self):
               """Get the alignment value of the legend box"""
               return self._legend_box.align
       
    1:     def set_title(self, title, prop=None):
               """
               Set legend title and title style.
       
               Parameters
               ----------
               title : str
                   The legend title.
       
               prop : `.font_manager.FontProperties` or `str` or `pathlib.Path`
                   The font properties of the legend title.
                   If a `str`, it is interpreted as a fontconfig pattern parsed by
                   `.FontProperties`.  If a `pathlib.Path`, it is interpreted as the
                   absolute path to a font file.
       
               """
    2:         self._legend_title_box._text.set_text(title)
    2:         if title:
                   self._legend_title_box._text.set_visible(True)
                   self._legend_title_box.set_visible(True)
               else:
    2:             self._legend_title_box._text.set_visible(False)
    2:             self._legend_title_box.set_visible(False)
       
    2:         if prop is not None:
    2:             self._legend_title_box._text.set_fontproperties(prop)
       
    2:         self.stale = True
       
    1:     def get_title(self):
               """Return the `.Text` instance for the legend title."""
               return self._legend_title_box._text
       
    1:     def get_window_extent(self, renderer=None):
               # docstring inherited
               if renderer is None:
                   renderer = self.get_figure(root=True)._get_renderer()
               return self._legend_box.get_window_extent(renderer=renderer)
       
    1:     def get_tightbbox(self, renderer=None):
               # docstring inherited
    3:         return self._legend_box.get_window_extent(renderer)
       
    1:     def get_frame_on(self):
               """Get whether the legend box patch is drawn."""
               return self.legendPatch.get_visible()
       
    1:     def set_frame_on(self, b):
               """
               Set whether the legend box patch is drawn.
       
               Parameters
               ----------
               b : bool
               """
               self.legendPatch.set_visible(b)
               self.stale = True
       
    1:     draw_frame = set_frame_on  # Backcompat alias.
       
    1:     def get_bbox_to_anchor(self):
               """Return the bbox that the legend will be anchored to."""
   11:         if self._bbox_to_anchor is None:
   11:             return self.parent.bbox
               else:
                   return self._bbox_to_anchor
       
    1:     def set_bbox_to_anchor(self, bbox, transform=None):
               """
               Set the bbox that the legend will be anchored to.
       
               Parameters
               ----------
               bbox : `~matplotlib.transforms.BboxBase` or tuple
                   The bounding box can be specified in the following ways:
       
                   - A `.BboxBase` instance
                   - A tuple of ``(left, bottom, width, height)`` in the given
                     transform (normalized axes coordinate if None)
                   - A tuple of ``(left, bottom)`` where the width and height will be
                     assumed to be zero.
                   - *None*, to remove the bbox anchoring, and use the parent bbox.
       
               transform : `~matplotlib.transforms.Transform`, optional
                   A transform to apply to the bounding box. If not specified, this
                   will use a transform to the bounding box of the parent.
               """
    2:         if bbox is None:
    2:             self._bbox_to_anchor = None
    2:             return
               elif isinstance(bbox, BboxBase):
                   self._bbox_to_anchor = bbox
               else:
                   try:
                       l = len(bbox)
                   except TypeError as err:
                       raise ValueError(f"Invalid bbox: {bbox}") from err
       
                   if l == 2:
                       bbox = [bbox[0], bbox[1], 0, 0]
       
                   self._bbox_to_anchor = Bbox.from_bounds(*bbox)
       
               if transform is None:
                   transform = BboxTransformTo(self.parent.bbox)
       
               self._bbox_to_anchor = TransformedBbox(self._bbox_to_anchor,
                                                      transform)
               self.stale = True
       
    1:     def _get_anchored_bbox(self, loc, bbox, parentbbox, renderer):
               """
               Place the *bbox* inside the *parentbbox* according to a given
               location code. Return the (x, y) coordinate of the bbox.
       
               Parameters
               ----------
               loc : int
                   A location code in range(1, 11). This corresponds to the possible
                   values for ``self._loc``, excluding "best".
               bbox : `~matplotlib.transforms.Bbox`
                   bbox to be placed, in display coordinates.
               parentbbox : `~matplotlib.transforms.Bbox`
                   A parent box which will contain the bbox, in display coordinates.
               """
   22:         return offsetbox._get_anchored_bbox(
   11:             loc, bbox, parentbbox,
   11:             self.borderaxespad * renderer.points_to_pixels(self._fontsize))
       
    1:     def _find_best_position(self, width, height, renderer):
               """Determine the best location to place the legend."""
    6:         assert self.isaxes  # always holds, as this is only called internally
       
    6:         start_time = time.perf_counter()
       
    6:         bboxes, lines, offsets = self._auto_legend_data(renderer)
       
    6:         bbox = Bbox.from_bounds(0, 0, width, height)
       
    6:         candidates = []
    6:         for idx in range(1, len(self.codes)):
   12:             l, b = self._get_anchored_bbox(idx, bbox,
    6:                                            self.get_bbox_to_anchor(),
    6:                                            renderer)
    6:             legendBox = Bbox.from_bounds(l, b, width, height)
                   # XXX TODO: If markers are present, it would be good to take them
                   # into account when checking vertex overlaps in the next line.
   60:             badness = (sum(legendBox.count_contains(line.vertices)
   18:                            for line in lines)
    6:                        + legendBox.count_contains(offsets)
    6:                        + legendBox.count_overlaps(bboxes)
   42:                        + sum(line.intersects_bbox(legendBox, filled=False)
   18:                              for line in lines))
                   # Include the index to favor lower codes in case of a tie.
    6:             candidates.append((badness, idx, (l, b)))
    6:             if badness == 0:
    6:                 break
       
    6:         _, _, (l, b) = min(candidates)
       
    6:         if self._loc_used_default and time.perf_counter() - start_time > 1:
                   _api.warn_external(
                       'Creating legend with loc="best" can be slow with large '
                       'amounts of data.')
       
    6:         return l, b
       
    1:     def contains(self, mouseevent):
               return self.legendPatch.contains(mouseevent)
       
    1:     def set_draggable(self, state, use_blit=False, update='loc'):
               """
               Enable or disable mouse dragging support of the legend.
       
               Parameters
               ----------
               state : bool
                   Whether mouse dragging is enabled.
               use_blit : bool, optional
                   Use blitting for faster image composition. For details see
                   :ref:`func-animation`.
               update : {'loc', 'bbox'}, optional
                   The legend parameter to be changed when dragged:
       
                   - 'loc': update the *loc* parameter of the legend
                   - 'bbox': update the *bbox_to_anchor* parameter of the legend
       
               Returns
               -------
               `.DraggableLegend` or *None*
                   If *state* is ``True`` this returns the `.DraggableLegend` helper
                   instance. Otherwise this returns *None*.
               """
    2:         if state:
                   if self._draggable is None:
                       self._draggable = DraggableLegend(self,
                                                         use_blit,
                                                         update=update)
               else:
    2:             if self._draggable is not None:
                       self._draggable.disconnect()
    2:             self._draggable = None
    2:         return self._draggable
       
    1:     def get_draggable(self):
               """Return ``True`` if the legend is draggable, ``False`` otherwise."""
               return self._draggable is not None
       
       
       # Helper functions to parse legend arguments for both `figure.legend` and
       # `axes.legend`:
    1: def _get_legend_handles(axs, legend_handler_map=None):
           """Yield artists that can be used as handles in a legend."""
    2:     handles_original = []
    4:     for ax in axs:
    6:         handles_original += [
   28:             *(a for a in ax._children
   12:               if isinstance(a, (Line2D, Patch, Collection, Text))),
    2:             *ax.containers]
               # support parasite Axes:
    2:         if hasattr(ax, 'parasites'):
                   for axx in ax.parasites:
                       handles_original += [
                           *(a for a in axx._children
                             if isinstance(a, (Line2D, Patch, Collection, Text))),
                           *axx.containers]
       
    4:     handler_map = {**Legend.get_default_handler_map(),
    2:                    **(legend_handler_map or {})}
    2:     has_handler = Legend.get_legend_handler
   14:     for handle in handles_original:
   12:         label = handle.get_label()
   12:         if label != '_nolegend_' and has_handler(handler_map, handle):
   12:             yield handle
               elif (label and not label.startswith('_') and
                       not has_handler(handler_map, handle)):
                   _api.warn_external(
                                    "Legend does not support handles for "
                                    f"{type(handle).__name__} "
                                    "instances.\nSee: https://matplotlib.org/stable/"
                                    "tutorials/intermediate/legend_guide.html"
                                    "#implementing-a-custom-legend-handler")
                   continue
       
       
    1: def _get_legend_handles_labels(axs, legend_handler_map=None):
           """Return handles and labels for legend."""
    2:     handles = []
    2:     labels = []
   14:     for handle in _get_legend_handles(axs, legend_handler_map):
   12:         label = handle.get_label()
   12:         if label and not label.startswith('_'):
    5:             handles.append(handle)
    5:             labels.append(label)
    2:     return handles, labels
       
       
    1: def _parse_legend_args(axs, *args, handles=None, labels=None, **kwargs):
           """
           Get the handles and labels from the calls to either ``figure.legend``
           or ``axes.legend``.
       
           The parser is a bit involved because we support::
       
               legend()
               legend(labels)
               legend(handles, labels)
               legend(labels=labels)
               legend(handles=handles)
               legend(handles=handles, labels=labels)
       
           The behavior for a mixture of positional and keyword handles and labels
           is undefined and issues a warning; it will be an error in the future.
       
           Parameters
           ----------
           axs : list of `.Axes`
               If handles are not given explicitly, the artists in these Axes are
               used as handles.
           *args : tuple
               Positional parameters passed to ``legend()``.
           handles
               The value of the keyword argument ``legend(handles=...)``, or *None*
               if that keyword argument was not used.
           labels
               The value of the keyword argument ``legend(labels=...)``, or *None*
               if that keyword argument was not used.
           **kwargs
               All other keyword arguments passed to ``legend()``.
       
           Returns
           -------
           handles : list of (`.Artist` or tuple of `.Artist`)
               The legend handles.
           labels : list of str
               The legend labels.
           kwargs : dict
               *kwargs* with keywords handles and labels removed.
       
           """
    2:     log = logging.getLogger(__name__)
       
    2:     handlers = kwargs.get('handler_map')
       
    2:     if (handles is not None or labels is not None) and args:
               _api.warn_deprecated("3.9", message=(
                   "You have mixed positional and keyword arguments, some input may "
                   "be discarded.  This is deprecated since %(since)s and will "
                   "become an error in %(removal)s."))
       
    2:     if (hasattr(handles, "__len__") and
                   hasattr(labels, "__len__") and
                   len(handles) != len(labels)):
               _api.warn_external(f"Mismatched number of handles and labels: "
                                  f"len(handles) = {len(handles)} "
                                  f"len(labels) = {len(labels)}")
           # if got both handles and labels as kwargs, make same length
    2:     if handles and labels:
               handles, labels = zip(*zip(handles, labels))
       
    2:     elif handles is not None and labels is None:
               labels = [handle.get_label() for handle in handles]
       
    2:     elif labels is not None and handles is None:
               # Get as many handles as there are labels.
               handles = [handle for handle, label
                          in zip(_get_legend_handles(axs, handlers), labels)]
       
    2:     elif len(args) == 0:  # 0 args: automatically detect labels and handles.
    2:         handles, labels = _get_legend_handles_labels(axs, handlers)
    2:         if not handles:
    2:             _api.warn_external(
    1:                 "No artists with labels found to put in legend.  Note that "
                       "artists whose label start with an underscore are ignored "
                       "when legend() is called with no argument.")
       
           elif len(args) == 1:  # 1 arg: user defined labels, automatic handle detection.
               labels, = args
               if any(isinstance(l, Artist) for l in labels):
                   raise TypeError("A single argument passed to legend() must be a "
                                   "list of labels, but found an Artist in there.")
       
               # Get as many handles as there are labels.
               handles = [handle for handle, label
                          in zip(_get_legend_handles(axs, handlers), labels)]
       
           elif len(args) == 2:  # 2 args: user defined handles and labels.
               handles, labels = args[:2]
       
           else:
               raise _api.nargs_error('legend', '0-2', len(args))
       
    2:     return handles, labels, kwargs
