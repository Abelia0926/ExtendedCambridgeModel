    1: from ctypes import (c_char_p, byref, POINTER, c_bool, create_string_buffer,
                           c_size_t, string_at)
       
    1: from llvmlite.binding import ffi
    1: from llvmlite.binding.linker import link_modules
    1: from llvmlite.binding.common import _decode_string, _encode_string
    1: from llvmlite.binding.value import ValueRef, TypeRef
    1: from llvmlite.binding.context import get_global_context
       
       
    1: def parse_assembly(llvmir, context=None):
           """
           Create Module from a LLVM IR string
           """
  154:     if context is None:
  154:         context = get_global_context()
  154:     llvmir = _encode_string(llvmir)
  154:     strbuf = c_char_p(llvmir)
  308:     with ffi.OutputString() as errmsg:
  308:         mod = ModuleRef(
  154:             ffi.lib.LLVMPY_ParseAssembly(context, strbuf, errmsg),
  154:             context)
  154:         if errmsg:
                   mod.close()
                   raise RuntimeError("LLVM IR parsing error\n{0}".format(errmsg))
  154:     return mod
       
       
    1: def parse_bitcode(bitcode, context=None):
           """
           Create Module from a LLVM *bitcode* (a bytes object).
           """
    3:     if context is None:
    3:         context = get_global_context()
    3:     buf = c_char_p(bitcode)
    3:     bufsize = len(bitcode)
    6:     with ffi.OutputString() as errmsg:
    9:         mod = ModuleRef(ffi.lib.LLVMPY_ParseBitcode(
    6:             context, buf, bufsize, errmsg), context)
    3:         if errmsg:
                   mod.close()
                   raise RuntimeError(
                       "LLVM bitcode parsing error\n{0}".format(errmsg))
    3:     return mod
       
       
    2: class ModuleRef(ffi.ObjectRef):
    1:     """
           A reference to a LLVM module.
           """
       
    1:     def __init__(self, module_ptr, context):
  234:         super(ModuleRef, self).__init__(module_ptr)
  234:         self._context = context
       
    1:     def __str__(self):
   50:         with ffi.OutputString() as outstr:
   25:             ffi.lib.LLVMPY_PrintModuleToString(self, outstr)
   25:             return str(outstr)
       
    1:     def as_bitcode(self):
               """
               Return the module's LLVM bitcode, as a bytes object.
               """
               ptr = c_char_p(None)
               size = c_size_t(-1)
               ffi.lib.LLVMPY_WriteBitcodeToString(self, byref(ptr), byref(size))
               if not ptr:
                   raise MemoryError
               try:
                   assert size.value >= 0
                   return string_at(ptr, size.value)
               finally:
                   ffi.lib.LLVMPY_DisposeString(ptr)
       
    1:     def _dispose(self):
   87:         self._capi.LLVMPY_DisposeModule(self)
       
    1:     def get_function(self, name):
               """
               Get a ValueRef pointing to the function named *name*.
               NameError is raised if the symbol isn't found.
               """
   38:         p = ffi.lib.LLVMPY_GetNamedFunction(self, _encode_string(name))
   38:         if not p:
                   raise NameError(name)
   38:         return ValueRef(p, 'function', dict(module=self))
       
    1:     def get_global_variable(self, name):
               """
               Get a ValueRef pointing to the global variable named *name*.
               NameError is raised if the symbol isn't found.
               """
   62:         p = ffi.lib.LLVMPY_GetNamedGlobalVariable(self, _encode_string(name))
   62:         if not p:
                   raise NameError(name)
   62:         return ValueRef(p, 'global', dict(module=self))
       
    1:     def get_struct_type(self, name):
               """
               Get a TypeRef pointing to a structure type named *name*.
               NameError is raised if the struct type isn't found.
               """
               p = ffi.lib.LLVMPY_GetNamedStructType(self, _encode_string(name))
               if not p:
                   raise NameError(name)
               return TypeRef(p)
       
    1:     def verify(self):
               """
               Verify the module IR's correctness.  RuntimeError is raised on error.
               """
  126:         with ffi.OutputString() as outmsg:
   63:             if ffi.lib.LLVMPY_VerifyModule(self, outmsg):
                       raise RuntimeError(str(outmsg))
       
    2:     @property
    2:     def name(self):
               """
               The module's identifier.
               """
               return _decode_string(ffi.lib.LLVMPY_GetModuleName(self))
       
    2:     @name.setter
    2:     def name(self, value):
   67:         ffi.lib.LLVMPY_SetModuleName(self, _encode_string(value))
       
    2:     @property
    2:     def source_file(self):
               """
               The module's original source file name
               """
               return _decode_string(ffi.lib.LLVMPY_GetModuleSourceFileName(self))
       
    2:     @property
    2:     def data_layout(self):
               """
               This module's data layout specification, as a string.
               """
               # LLVMGetDataLayout() points inside a std::string managed by LLVM.
               with ffi.OutputString(owned=False) as outmsg:
                   ffi.lib.LLVMPY_GetDataLayout(self, outmsg)
                   return str(outmsg)
       
    2:     @data_layout.setter
    2:     def data_layout(self, strrep):
   76:         ffi.lib.LLVMPY_SetDataLayout(self,
   76:                                      create_string_buffer(
   38:                                          strrep.encode('utf8')))
       
    2:     @property
    2:     def triple(self):
               """
               This module's target "triple" specification, as a string.
               """
               # LLVMGetTarget() points inside a std::string managed by LLVM.
   82:         with ffi.OutputString(owned=False) as outmsg:
   41:             ffi.lib.LLVMPY_GetTarget(self, outmsg)
   41:             return str(outmsg)
       
    2:     @triple.setter
    2:     def triple(self, strrep):
               ffi.lib.LLVMPY_SetTarget(self,
                                        create_string_buffer(
                                            strrep.encode('utf8')))
       
    1:     def link_in(self, other, preserve=False):
               """
               Link the *other* module into this one.  The *other* module will
               be destroyed unless *preserve* is true.
               """
   92:         if preserve:
   54:             other = other.clone()
   92:         link_modules(self, other)
       
    2:     @property
    2:     def global_variables(self):
               """
               Return an iterator over this module's global variables.
               The iterator will yield a ValueRef for each global variable.
       
               Note that global variables don't include functions
               (a function is a "global value" but not a "global variable" in
                LLVM parlance)
               """
   88:         it = ffi.lib.LLVMPY_ModuleGlobalsIter(self)
   88:         return _GlobalsIterator(it, dict(module=self))
       
    2:     @property
    2:     def functions(self):
               """
               Return an iterator over this module's functions.
               The iterator will yield a ValueRef for each function.
               """
  148:         it = ffi.lib.LLVMPY_ModuleFunctionsIter(self)
  148:         return _FunctionsIterator(it, dict(module=self))
       
    2:     @property
    2:     def struct_types(self):
               """
               Return an iterator over the struct types defined in
               the module. The iterator will yield a TypeRef.
               """
               it = ffi.lib.LLVMPY_ModuleTypesIter(self)
               return _TypesIterator(it, dict(module=self))
       
    1:     def clone(self):
   77:         return ModuleRef(ffi.lib.LLVMPY_CloneModule(self), self._context)
       
       
    2: class _Iterator(ffi.ObjectRef):
       
    1:     kind = None
       
    1:     def __init__(self, ptr, parents):
  236:         ffi.ObjectRef.__init__(self, ptr)
  236:         self._parents = parents
  236:         assert self.kind is not None
       
    1:     def __next__(self):
 2328:         vp = self._next()
 2328:         if vp:
 2092:             return ValueRef(vp, self.kind, self._parents)
               else:
  236:             raise StopIteration
       
    1:     next = __next__
       
    1:     def __iter__(self):
  236:         return self
       
       
    2: class _GlobalsIterator(_Iterator):
       
    1:     kind = 'global'
       
    1:     def _dispose(self):
   88:         self._capi.LLVMPY_DisposeGlobalsIter(self)
       
    1:     def _next(self):
 1085:         return ffi.lib.LLVMPY_GlobalsIterNext(self)
       
       
    2: class _FunctionsIterator(_Iterator):
       
    1:     kind = 'function'
       
    1:     def _dispose(self):
  148:         self._capi.LLVMPY_DisposeFunctionsIter(self)
       
    1:     def _next(self):
 1243:         return ffi.lib.LLVMPY_FunctionsIterNext(self)
       
       
    2: class _TypesIterator(_Iterator):
       
    1:     kind = 'type'
       
    1:     def _dispose(self):
               self._capi.LLVMPY_DisposeTypesIter(self)
       
    1:     def __next__(self):
               vp = self._next()
               if vp:
                   return TypeRef(vp)
               else:
                   raise StopIteration
       
    1:     def _next(self):
               return ffi.lib.LLVMPY_TypesIterNext(self)
       
    1:     next = __next__
       
       
       # =============================================================================
       # Set function FFI
       
    2: ffi.lib.LLVMPY_ParseAssembly.argtypes = [ffi.LLVMContextRef,
    1:                                          c_char_p,
    1:                                          POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_ParseAssembly.restype = ffi.LLVMModuleRef
       
    2: ffi.lib.LLVMPY_ParseBitcode.argtypes = [ffi.LLVMContextRef,
    1:                                         c_char_p, c_size_t,
    1:                                         POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_ParseBitcode.restype = ffi.LLVMModuleRef
       
    1: ffi.lib.LLVMPY_DisposeModule.argtypes = [ffi.LLVMModuleRef]
       
    2: ffi.lib.LLVMPY_PrintModuleToString.argtypes = [ffi.LLVMModuleRef,
    1:                                                POINTER(c_char_p)]
    2: ffi.lib.LLVMPY_WriteBitcodeToString.argtypes = [ffi.LLVMModuleRef,
    1:                                                 POINTER(c_char_p),
    1:                                                 POINTER(c_size_t)]
       
    2: ffi.lib.LLVMPY_GetNamedFunction.argtypes = [ffi.LLVMModuleRef,
    1:                                             c_char_p]
    1: ffi.lib.LLVMPY_GetNamedFunction.restype = ffi.LLVMValueRef
       
    2: ffi.lib.LLVMPY_VerifyModule.argtypes = [ffi.LLVMModuleRef,
    1:                                         POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_VerifyModule.restype = c_bool
       
    1: ffi.lib.LLVMPY_GetDataLayout.argtypes = [ffi.LLVMModuleRef, POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_SetDataLayout.argtypes = [ffi.LLVMModuleRef, c_char_p]
       
    1: ffi.lib.LLVMPY_GetTarget.argtypes = [ffi.LLVMModuleRef, POINTER(c_char_p)]
    1: ffi.lib.LLVMPY_SetTarget.argtypes = [ffi.LLVMModuleRef, c_char_p]
       
    1: ffi.lib.LLVMPY_GetNamedGlobalVariable.argtypes = [ffi.LLVMModuleRef, c_char_p]
    1: ffi.lib.LLVMPY_GetNamedGlobalVariable.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_GetNamedStructType.argtypes = [ffi.LLVMModuleRef, c_char_p]
    1: ffi.lib.LLVMPY_GetNamedStructType.restype = ffi.LLVMTypeRef
       
    1: ffi.lib.LLVMPY_ModuleGlobalsIter.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_ModuleGlobalsIter.restype = ffi.LLVMGlobalsIterator
       
    1: ffi.lib.LLVMPY_DisposeGlobalsIter.argtypes = [ffi.LLVMGlobalsIterator]
       
    1: ffi.lib.LLVMPY_GlobalsIterNext.argtypes = [ffi.LLVMGlobalsIterator]
    1: ffi.lib.LLVMPY_GlobalsIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_ModuleFunctionsIter.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_ModuleFunctionsIter.restype = ffi.LLVMFunctionsIterator
       
    1: ffi.lib.LLVMPY_ModuleTypesIter.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_ModuleTypesIter.restype = ffi.LLVMTypesIterator
       
    1: ffi.lib.LLVMPY_DisposeFunctionsIter.argtypes = [ffi.LLVMFunctionsIterator]
       
    1: ffi.lib.LLVMPY_DisposeTypesIter.argtypes = [ffi.LLVMTypesIterator]
       
    1: ffi.lib.LLVMPY_FunctionsIterNext.argtypes = [ffi.LLVMFunctionsIterator]
    1: ffi.lib.LLVMPY_FunctionsIterNext.restype = ffi.LLVMValueRef
       
    1: ffi.lib.LLVMPY_TypesIterNext.argtypes = [ffi.LLVMTypesIterator]
    1: ffi.lib.LLVMPY_TypesIterNext.restype = ffi.LLVMTypeRef
       
    1: ffi.lib.LLVMPY_CloneModule.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_CloneModule.restype = ffi.LLVMModuleRef
       
    1: ffi.lib.LLVMPY_GetModuleName.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_GetModuleName.restype = c_char_p
       
    1: ffi.lib.LLVMPY_SetModuleName.argtypes = [ffi.LLVMModuleRef, c_char_p]
       
    1: ffi.lib.LLVMPY_GetModuleSourceFileName.argtypes = [ffi.LLVMModuleRef]
    1: ffi.lib.LLVMPY_GetModuleSourceFileName.restype = c_char_p
