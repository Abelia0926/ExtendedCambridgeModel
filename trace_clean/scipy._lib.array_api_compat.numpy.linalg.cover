    1: from numpy.linalg import * # noqa: F403
    1: from numpy.linalg import __all__ as linalg_all
    1: import numpy as _np
       
    1: from ..common import _linalg
    1: from .._internal import get_xp
       
       # These functions are in both the main and linalg namespaces
    1: from ._aliases import matmul, matrix_transpose, tensordot, vecdot # noqa: F401
       
    1: import numpy as np
       
    1: cross = get_xp(np)(_linalg.cross)
    1: outer = get_xp(np)(_linalg.outer)
    1: EighResult = _linalg.EighResult
    1: QRResult = _linalg.QRResult
    1: SlogdetResult = _linalg.SlogdetResult
    1: SVDResult = _linalg.SVDResult
    1: eigh = get_xp(np)(_linalg.eigh)
    1: qr = get_xp(np)(_linalg.qr)
    1: slogdet = get_xp(np)(_linalg.slogdet)
    1: svd = get_xp(np)(_linalg.svd)
    1: cholesky = get_xp(np)(_linalg.cholesky)
    1: matrix_rank = get_xp(np)(_linalg.matrix_rank)
    1: pinv = get_xp(np)(_linalg.pinv)
    1: matrix_norm = get_xp(np)(_linalg.matrix_norm)
    1: svdvals = get_xp(np)(_linalg.svdvals)
    1: diagonal = get_xp(np)(_linalg.diagonal)
    1: trace = get_xp(np)(_linalg.trace)
       
       # Note: unlike np.linalg.solve, the array API solve() only accepts x2 as a
       # vector when it is exactly 1-dimensional. All other cases treat x2 as a stack
       # of matrices. The np.linalg.solve behavior of allowing stacks of both
       # matrices and vectors is ambiguous c.f.
       # https://github.com/numpy/numpy/issues/15349 and
       # https://github.com/data-apis/array-api/issues/285.
       
       # To workaround this, the below is the code from np.linalg.solve except
       # only calling solve1 in the exactly 1D case.
       
       # This code is here instead of in common because it is numpy specific. Also
       # note that CuPy's solve() does not currently support broadcasting (see
       # https://github.com/cupy/cupy/blob/main/cupy/cublas.py#L43).
    1: def solve(x1: _np.ndarray, x2: _np.ndarray, /) -> _np.ndarray:
           try:
               from numpy.linalg._linalg import (
               _makearray, _assert_stacked_2d, _assert_stacked_square,
               _commonType, isComplexType, _raise_linalgerror_singular
               )
           except ImportError:
               from numpy.linalg.linalg import (
               _makearray, _assert_stacked_2d, _assert_stacked_square,
               _commonType, isComplexType, _raise_linalgerror_singular
               )
           from numpy.linalg import _umath_linalg
       
           x1, _ = _makearray(x1)
           _assert_stacked_2d(x1)
           _assert_stacked_square(x1)
           x2, wrap = _makearray(x2)
           t, result_t = _commonType(x1, x2)
       
           # This part is different from np.linalg.solve
           if x2.ndim == 1:
               gufunc = _umath_linalg.solve1
           else:
               gufunc = _umath_linalg.solve
       
           # This does nothing currently but is left in because it will be relevant
           # when complex dtype support is added to the spec in 2022.
           signature = 'DD->D' if isComplexType(t) else 'dd->d'
           with _np.errstate(call=_raise_linalgerror_singular, invalid='call',
                             over='ignore', divide='ignore', under='ignore'):
               r = gufunc(x1, x2, signature=signature)
       
           return wrap(r.astype(result_t, copy=False))
       
       # These functions are completely new here. If the library already has them
       # (i.e., numpy 2.0), use the library version instead of our wrapper.
    1: if hasattr(np.linalg, 'vector_norm'):
           vector_norm = np.linalg.vector_norm
       else:
    1:     vector_norm = get_xp(np)(_linalg.vector_norm)
       
    1: __all__ = linalg_all + _linalg.__all__ + ['solve']
       
    1: del get_xp
    1: del np
    1: del linalg_all
    1: del _linalg
