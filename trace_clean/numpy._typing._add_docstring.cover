    1: """A module for creating docstrings for sphinx ``data`` domains."""
       
    1: import re
    1: import textwrap
       
    1: from ._array_like import NDArray
       
    1: _docstrings_list = []
       
       
    1: def add_newdoc(name: str, value: str, doc: str) -> None:
           """Append ``_docstrings_list`` with a docstring for `name`.
       
           Parameters
           ----------
           name : str
               The name of the object.
           value : str
               A string-representation of the object.
           doc : str
               The docstring of the object.
       
           """
    3:     _docstrings_list.append((name, value, doc))
       
       
    1: def _parse_docstrings() -> str:
           """Convert all docstrings in ``_docstrings_list`` into a single
           sphinx-legible text block.
       
           """
    1:     type_list_ret = []
    4:     for name, value, doc in _docstrings_list:
    3:         s = textwrap.dedent(doc).replace("\n", "\n    ")
       
               # Replace sections by rubrics
    3:         lines = s.split("\n")
    3:         new_lines = []
    3:         indent = ""
   89:         for line in lines:
   86:             m = re.match(r'^(\s+)[-=]+\s*$', line)
   86:             if m and new_lines:
    5:                 prev = textwrap.dedent(new_lines.pop())
    5:                 if prev == "Examples":
    3:                     indent = ""
    3:                     new_lines.append(f'{m.group(1)}.. rubric:: {prev}')
                       else:
    2:                     indent = 4 * " "
    2:                     new_lines.append(f'{m.group(1)}.. admonition:: {prev}')
    5:                 new_lines.append("")
                   else:
   81:                 new_lines.append(f"{indent}{line}")
       
    3:         s = "\n".join(new_lines)
    3:         s_block = f""".. data:: {name}\n    :value: {value}\n    {s}"""
    3:         type_list_ret.append(s_block)
    1:     return "\n".join(type_list_ret)
       
       
    2: add_newdoc('ArrayLike', 'typing.Union[...]',
    1:     """
           A `~typing.Union` representing objects that can be coerced
           into an `~numpy.ndarray`.
       
           Among others this includes the likes of:
       
           * Scalars.
           * (Nested) sequences.
           * Objects implementing the `~class.__array__` protocol.
       
           .. versionadded:: 1.20
       
           See Also
           --------
           :term:`array_like`:
               Any scalar or sequence that can be interpreted as an ndarray.
       
           Examples
           --------
           .. code-block:: python
       
               >>> import numpy as np
               >>> import numpy.typing as npt
       
               >>> def as_array(a: npt.ArrayLike) -> np.ndarray:
               ...     return np.array(a)
       
           """)
       
    2: add_newdoc('DTypeLike', 'typing.Union[...]',
    1:     """
           A `~typing.Union` representing objects that can be coerced
           into a `~numpy.dtype`.
       
           Among others this includes the likes of:
       
           * :class:`type` objects.
           * Character codes or the names of :class:`type` objects.
           * Objects with the ``.dtype`` attribute.
       
           .. versionadded:: 1.20
       
           See Also
           --------
           :ref:`Specifying and constructing data types <arrays.dtypes.constructing>`
               A comprehensive overview of all objects that can be coerced
               into data types.
       
           Examples
           --------
           .. code-block:: python
       
               >>> import numpy as np
               >>> import numpy.typing as npt
       
               >>> def as_dtype(d: npt.DTypeLike) -> np.dtype:
               ...     return np.dtype(d)
       
           """)
       
    2: add_newdoc('NDArray', repr(NDArray),
    1:     """
           A :term:`generic <generic type>` version of
           `np.ndarray[Any, np.dtype[+ScalarType]] <numpy.ndarray>`.
       
           Can be used during runtime for typing arrays with a given dtype
           and unspecified shape.
       
           .. versionadded:: 1.21
       
           Examples
           --------
           .. code-block:: python
       
               >>> import numpy as np
               >>> import numpy.typing as npt
       
               >>> print(npt.NDArray)
               numpy.ndarray[typing.Any, numpy.dtype[+ScalarType]]
       
               >>> print(npt.NDArray[np.float64])
               numpy.ndarray[typing.Any, numpy.dtype[numpy.float64]]
       
               >>> NDArrayInt = npt.NDArray[np.int_]
               >>> a: NDArrayInt = np.arange(10)
       
               >>> def func(a: npt.ArrayLike) -> npt.NDArray[Any]:
               ...     return np.array(a)
       
           """)
       
    1: _docstrings = _parse_docstrings()
